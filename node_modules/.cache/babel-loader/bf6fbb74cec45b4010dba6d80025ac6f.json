{"ast":null,"code":"import _objectSpread from \"C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport { game_vocab } from \"./definitions_and_words\";\nimport { gameGrammar, animalsGrammar, weekdaysGrammar, occupationsGrammar, familyGrammar, verbsGrammar, coloursGrammar, geographicalGrammar } from \"./grammars/vocabGrammar\";\nconst promptReset = assign(context => {\n  return {\n    count: 0\n  };\n});\nconst scoreReset = assign(context => {\n  return {\n    score: 0\n  };\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst cancel = actions.cancel;\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_this],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN')\n        /*send ('TIMEOUT', {delay: 30000, id: 'timer'})*/\n        ]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        id: 'idle',\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'timeout_final'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say(':et us give it one last try'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nfunction Say_play(say_word) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_word],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 30000,\n          id: 'timer2'\n        })]\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            target: 'reprompt'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      reprompt: {\n        entry: say('Time is running out!')\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      },\n      skip_to_next: {\n        entry: send('SKIP_STATE')\n      }\n    }\n  };\n}\n\n_c = Say_play;\n\nfunction Show_play() {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: send('SHOW')\n      },\n      show: {\n        entry: say(' '),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      reprompt: {\n        entry: [say(\"Time is up three!\")],\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      },\n      skip_to_next: {\n        entry: send('SKIP_STATE')\n      }\n    }\n  };\n}\n\n_c2 = Show_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      id: 'welcome',\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'which_game'\n      },\n      states: {\n        prompt: {\n          entry: [scoreReset, say('Welcome to Sweenglish!')]\n        }\n      }\n    },\n    which_game: {\n      initial: 'prompt',\n      id: 'which_game',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say('Which game would you like to play?'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#exit_app'\n        }, {\n          cond: context => context.intentResult === 'Help',\n          target: '#general_help'\n        }, {\n          cond: context => context.intentResult === 'Animals' || context.intentResult === 'Weekdays' || context.intentResult === 'Family' || context.intentResult === 'Occupation' || context.intentResult === 'Colours' || context.intentResult === 'Verbs' || context.intentResult === 'Family' || context.intentResult === 'Geographical',\n          target: '.pick_game'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Sadly such game is not yet implemented. Let us try again.\"),\n          on: {\n            ENDSPEECH: '#which_game'\n          }\n        },\n        pick_game: {\n          entry: say(\"Great choice, but you have to choose a game mode first. Please try again\"),\n          on: {\n            ENDSPEECH: '#which_game'\n          }\n        }\n      }\n    },\n    general_help: {\n      initial: 'prompt',\n      id: 'general_help',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say(' Swenglish has three games: wordplay, definitions, and picturs. In Wordplay, you will be given a word in English and will have to come up,\\\n                 with its correspondence in Swedish. In definitions, you will be given definitions and will have to say the corresponding word in Swedish. In pictures, you will\\\n                be shown a picture and will have to name what you see in Swedish.')\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: [assign(context => {\n            return {\n              task: context.recResult\n            };\n          }), cancel('timer'), cancel('timer2')],\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay_again'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Weekdays',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Occupation',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Colours',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Verbs',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Family',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Geographical',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'wordplay_pregame'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_again: _objectSpread({\n      id: 'wordplay_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))),\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                        Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change the game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#which_game'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay.\"))),\n    wordplay_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n          target: \"#wordplay_animals_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n          target: \"#wordplay_weekdays_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n          target: \"#wordplay_occupations_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n          target: \"#wordplay_colours_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n          target: \"#wordplay_verbs_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n          target: \"#wordplay_family_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n          target: \"#wordplay_geographical_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.game_category, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n\n    /* ===================================================== WORDPLAY ANIMALS ===================================================================================================*/\n    wordplay_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.english))),\n    wordplay_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.english))),\n    wordplay_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.english))),\n    wordplay_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_giraffe'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.english))),\n    wordplay_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.english))),\n    wordplay_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.english))),\n    wordplay_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.english))),\n\n    /* ==================================================================== WORDPLAY WEEKDAYS =================================================================================*/\n    wordplay_weekdays_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_weekdays_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Monday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_tuesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_tuesday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Monday.english))),\n    wordplay_tuesday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_tuesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_wednesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_wednesday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Tuesday.english))),\n    wordplay_wednesday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_wednesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_thursday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_thursday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Wednesday.english))),\n    wordplay_thursday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_thursday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_friday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_friday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Thursday.english))),\n    wordplay_friday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_friday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_saturday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_saturday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Friday.english))),\n    wordplay_saturday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_saturday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sunday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sunday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Saturday.english))),\n    wordplay_sunday: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sunday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Sunday.english))),\n\n    /* ==================================================================== WORDPLAY OCCUPATIONS =================================================================================*/\n    wordplay_occupations_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_occupations_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_doctor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_doctor'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.teacher.english))),\n    wordplay_doctor: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_doctor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_builder'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_builder'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.doctor.english))),\n    wordplay_builder: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_builder',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_lifeguard'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_lifeguard'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.builder.english))),\n    wordplay_lifeguard: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_lifeguard',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_actor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_actor'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.lifeguard.english))),\n    wordplay_actor: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_actor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_engineer'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_engineer'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.actor.english))),\n    wordplay_engineer: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_engineer',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_garbage_man'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_garbage_man'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.engineer.english))),\n    wordplay_garbage_man: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_garbage_man',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.garbage_man.english))),\n\n    /* ==================================================================== WORDPLAY COLOURS =================================================================================*/\n    wordplay_colours_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_colours_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yellow\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_red'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_red'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.yellow.english))),\n    wordplay_red: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_red',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"red\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_purple'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_purple'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.red.english))),\n    wordplay_purple: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_purple',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"purple\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_brown'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_brown'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.purple.english))),\n    wordplay_brown: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_brown',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"brown\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_black'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_black'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.brown.english))),\n    wordplay_black: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_black',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"black\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_white'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_white'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.black.english))),\n    wordplay_white: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_white',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"white\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_green'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_green'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.white.english))),\n    wordplay_green: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_green',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"green\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.green.english))),\n\n    /* ==================================================================== WORDPLAY VERBS =================================================================================*/\n    wordplay_verbs_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_verbs_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"go\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_run'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_run'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.go.english))),\n    wordplay_run: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_run',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"run\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_eat'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_eat'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.run.english))),\n    wordplay_eat: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_eat',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"eat\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sleep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sleep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.eat.english))),\n    wordplay_sleep: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sleep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sleep\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_write'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_write'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.sleep.english))),\n    wordplay_write: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_write',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"write\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sing'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sing'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.write.english))),\n    wordplay_sing: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sing',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sing\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_drink'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_drink'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.sing.english))),\n    wordplay_drink: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_drink',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"drink\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.drink.english))),\n\n    /* ===================================================== WORDPLAY FAMILY ===================================================================================================*/\n    wordplay_family_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_family_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_brother'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_brother'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.cousin.english))),\n    wordplay_brother: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_brother',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sister'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sister'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.brother.english))),\n    wordplay_sister: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sister',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_mum'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_mum'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.sister.english))),\n    wordplay_mum: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_mum',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dad'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dad'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.mum.english))),\n    wordplay_dad: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dad',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_grandma_1'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_grandma_1'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.dad.english))),\n    wordplay_grandma_1: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_grandma_1',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_grandma_2'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_grandma_2'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.grandma_1.english))),\n    wordplay_grandma_2: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_grandma_2',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.grandma_2.english))),\n\n    /* ===================================================== WORDPLAY GEOGRAPHICAL  ===================================================================================================*/\n    wordplay_geographical_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_geographical_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_mountain'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_mountain'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.river.english))),\n    wordplay_mountain: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_mountain',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sea'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sea'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.mountain.english))),\n    wordplay_sea: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sea',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_forest'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_forest'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.sea.english))),\n    wordplay_forest: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_forest',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_lake'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_lake'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.forest.english))),\n    wordplay_lake: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_lake',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_cliff'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_cliff'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.lake.english))),\n    wordplay_cliff: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_cliff',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_cave'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_cave'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.cliff.english))),\n    wordplay_cave: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_cave',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.cave.english))),\n\n    /* ==================================================================== WORDPLAY SUMMARY =================================================================================*/\n    wordplay_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#wordplay'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"Well done! Your current score is \".concat(context.score, \". Would you like to play Wordplay again, or try some other game?\")\n    })))),\n    definitions: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        RECOGNISED: [{\n          actions: [assign(context => {\n            return {\n              task: context.recResult\n            };\n          }), cancel('timer'), cancel('timer2')],\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))),\n    definitions_invocation: {\n      initial: 'prompt',\n      id: 'definitions_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#definitions_choice'))\n      }\n    },\n    definitions_choice: {\n      initial: 'prompt',\n      id: 'definitions_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'definitions_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions_again'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Weekdays',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Occupation',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Colours',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Verbs',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Family',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          cond: context => context.intentResult === 'Geographical',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'definitions_pregame'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    definitions_again: _objectSpread({\n      id: 'definitions_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))),\n    definitions_help: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'definitions_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a\\\n                             corresponding word in Swedish. You can choose from seven categories: Animals, Weekdays, Occupations, Colours, Verbs,\\\n                            Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick\\\n                             a category or change to another game.\"))),\n    definitions_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))),\n    definitions_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n          target: \"#definitions_animals_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n          target: \"#definitions_weekdays_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n          target: \"#definitions_occupations_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n          target: \"#definitions_colours_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n          target: \"#definitions_verbs_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n          target: \"#definitions_family_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n          target: \"#definitions_geographical_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.\")\n          })),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n\n    /*=========================================================================DEFINITIONS ANIMALS===============================================================================================*/\n    definitions_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#definitions_dog'\n        },\n        SKIP_STATE: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#definitions_dog'\n        },\n        TIMEOUT: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.definition))),\n    definitions_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_fox'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.definition))),\n    definitions_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sheep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.definition))),\n    definitions_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_giraffe'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.definition))),\n    definitions_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_crocodile'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.definition))),\n    definitions_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_peacock'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.definition))),\n    definitions_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.definition))),\n\n    /* ==================================================================== DEFINITIONS WEEKDAYS =================================================================================*/\n    definitions_weekdays_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_weekdays_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Monday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_tuesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_tuesday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Monday.definition))),\n    definitions_tuesday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_tuesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_wednesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_wednesday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Tuesday.definition))),\n    definitions_wednesday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_wednesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_thursday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_thursday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Wednesday.definition))),\n    definitions_thursday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_thursday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_friday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_friday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Thursday.definition))),\n    definitions_friday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_friday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_saturday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_saturday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Friday.definition))),\n    definitions_saturday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_saturday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sunday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sunday'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Saturday.definition))),\n    definitions_sunday: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sunday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.weekdays.Sunday.definition))),\n\n    /* ==================================================================== DEFINITIONS OCCUPATIONS =================================================================================*/\n    definitions_occupations_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_occupations_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_doctor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_doctor'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.teacher.definition))),\n    definitions_doctor: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_doctor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_builder'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_builder'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.doctor.definition))),\n    definitions_builder: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_builder',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_lifeguard'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_lifeguard'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.builder.definition))),\n    definitions_lifeguard: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_lifeguard',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_actor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_actor'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.lifeguard.definition))),\n    definitions_actor: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_actor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_engineer'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_engineer'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.actor.definition))),\n    definitions_engineer: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_engineer',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_garbage_man'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_garbage_man'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.engineer.definition))),\n    definitions_garbage_man: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_garbage_man',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.occupation.garbage_man.definition))),\n\n    /* ==================================================================== DEFINITIONS COLOURS =================================================================================*/\n    definitions_colours_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_colours_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yellow\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_red'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_red'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.yellow.definition))),\n    definitions_red: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_red',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"red\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_purple'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_purple'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.red.definition))),\n    definitions_purple: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_purple',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"purple\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_brown'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_brown'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.purple.definition))),\n    definitions_brown: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_brown',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"brown\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_black'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_black'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.brown.definition))),\n    definitions_black: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_black',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"black\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_white'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_white'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.black.definition))),\n    definitions_white: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_white',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"white\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_green'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_green'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.white.definition))),\n    definitions_green: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_green',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"green\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.colours.green.definition))),\n\n    /* ==================================================================== DEFINITIONS VERBS =================================================================================*/\n    definitions_verbs_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_verbs_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"go\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_run'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_run'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.go.definition))),\n    definitions_run: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_run',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"run\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_eat'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_eat'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.run.definition))),\n    definitions_eat: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_eat',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"eat\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sleep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sleep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.eat.definition))),\n    definitions_sleep: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sleep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sleep\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_write'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_write'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.sleep.definition))),\n    definitions_write: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_write',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"write\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sing'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sing'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.write.definition))),\n    definitions_sing: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sing',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sing\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_drink'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_drink'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.sing.definition))),\n    definitions_drink: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_drink',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"drink\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.verbs.drink.definition))),\n\n    /* ===================================================== DEFINITIONS FAMILY ===================================================================================================*/\n    definitions_family_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_family_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_brother'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_brother'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.cousin.definition))),\n    definitions_brother: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_brother',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sister'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sister'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.brother.definition))),\n    definitions_sister: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sister',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_mum'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_mum'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.sister.definition))),\n    definitions_mum: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_mum',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_dad'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_dad'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.mum.definition))),\n    definitions_dad: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_dad',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_grandma_1'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_grandma_1'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.dad.definition))),\n    definitions_grandma_1: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_grandma_1',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_grandma_2'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_grandma_2'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.grandma_1.definition))),\n    definitions_grandma_2: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_grandma_2',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.family.grandma_2.definition))),\n\n    /* ===================================================== DEFINITIONS GEOGRAPHICAL  ===================================================================================================*/\n    definitions_geographical_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_geographical_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_mountain'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_mountain'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.river.definition))),\n    definitions_mountain: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_mountain',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sea'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sea'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.mountain.definition))),\n    definitions_sea: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sea',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_forest'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_forest'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.sea.definition))),\n    definitions_forest: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_forest',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_lake'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_lake'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.forest.definition))),\n    definitions_lake: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_lake',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_cliff'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_cliff'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.lake.definition))),\n    definitions_cliff: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_cliff',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_cave'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_cave'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.cliff.definition))),\n    definitions_cave: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_cave',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.geographical.cave.definition))),\n\n    /* ==================================================================== DEFINITIONS SUMMARY =================================================================================*/\n    definitions_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#definitions'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"Well done! Your current score is \".concat(context.score, \". Would you like to play Definitions again, or try some other game?\")\n    })))),\n    pictures: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))),\n    pictures_invocation: {\n      initial: 'prompt',\n      id: 'pictures_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#pictures_choice'))\n      }\n    },\n    pictures_choice: {\n      initial: 'prompt',\n      id: 'pictures_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'pictures_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures_again'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Weekdays',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Occupation',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Colours',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Verbs',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Family',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          cond: context => context.intentResult === 'Geographical',\n          actions: assign(context => {\n            return {\n              game_category: context.recResult\n            };\n          }),\n          target: 'pictures_pregame'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    pictures_again: _objectSpread({\n      id: 'pictures_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))),\n    pictures_help: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'pictures_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change another game.\"))),\n    pictures_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))),\n    pictures_pregame: {\n      initial: 'prompt',\n      id: 'pictures_pregame',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: cat\n            };\n          })],\n          target: \"#pictures_animals_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: Monday\n            };\n          })],\n          target: \"#pictures_weekdays_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: teacher\n            };\n          })],\n          target: \"#pictures_occupations_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: yellow\n            };\n          })],\n          target: \"#pictures_colours_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: go\n            };\n          })],\n          target: \"#pictures_verbs_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: cousin\n            };\n          })],\n          target: \"#pictures_family_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: river\n            };\n          })],\n          target: \"#pictures_geographical_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n          })),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n\n    /* ===================================================== PICTURES ANIMALS ===================================================================================================*/\n    pictures_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: dog,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: dog\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          }), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_dog'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_dog'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_fox'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_fox'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_sheep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sheep'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_giraffe'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_giraffe'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_crocodile'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_crocodile'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_peacock'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_peacock'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ==================================================================== PICTURES WEEKDAYS =================================================================================*/\n    pictures_weekdays_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_weekdays_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Monday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Tuesday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Tuesday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_tuesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_tuesday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_tuesday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_tuesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Wednesday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Wednesday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_wednesday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_wednesday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_wednesday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_wednesday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Thursday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Thursday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_thursday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_thursday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_thursday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_thursday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Friday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Friday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_friday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_friday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_friday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_friday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Saturday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Saturday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_saturday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_saturday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_saturday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_saturday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Sunday,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Sunday\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sunday'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sunday'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sunday: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sunday',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ==================================================================== PICTURES OCCUPATIONS =================================================================================*/\n    pictures_occupations_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_occupations_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: doctor,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"teacher\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), assign(context => {\n            return {\n              picture: doctor\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_doctor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_doctor'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_doctor: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_doctor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: builder,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"doctor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: builder\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_builder'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_builder'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_builder: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_builder',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: lifeguard,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"builder\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: lifeguard\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_lifeguard'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_lifeguard'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_lifeguard: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_lifeguard',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: actor,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: actor\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_actor'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_actor'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_actor: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_actor',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: engineer,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"actor\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: engineer\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_engineer'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_engineer'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_engineer: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_engineer',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: garbage_man,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"engineer\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: garbage_man\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_garbage_man'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_garbage_man'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_garbage_man: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_garbage_man',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ==================================================================== PICTURES COLOURS =================================================================================*/\n    pictures_colours_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_colours_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"yellow\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: red,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: red\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_red'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_red'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_red: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_red',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"red\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: purple,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: purple\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_purple'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_purple'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_purple: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_purple',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"purple\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: brown,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: brown\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_brown'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_brown'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_brown: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_brown',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"brown\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: black,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: black\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_black'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_black'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_black: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_black',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"black\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: white,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: white\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_white'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_white'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_white: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_white',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"white\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: green,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: green\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_green'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_green'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_green: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_green',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"green\" in (coloursGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ==================================================================== PICTURES VERBS =================================================================================*/\n    pictures_verbs_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_verbs_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"go\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: run,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: run\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_run'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_run'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_run: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_run',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"run\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: eat,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: eat\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_eat'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_eat'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_eat: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_eat',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"eat\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sleep,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sleep\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sleep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sleep'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sleep: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sleep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sleep\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: write,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: write\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_write'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_write'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_write: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_write',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"write\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sing,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sing\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sing'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sing'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sing: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sing',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sing\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: drink,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: drink\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_drink'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_drink'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_drink: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_drink',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"drink\" in (verbsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ===================================================== PICTURES FAMILY ===================================================================================================*/\n    pictures_family_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_family_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: brother,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cousin\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: brother\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_brother'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_brother'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_brother: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_brother',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sister,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"brother\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sister\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sister'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sister'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sister: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sister',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: mum,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sister\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: mum\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_mum'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_mum'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_mum: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_mum',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: dad,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mum\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: dad\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_dad'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_dad'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_dad: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_dad',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: grandma_1,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dad\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: grandma_1\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_grandma_1'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_grandma_1'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_grandma_1: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_grandma_1',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: grandma_2,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_1\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: grandma_2\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_grandma_2'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_grandma_2'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_grandma_2: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_grandma_2',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"grandma_2\" in (familyGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n\n    /* ===================================================== PICTURES GEOGRAPHICAL  ===================================================================================================*/\n    pictures_geographical_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_geographical_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: mountain,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"river\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: mountain\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_mountain'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_mountain'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_mountain: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_mountain',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sea,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"mountain\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: sea\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sea'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_sea'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sea: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sea',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: forest,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sea\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: forest\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_forest'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_forest'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_forest: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_forest',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: lake,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"forest\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: lake\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_lake'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_lake'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_lake: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_lake',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: cliff,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"lake\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: cliff\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_cliff'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_cliff'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_cliff: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_cliff',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: cave,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cliff\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: cave\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_cave'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_cave'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_cave: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_cave',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background,\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cave\" in (geographicalGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.prompt'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#pictures'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"Well done! Your current score is \".concat(context.score, \". Would you like to guess pictures again, or try some other game?\")\n    })))),\n    quit_game: {\n      initial: 'prompt',\n      id: 'quit_game',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Exiting current game.')\n        }\n      }\n    },\n    exit_app: {\n      id: 'exit_app',\n      on: {\n        ENDSPEECH: '#idle'\n      },\n      entry: say('Thank you for playing and have a nice day!')\n    }\n  }\n};\nimport Background from \"./Pictures_game/Background.jpg\";\nimport cat from \"./Pictures_game/cat.jpg\";\nimport dog from \"./Pictures_game/dog.jpeg\";\nimport fox from \"./Pictures_game/fox.jpg\";\nimport sheep from \"./Pictures_game/sheep.jpg\";\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\nimport peacock from \"./Pictures_game/peacock.jpg\";\nimport Monday from \"./Pictures_game/Monday.jpg\";\nimport Tuesday from \"./Pictures_game/Tuesday.jpg\";\nimport Wednesday from \"./Pictures_game/Wednesday.jpeg\";\nimport Thursday from \"./Pictures_game/Thursday.jpg\";\nimport Friday from \"./Pictures_game/Friday.jpg\";\nimport Saturday from \"./Pictures_game/Saturday.jpg\";\nimport Sunday from \"./Pictures_game/Sunday.jpg\";\nimport teacher from \"./Pictures_game/Teacher.jpeg\";\nimport doctor from \"./Pictures_game/Doctor.png\";\nimport builder from \"./Pictures_game/Builder.jpg\";\nimport lifeguard from \"./Pictures_game/Lifeguard.jpg\";\nimport actor from \"./Pictures_game/Actor.jpg\";\nimport engineer from \"./Pictures_game/Engineer.png\";\nimport garbage_man from \"./Pictures_game/Garbage_man.jpeg\";\nimport yellow from \"./Pictures_game/yellow.jpg\";\nimport red from \"./Pictures_game/red.jpg\";\nimport purple from \"./Pictures_game/purple.png\";\nimport brown from \"./Pictures_game/brown.jpg\";\nimport black from \"./Pictures_game/black.jpg\";\nimport white from \"./Pictures_game/white.jpg\";\nimport green from \"./Pictures_game/green.jpg\";\nimport go from \"./Pictures_game/go.png\";\nimport run from \"./Pictures_game/run.jpg\";\nimport eat from \"./Pictures_game/eat.jpg\";\nimport sleep from \"./Pictures_game/sleep.jpg\";\nimport write from \"./Pictures_game/write.jpg\";\nimport sing from \"./Pictures_game/sing.jpg\";\nimport drink from \"./Pictures_game/drink.jpg\";\nimport cousin from \"./Pictures_game/cousin.jpg\";\nimport brother from \"./Pictures_game/brother.jpeg\";\nimport sister from \"./Pictures_game/sister.jpg\";\nimport mum from \"./Pictures_game/mother.jpg\";\nimport dad from \"./Pictures_game/dad.jpg\";\nimport grandma_1 from \"./Pictures_game/grandma_1.jpg\";\nimport grandma_2 from \"./Pictures_game/grandma_2.jpg\";\nimport river from \"./Pictures_game/river.png\";\nimport mountain from \"./Pictures_game/mountain.jpg\";\nimport sea from \"./Pictures_game/sea.jpg\";\nimport forest from \"./Pictures_game/forest.jpg\";\nimport lake from \"./Pictures_game/lake.jpg\";\nimport cliff from \"./Pictures_game/cliff.jpg\";\nimport cave from \"./Pictures_game/cave.jpg\";\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Say_play\");\n$RefreshReg$(_c2, \"Show_play\");","map":{"version":3,"sources":["C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/src/dmSwenglish.ts"],"names":["send","assign","actions","game_vocab","gameGrammar","animalsGrammar","weekdaysGrammar","occupationsGrammar","familyGrammar","verbsGrammar","coloursGrammar","geographicalGrammar","promptReset","context","count","scoreReset","score","say","text","_context","type","value","listen","cancel","invoke_rasa","go_to_state","invoke","id","src","event","nluRequest","task","onDone","target","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","reprompt0","reprompt1","reprompt2","Say_play","say_word","delay","almost","match","reprompt","go_to_next","skip_to_next","Show_play","show","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","dmMachine","start_point","CLICK","welcome","which_game","RECOGNISED","recResult","choice","tool","pick_game","general_help","wordplay","wordplay_invocation","wordplay_choice","game_category","wordplay_again","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_animals_begin","NEXT_STATE","SKIP_STATE","animals","cat","english","wordplay_dog","dog","wordplay_fox","fox","wordplay_sheep","sheep","wordplay_giraffe","giraffe","wordplay_crocodile","crocodile","wordplay_peacock","peacock","wordplay_weekdays_begin","weekdays","Monday","wordplay_tuesday","Tuesday","wordplay_wednesday","Wednesday","wordplay_thursday","Thursday","wordplay_friday","Friday","wordplay_saturday","Saturday","wordplay_sunday","Sunday","wordplay_occupations_begin","occupation","teacher","wordplay_doctor","doctor","wordplay_builder","builder","wordplay_lifeguard","lifeguard","wordplay_actor","actor","wordplay_engineer","engineer","wordplay_garbage_man","garbage_man","wordplay_colours_begin","colours","yellow","wordplay_red","red","wordplay_purple","purple","wordplay_brown","brown","wordplay_black","black","wordplay_white","white","wordplay_green","green","wordplay_verbs_begin","verbs","go","wordplay_run","run","wordplay_eat","eat","wordplay_sleep","sleep","wordplay_write","write","wordplay_sing","sing","wordplay_drink","drink","wordplay_family_begin","family","cousin","wordplay_brother","brother","wordplay_sister","sister","wordplay_mum","mum","wordplay_dad","dad","wordplay_grandma_1","grandma_1","wordplay_grandma_2","grandma_2","wordplay_geographical_begin","geographical","river","wordplay_mountain","mountain","wordplay_sea","sea","wordplay_forest","forest","wordplay_lake","lake","wordplay_cliff","cliff","wordplay_cave","cave","wordplay_summary","definitions","definitions_invocation","definitions_choice","definitions_again","definitions_help","definitions_quit","definitions_pregame","definitions_animals_begin","definition","definitions_dog","definitions_fox","definitions_sheep","definitions_giraffe","definitions_crocodile","definitions_peacock","definitions_weekdays_begin","definitions_tuesday","definitions_wednesday","definitions_thursday","definitions_friday","definitions_saturday","definitions_sunday","definitions_occupations_begin","definitions_doctor","definitions_builder","definitions_lifeguard","definitions_actor","definitions_engineer","definitions_garbage_man","definitions_colours_begin","definitions_red","definitions_purple","definitions_brown","definitions_black","definitions_white","definitions_green","definitions_verbs_begin","definitions_run","definitions_eat","definitions_sleep","definitions_write","definitions_sing","definitions_drink","definitions_family_begin","definitions_brother","definitions_sister","definitions_mum","definitions_dad","definitions_grandma_1","definitions_grandma_2","definitions_geographical_begin","definitions_mountain","definitions_sea","definitions_forest","definitions_lake","definitions_cliff","definitions_cave","definitions_summary","pictures","pictures_invocation","pictures_choice","pictures_again","pictures_help","pictures_quit","pictures_pregame","picture","pictures_animals_begin","Background","SHOW","pictures_dog","pictures_fox","pictures_sheep","pictures_giraffe","pictures_crocodile","pictures_peacock","pictures_weekdays_begin","pictures_tuesday","pictures_wednesday","pictures_thursday","pictures_friday","pictures_saturday","pictures_sunday","pictures_occupations_begin","pictures_doctor","pictures_builder","pictures_lifeguard","pictures_actor","pictures_engineer","pictures_garbage_man","pictures_colours_begin","pictures_red","pictures_purple","pictures_brown","pictures_black","pictures_white","pictures_green","pictures_verbs_begin","pictures_run","pictures_eat","pictures_sleep","pictures_write","pictures_sing","pictures_drink","pictures_family_begin","pictures_brother","pictures_sister","pictures_mum","pictures_dad","pictures_grandma_1","pictures_grandma_2","pictures_geographical_begin","pictures_mountain","pictures_sea","pictures_forest","pictures_lake","pictures_cliff","pictures_cave","pictures_summary","quit_game","exit_app"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport {game_vocab} from \"./definitions_and_words\"\nimport {gameGrammar, animalsGrammar, weekdaysGrammar, occupationsGrammar, familyGrammar, verbsGrammar, coloursGrammar, geographicalGrammar} from \"./grammars/vocabGrammar\"\n\nconst promptReset: Action<SDSContext, SDSEvent> = assign((context) => { return { count:0} })\nconst scoreReset: Action<SDSContext, SDSEvent> = assign((context) => { return { score:0} })\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n \nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst {cancel} = actions\n\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n            invoke: {\n                id: 'rasaApi',\n                src: (context, event) =>  nluRequest(context.task),\n                onDone:{\n                    target: go_to_state,\n                    actions:[\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\n                        (context:SDSContext, event:any) => console.log(event.data)]\n                },\n                onError:{\n                    target: '#welcome',\n                    actions: (context, event) => console.log(event.data)\n}}})}\n\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: [promptReset, say_this],\n                on: { ENDSPEECH: 'ask'}},\n            ask: {\n                entry: [send('LISTEN'), /*send ('TIMEOUT', {delay: 30000, id: 'timer'})*/]\n            },\n            nomatch: {\n                entry: say('Sorry, please repeat.'),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            timeout_final: {\n                entry: say('Returning to idle.'),\n                on: {ENDSPEECH: \"idle\"}\n            },\n            idle:{\n                id: 'idle',\n                type: 'final'\n            },\n            timeout: {\n                initial: 'prompt',\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\n                                {cond: (context) => context.count ===4, target: 'timeout_final'}]},\n                states:{\n                    prompt: {\n                        entry: send('TIMEOUT')\n                    }\n                }\n            },\n            reprompt0: {\n                entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n                on: {ENDSPEECH: 'ask'}\n            },\n            reprompt1: {\n                entry: say('Sorry, still nothing.'),\n                on: {ENDSPEECH: 'ask'}\n            },\n            reprompt2: {\n                entry: say(':et us give it one last try'),\n                on: {ENDSPEECH: 'ask'}\n}}})}\n\n\nfunction Say_play(say_word: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: [promptReset, say_word],\n                on: {ENDSPEECH: 'ask'}},\n            ask: {\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 30000, id:'timer2'})]\n            },\n            nomatch: {\n                entry: say(\"I'm afraid not! Try again!\"),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            idle:{\n                type: 'final'\n            },\n            timeout: {\n                initial: 'prompt',\n                on: {TIMEOUT: [{target: 'reprompt'}]},\n                states:{\n                    prompt: {\n                        entry: send('TIMEOUT')\n                    }\n                }\n            },\n            almost:{\n                entry: say(\"Right! But what is the correct article?\"),\n                on:{ENDSPEECH: 'ask'}\n            },\n            match: {\n                entry: say('Correct!'),\n                on: {ENDSPEECH:'go_to_next'}\n            },\n            reprompt:{\n                entry: say('Time is running out!')\n\n            },\n            go_to_next:{\n                entry: send('NEXT_STATE')\n            },\n            skip_to_next:{\n                entry: send('SKIP_STATE')\n            },\n}})}\n\nfunction Show_play(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: send('SHOW')},\n            show:{\n                entry: say(' '),\n                on:{\n                    ENDSPEECH: 'ask'\n                }\n            },\n            ask: { entry: listen()\n            },\n            nomatch: {\n                entry: say(\"I'm afraid not! Try again!\"),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            idle:{\n                type: 'final'\n            },\n            reprompt: {\n                entry: [say(\"Time is up three!\")],\n                on: {ENDSPEECH: 'go_to_next'}\n            },\n            almost:{\n                entry: say(\"Right! But what is the correct article?\"),\n                on:{ENDSPEECH: 'ask'}\n            },\n            match: {\n                entry: say('Correct!'),\n                on: {ENDSPEECH:'go_to_next'}\n            },\n            go_to_next:{\n                entry: send('NEXT_STATE')\n            },\n            skip_to_next:{\n                entry: send('SKIP_STATE')\n            },\n}})}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json()); \n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'start_point',\n    states: {\n        start_point:{\n            id: 'starting_poing',\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            id: 'welcome',\n            initial: 'prompt',\n            on: {ENDSPEECH:'which_game'},\n            states:{\n                prompt:{\n                    entry: [scoreReset, say('Welcome to Sweenglish!')]}\n            }\n        },\n        which_game:{\n            initial: 'prompt',\n            id: 'which_game',\n            on: {\n                RECOGNISED:[{\n                    actions: assign((context) => { return { task: context.recResult } }),\n                    target: 'choice'}]},\n            \n            states:{\n                prompt: {\n                    entry: say('Which game would you like to play?'),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                ask:{ entry: listen()\n                }\n            }},\n\n        choice:{\n            initial: 'prompt',\n            states:{\n                prompt: { ...invoke_rasa('#tool')}\n            }\n        },\n        tool:{\n            initial: 'prompt',\n            id: 'tool',\n            on:{\n                ENDSPEECH:[{\n                    cond: (context) => context.intentResult === 'Definitions',\n                    target: '#definitions'},\n                    {cond: (context) => context.intentResult === 'Words',\n                    target: '#wordplay'},\n                    {cond: (context) => context.intentResult === 'Pictures',\n                    target: '#pictures'},\n                    {cond: (context) => context.intentResult === 'Quit',\n                    target: '#exit_app'},\n                    {cond: (context) => context.intentResult === 'Help',\n                    target: '#general_help'},\n                    {cond: (context) => context.intentResult === 'Animals' || context.intentResult === 'Weekdays' || context.intentResult === 'Family' || context.intentResult === 'Occupation' \n                    || context.intentResult === 'Colours' || context.intentResult === 'Verbs' || context.intentResult === 'Family' || context.intentResult === 'Geographical',\n                    target: '.pick_game'},\n                {target:'.nomatch'}]\n            },\n            states: {\n                prompt: {\n                    entry: send('ENDSPEECH')},\n                nomatch: {\n                    entry: say(\"Sadly such game is not yet implemented. Let us try again.\"),\n                    on: {ENDSPEECH: '#which_game'}\n                    },\n                pick_game:{\n                    entry: say(\"Great choice, but you have to choose a game mode first. Please try again\"),\n                    on: {ENDSPEECH: '#which_game'}}}\n        },\n        general_help:{\n            initial: 'prompt',\n            id: 'general_help',\n            on: {ENDSPEECH: '#which_game'},\n            states: {\n                prompt: {entry: say(' Swenglish has three games: wordplay, definitions, and picturs. In Wordplay, you will be given a word in English and will have to come up,\\\n                 with its correspondence in Swedish. In definitions, you will be given definitions and will have to say the corresponding word in Swedish. In pictures, you will\\\n                be shown a picture and will have to name what you see in Swedish.')}\n        }},\n        wordplay: {\n            initial: 'prompt',\n            id: 'wordplay',\n            on: {\n                RECOGNISED:[{\n                    actions: [assign((context) => { return { task: context.recResult} }), cancel('timer'), cancel('timer2')],\n                    target: '#wordplay_invocation'}],\n                    TIMEOUT: '.timeout'\n            },\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))\n\n        },\n            wordplay_invocation:{\n                initial: 'prompt',\n                id: 'wordplay_invocation',\n                states:{\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\n                }\n            },\n            wordplay_choice:{\n                initial: 'prompt',\n                id: 'wordplay_choice',\n                on:{\n                    ENDSPEECH:[{\n                        cond: (context) => context.intentResult === 'Help',\n                        target: 'wordplay_help'},\n                        {cond: (context) => context.intentResult === 'Quit',\n                        target: '#quit_game'},\n                        {cond: (context) => context.intentResult === 'Definitions',\n                        target: '#definitions'},\n                        {cond: (context) => context.intentResult === 'Wordplay',\n                        target: 'wordplay_again'},\n                        {cond: (context) => context.intentResult === 'Pictures',\n                        target: '#pictures'},\n                        {cond: (context) => context.intentResult === 'Animals',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Weekdays',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Occupation',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Colours',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Verbs',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Family',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Geographical',\n                        actions: assign((context) => { return { game_category: context.recResult} }),\n                        target: 'wordplay_pregame'},\n  \n                    {target:'.nomatch'}]\n                },\n                states: {\n                    prompt: {\n                        entry: send('ENDSPEECH')},\n                    nomatch: {\n                        entry: say(\"Unavailable right now.\"),\n                        on: {ENDSPEECH: '#welcome'}\n                            \n                        }\n                            \n                    }\n    \n            },\n            wordplay_again:{\n                id: 'wordplay_again',\n                on:{ENDSPEECH:[{\n                    actions: assign((context) => { return { task: context.recResult } }),\n                    target: '#wordplay_invocation'}],\n                    TIMEOUT: '.timeout' },\n                ...sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))\n\n            },\n            wordplay_help:{\n                initial: 'prompt',\n                id: 'wordplay_help',\n                on: {\n                    RECOGNISED:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: 'wordplay_invocation'},\n                    \n                    {target: \".nomatch\"}]\n                },\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                        Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change the game.\"))\n            },\n            wordplay_quit:{\n                initial: 'prompt',\n                id: 'wordplay_quit',\n                on: {ENDSPEECH: '#which_game'},\n               ...sayAskTimeout(say(\"Quitting Wordplay.\"))\n            },\n            wordplay_pregame:{\n                initial: 'prompt',\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n                        target: \"#wordplay_animals_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n                        target: \"#wordplay_weekdays_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n                        target: \"#wordplay_occupations_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n                        target: \"#wordplay_colours_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n                        target: \"#wordplay_verbs_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n                        target: \"#wordplay_family_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n                        target: \"#wordplay_geographical_begin\"},\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                        target: \"#quit_game\"},\n                    { target: \".nomatch\" }],\n                    ENDSPEECH: '.ask'\n                },\n                states: {\n                    prompt:\n                    {entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `You have chosen ${context.game_category}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`}))},\n                    nomatch:{\n                        entry: say('Sorry, I did not quite catch that. Please repeat'),\n                        on: {ENDSPEECH: 'ask'},\n                    },\n                    ask: {\n                        entry: listen()\n                    }}},\n\n\n/* ===================================================== WORDPLAY ANIMALS ===================================================================================================*/\n            wordplay_animals_begin:{\n                initial: 'prompt',\n                id: 'wordplay_animals_begin',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                    {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                     actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\n                        TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.cat.english))\n        },\n        wordplay_dog:{\n            initial: 'prompt',\n            id: 'wordplay_dog',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.dog.english))\n        },\n        wordplay_fox:{\n            initial: 'prompt',\n            id: 'wordplay_fox',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.fox.english))\n            },    \n        wordplay_sheep:{\n            initial: 'prompt',\n            id: 'wordplay_sheep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target:  '#wordplay_giraffe'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_giraffe'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.sheep.english))\n        },          \n        wordplay_giraffe:{\n            initial: 'prompt',\n            id: 'wordplay_giraffe',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: cancel('timer2'),  target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.giraffe.english))\n        },   \n        wordplay_crocodile:{\n            initial: 'prompt',\n            id: 'wordplay_crocodile',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.crocodile.english))\n        },      \n        wordplay_peacock:{\n            initial: 'prompt',\n            id: 'wordplay_peacock',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.peacock.english))\n        },\n/* ==================================================================== WORDPLAY WEEKDAYS =================================================================================*/\n        wordplay_weekdays_begin:{\n            initial: 'prompt',\n            id: 'wordplay_weekdays_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Monday\" in (weekdaysGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_tuesday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_tuesday'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Monday.english))},\n        \n        wordplay_tuesday:{\n            initial: 'prompt',\n            id: 'wordplay_tuesday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_wednesday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_wednesday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Tuesday.english))\n        },\n\n        wordplay_wednesday:{\n            initial: 'prompt',\n            id: 'wordplay_wednesday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_thursday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_thursday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Wednesday.english))\n        },\n\n        wordplay_thursday:{\n            initial: 'prompt',\n            id: 'wordplay_thursday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_friday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_friday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Thursday.english))\n        },\n\n        wordplay_friday:{\n            initial: 'prompt',\n            id: 'wordplay_friday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_saturday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_saturday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Friday.english))\n        },\n\n        wordplay_saturday:{\n            initial: 'prompt',\n            id: 'wordplay_saturday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sunday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sunday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Saturday.english))\n        },\n\n        wordplay_sunday:{\n            initial: 'prompt',\n            id: 'wordplay_sunday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Sunday.english))\n        },\n\n/* ==================================================================== WORDPLAY OCCUPATIONS =================================================================================*/\n        wordplay_occupations_begin:{\n            initial: 'prompt',\n            id: 'wordplay_occupations_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_doctor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_doctor'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.teacher.english))},\n\n        wordplay_doctor:{\n            initial: 'prompt',\n            id: 'wordplay_doctor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_builder'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_builder'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.doctor.english))},\n\n        wordplay_builder:{\n            initial: 'prompt',\n            id: 'wordplay_builder',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_lifeguard'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_lifeguard'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.builder.english))},\n\n        wordplay_lifeguard:{\n            initial: 'prompt',\n            id: 'wordplay_lifeguard',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_actor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_actor'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.lifeguard.english))},\n\n        wordplay_actor:{\n            initial: 'prompt',\n            id: 'wordplay_actor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_engineer'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_engineer'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.actor.english))},\n\n        wordplay_engineer:{\n            initial: 'prompt',\n            id: 'wordplay_engineer',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_garbage_man'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_garbage_man'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.engineer.english))},\n\n        wordplay_garbage_man:{\n            initial: 'prompt',\n            id: 'wordplay_garbage_man',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.garbage_man.english))},\n\n/* ==================================================================== WORDPLAY COLOURS =================================================================================*/\n        wordplay_colours_begin:{\n            initial: 'prompt',\n            id: 'wordplay_colours_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"yellow\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_red'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_red'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.yellow.english))},\n\n        wordplay_red:{\n            initial: 'prompt',\n            id: 'wordplay_red',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"red\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_purple'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_purple'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.red.english))},\n\n        wordplay_purple:{\n            initial: 'prompt',\n            id: 'wordplay_purple',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"purple\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_brown'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_brown'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.purple.english))},\n\n        wordplay_brown:{\n            initial: 'prompt',\n            id: 'wordplay_brown',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"brown\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_black'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_black'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.brown.english))},\n\n        wordplay_black:{\n            initial: 'prompt',\n            id: 'wordplay_black',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"black\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_white'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_white'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.black.english))},\n\n        wordplay_white:{\n            initial: 'prompt',\n            id: 'wordplay_white',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"white\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_green'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_green'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.white.english))},\n\n        wordplay_green:{\n            initial: 'prompt',\n            id: 'wordplay_green',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"green\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.green.english))},\n\n        /* ==================================================================== WORDPLAY VERBS =================================================================================*/\n        wordplay_verbs_begin:{\n            initial: 'prompt',\n            id: 'wordplay_verbs_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"go\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_run'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_run'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.go.english))},\n\n        wordplay_run:{\n            initial: 'prompt',\n            id: 'wordplay_run',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"run\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_eat'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_eat'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.run.english))},\n\n        wordplay_eat:{\n            initial: 'prompt',\n            id: 'wordplay_eat',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"eat\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sleep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sleep'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.eat.english))},\n\n        wordplay_sleep:{\n            initial: 'prompt',\n            id: 'wordplay_sleep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sleep\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_write'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_write'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.sleep.english))},\n\n        wordplay_write:{\n            initial: 'prompt',\n            id: 'wordplay_write',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"write\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sing'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sing'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.write.english))},\n\n        wordplay_sing:{\n            initial: 'prompt',\n            id: 'wordplay_sing',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sing\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_drink'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_drink'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.sing.english))},\n\n        wordplay_drink:{\n            initial: 'prompt',\n            id: 'wordplay_drink',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"drink\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.drink.english))},\n\n        /* ===================================================== WORDPLAY FAMILY ===================================================================================================*/\n        wordplay_family_begin:{\n            initial: 'prompt',\n            id: 'wordplay_family_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_brother'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_brother'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.cousin.english))},\n\n        wordplay_brother:{\n            initial: 'prompt',\n            id: 'wordplay_brother',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sister'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sister'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.brother.english))},\n\n        wordplay_sister:{\n            initial: 'prompt',\n            id: 'wordplay_sister',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_mum'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_mum'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.sister.english))},\n\n        wordplay_mum:{\n            initial: 'prompt',\n            id: 'wordplay_mum',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_dad'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_dad'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.mum.english))},\n\n        wordplay_dad:{\n            initial: 'prompt',\n            id: 'wordplay_dad',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_grandma_1'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_grandma_1'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.dad.english))},\n\n        wordplay_grandma_1:{\n            initial: 'prompt',\n            id: 'wordplay_grandma_1',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_grandma_2'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_grandma_2'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.grandma_1.english))},\n\n        wordplay_grandma_2:{\n            initial: 'prompt',\n            id: 'wordplay_grandma_2',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.grandma_2.english))},\n\n        /* ===================================================== WORDPLAY GEOGRAPHICAL  ===================================================================================================*/\n        wordplay_geographical_begin:{\n            initial: 'prompt',\n            id: 'wordplay_geographical_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_mountain'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_mountain'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.river.english))},\n\n        wordplay_mountain:{\n            initial: 'prompt',\n            id: 'wordplay_mountain',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sea'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sea'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.mountain.english))},\n\n        wordplay_sea:{\n            initial: 'prompt',\n            id: 'wordplay_sea',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_forest'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_forest'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.sea.english))},\n\n        wordplay_forest:{\n            initial: 'prompt',\n            id: 'wordplay_forest',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_lake'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_lake'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.forest.english))},\n\n        wordplay_lake:{\n            initial: 'prompt',\n            id: 'wordplay_lake',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_cliff'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_cliff'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.lake.english))},\n\n        wordplay_cliff:{\n            initial: 'prompt',\n            id: 'wordplay_cliff',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_cave'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_cave'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.cliff.english))},\n\n        wordplay_cave:{\n            initial: 'prompt',\n            id: 'wordplay_cave',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.cave.english))},\n    /* ==================================================================== WORDPLAY SUMMARY =================================================================================*/\n\n                            wordplay_summary:{\n                                initial: 'prompt',\n                                id: 'wordplay_summary',\n                                on: {RECOGNISED:[\n                                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                    actions: [cancel('timer2'), cancel('timer')], target:'#wordplay' },\n                                    {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                    actions: [cancel('timer2'), cancel('timer')], target:'#which_game' },\n                                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                    actions: [cancel('timer2'), cancel('timer')],  target:'#exit_app' }, \n                                    {target:'.nomatch'}]},\n                               ...sayAskTimeout(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Well done! Your current score is ${context.score}. Would you like to play Wordplay again, or try some other game?`})))\n\n\n            },\n            definitions: {\n                initial: 'prompt',\n                id: 'definitions',\n                on: {\n                    RECOGNISED:[{\n                        actions: [assign((context) => { return { task: context.recResult } }), cancel('timer'), cancel('timer2')],\n                        target: '#definitions_invocation'}],\n                        TIMEOUT: '.timeout'\n                },\n                        ...sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))\n    \n            },\n                definitions_invocation:{\n                    initial: 'prompt',\n                    id: 'definitions_invocation',\n                    states:{\n                        prompt: { ...invoke_rasa('#definitions_choice')}\n                    }\n                },\n                definitions_choice:{\n                    initial: 'prompt',\n                    id: 'definitions_choice',\n                    on:{\n                        ENDSPEECH:[{\n                            cond: (context) => context.intentResult === 'Help',\n                            target: 'definitions_help'},\n                            {cond: (context) => context.intentResult === 'Quit',\n                            target: '#quit_game'},\n                            {cond: (context) => context.intentResult === 'Definitions',\n                            target: '#definitions_again'},\n                            {cond: (context) => context.intentResult === 'Wordplay',\n                            target: 'wordplay'},\n                            {cond: (context) => context.intentResult === 'Animals',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Weekdays',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Occupation',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Colours',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Verbs',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Family',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n                            {cond: (context) => context.intentResult === 'Geographical',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'definitions_pregame'},\n      \n                        {target:'.nomatch'}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send('ENDSPEECH')},\n                        nomatch: {\n                            entry: say(\"Unavailable right now.\"),\n                            on: {ENDSPEECH: '#welcome'}\n                                \n                            }\n                                \n                        }\n        \n                },\n                definitions_again:{\n                    id: 'definitions_again',\n                    on:{ENDSPEECH:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#definitions_invocation'}],\n                        TIMEOUT: '.timeout' },\n                    ...sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))\n    \n                },\n                definitions_help:{\n                    initial: 'prompt',\n                    id: 'definitions_help',\n                    on: {\n                        RECOGNISED:[{\n                            actions: assign((context) => { return { task: context.recResult } }),\n                            target: 'definitions_invocation'},\n                        \n                        {target: \".nomatch\"}]\n                    },\n                            ...sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a\\\n                             corresponding word in Swedish. You can choose from seven categories: Animals, Weekdays, Occupations, Colours, Verbs,\\\n                            Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick\\\n                             a category or change to another game.\"))\n                },\n                definitions_quit:{\n                    initial: 'prompt',\n                    id: 'definitions_quit',\n                    on: {ENDSPEECH: '#welcome'},\n                   ...sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))\n                },\n                definitions_pregame:{\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n                            target: \"#definitions_animals_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n                            target: \"#definitions_weekdays_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n                            target: \"#definitions_occupations_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n                            target: \"#definitions_colours_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n                            target: \"#definitions_verbs_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n                            target: \"#definitions_family_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n                            target: \"#definitions_geographical_begin\"},\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                            target: \"#quit_game\"},\n                        { target: \".nomatch\" }],\n                        ENDSPEECH: '.ask'\n                    },\n                    states: {\n                        prompt:\n                            {entry: send((context) => ({\n                                    type: \"SPEAK\",\n                             value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.`})),\n                              on: {ENDSPEECH: 'ask'}},\n                        nomatch:{\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\n                            on: {ENDSPEECH: 'ask'},\n                        },\n                        ask: {\n                            entry: listen()\n                }}},\n\n/*=========================================================================DEFINITIONS ANIMALS===============================================================================================*/                \n\n            definitions_animals_begin:{\n            initial: 'prompt',\n            id: 'definitions_animals_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')],  target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\n                    NEXT_STATE: {actions: [cancel('timer2'), cancel('timer')], target: '#definitions_dog'},\n                    SKIP_STATE: {actions: [cancel('timer2'), cancel('timer')], target: '#definitions_dog'},\n                    TIMEOUT: {actions: [cancel('timer2'), cancel('timer')], target:'.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.cat.definition))},\n\n            definitions_dog:{\n            initial: 'prompt',\n            id: 'definitions_dog',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_fox'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_fox'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.dog.definition))\n        },\n        definitions_fox:{\n            initial: 'prompt',\n            id: 'definitions_fox',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sheep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sheep'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.fox.definition))\n            },    \n        definitions_sheep:{\n            initial: 'prompt',\n            id: 'definitions_sheep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target:  '#definitions_giraffe'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_giraffe'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.sheep.definition))\n        },          \n        definitions_giraffe:{\n            initial: 'prompt',\n            id: 'definitions_giraffe',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: cancel('timer2'),  target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_crocodile'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_crocodile'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.giraffe.definition))\n        },   \n        definitions_crocodile:{\n            initial: 'prompt',\n            id: 'definitions_crocodile',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_peacock'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_peacock'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.crocodile.definition))\n        },      \n        definitions_peacock:{\n            initial: 'prompt',\n            id: 'definitions_peacock',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.peacock.definition))\n        },\n\n        /* ==================================================================== DEFINITIONS WEEKDAYS =================================================================================*/\n        definitions_weekdays_begin:{\n            initial: 'prompt',\n            id: 'definitions_weekdays_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Monday\" in (weekdaysGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_tuesday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_tuesday'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Monday.definition))},\n        \n        definitions_tuesday:{\n            initial: 'prompt',\n            id: 'definitions_tuesday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_wednesday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_wednesday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Tuesday.definition))\n        },\n\n        definitions_wednesday:{\n            initial: 'prompt',\n            id: 'definitions_wednesday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_thursday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_thursday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Wednesday.definition))\n        },\n\n        definitions_thursday:{\n            initial: 'prompt',\n            id: 'definitions_thursday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_friday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_friday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Thursday.definition))\n        },\n\n        definitions_friday:{\n            initial: 'prompt',\n            id: 'definitions_friday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_saturday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_saturday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Friday.definition))\n        },\n\n        definitions_saturday:{\n            initial: 'prompt',\n            id: 'definitions_saturday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sunday'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sunday'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Saturday.definition))\n        },\n\n        definitions_sunday:{\n            initial: 'prompt',\n            id: 'definitions_sunday',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.weekdays.Sunday.definition))\n        },\n\n/* ==================================================================== DEFINITIONS OCCUPATIONS =================================================================================*/\n        definitions_occupations_begin:{\n            initial: 'prompt',\n            id: 'definitions_occupations_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_doctor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_doctor'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.teacher.definition))},\n\n        definitions_doctor:{\n            initial: 'prompt',\n            id: 'definitions_doctor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_builder'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_builder'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.doctor.definition))},\n\n        definitions_builder:{\n            initial: 'prompt',\n            id: 'definitions_builder',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_lifeguard'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_lifeguard'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.builder.definition))},\n\n        definitions_lifeguard:{\n            initial: 'prompt',\n            id: 'definitions_lifeguard',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_actor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_actor'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.lifeguard.definition))},\n\n        definitions_actor:{\n            initial: 'prompt',\n            id: 'definitions_actor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_engineer'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_engineer'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.actor.definition))},\n\n        definitions_engineer:{\n            initial: 'prompt',\n            id: 'definitions_engineer',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_garbage_man'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_garbage_man'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.engineer.definition))},\n\n        definitions_garbage_man:{\n            initial: 'prompt',\n            id: 'definitions_garbage_man',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.occupation.garbage_man.definition))},\n\n/* ==================================================================== DEFINITIONS COLOURS =================================================================================*/\n        definitions_colours_begin:{\n            initial: 'prompt',\n            id: 'definitions_colours_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"yellow\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_red'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_red'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.yellow.definition))},\n\n        definitions_red:{\n            initial: 'prompt',\n            id: 'definitions_red',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"red\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_purple'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_purple'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.red.definition))},\n\n        definitions_purple:{\n            initial: 'prompt',\n            id: 'definitions_purple',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"purple\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_brown'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_brown'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.purple.definition))},\n\n        definitions_brown:{\n            initial: 'prompt',\n            id: 'definitions_brown',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"brown\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_black'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_black'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.brown.definition))},\n\n        definitions_black:{\n            initial: 'prompt',\n            id: 'definitions_black',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"black\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_white'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_white'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.black.definition))},\n\n        definitions_white:{\n            initial: 'prompt',\n            id: 'definitions_white',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"white\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_green'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_green'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.white.definition))},\n\n        definitions_green:{\n            initial: 'prompt',\n            id: 'definitions_green',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"green\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.colours.green.definition))},\n\n        /* ==================================================================== DEFINITIONS VERBS =================================================================================*/\n        definitions_verbs_begin:{\n            initial: 'prompt',\n            id: 'definitions_verbs_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"go\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_run'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_run'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.go.definition))},\n\n        definitions_run:{\n            initial: 'prompt',\n            id: 'definitions_run',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"run\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_eat'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_eat'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.run.definition))},\n\n        definitions_eat:{\n            initial: 'prompt',\n            id: 'definitions_eat',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"eat\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sleep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sleep'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.eat.definition))},\n\n        definitions_sleep:{\n            initial: 'prompt',\n            id: 'definitions_sleep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sleep\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_write'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_write'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.sleep.definition))},\n\n        definitions_write:{\n            initial: 'prompt',\n            id: 'definitions_write',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"write\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sing'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sing'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.write.definition))},\n\n        definitions_sing:{\n            initial: 'prompt',\n            id: 'definitions_sing',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sing\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_drink'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_drink'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.sing.definition))},\n\n        definitions_drink:{\n            initial: 'prompt',\n            id: 'definitions_drink',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"drink\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.verbs.drink.definition))},\n\n        /* ===================================================== DEFINITIONS FAMILY ===================================================================================================*/\n        definitions_family_begin:{\n            initial: 'prompt',\n            id: 'definitions_family_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_brother'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_brother'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.cousin.definition))},\n\n        definitions_brother:{\n            initial: 'prompt',\n            id: 'definitions_brother',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sister'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sister'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.brother.definition))},\n\n        definitions_sister:{\n            initial: 'prompt',\n            id: 'definitions_sister',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_mum'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_mum'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.sister.definition))},\n\n        definitions_mum:{\n            initial: 'prompt',\n            id: 'definitions_mum',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_dad'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_dad'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.mum.definition))},\n\n        definitions_dad:{\n            initial: 'prompt',\n            id: 'definitions_dad',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_grandma_1'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_grandma_1'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.dad.definition))},\n\n        definitions_grandma_1:{\n            initial: 'prompt',\n            id: 'definitions_grandma_1',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_grandma_2'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_grandma_2'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.grandma_1.definition))},\n\n        definitions_grandma_2:{\n            initial: 'prompt',\n            id: 'definitions_grandma_2',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.family.grandma_2.definition))},\n\n        /* ===================================================== DEFINITIONS GEOGRAPHICAL  ===================================================================================================*/\n        definitions_geographical_begin:{\n            initial: 'prompt',\n            id: 'definitions_geographical_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_mountain'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_mountain'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.river.definition))},\n\n        definitions_mountain:{\n            initial: 'prompt',\n            id: 'definitions_mountain',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sea'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_sea'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.mountain.definition))},\n\n        definitions_sea:{\n            initial: 'prompt',\n            id: 'definitions_sea',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_forest'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_forest'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.sea.definition))},\n\n        definitions_forest:{\n            initial: 'prompt',\n            id: 'definitions_forest',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_lake'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_lake'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.forest.definition))},\n\n        definitions_lake:{\n            initial: 'prompt',\n            id: 'definitions_lake',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_cliff'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_cliff'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.lake.definition))},\n\n        definitions_cliff:{\n            initial: 'prompt',\n            id: 'definitions_cliff',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_cave'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_cave'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.cliff.definition))},\n\n        definitions_cave:{\n            initial: 'prompt',\n            id: 'definitions_cave',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n        },\n        ...Say_play(say(game_vocab.geographical.cave.definition))},\n\n/* ==================================================================== DEFINITIONS SUMMARY =================================================================================*/\n        \n                                definitions_summary:{\n                                    initial: 'prompt',\n                                    id: 'definitions_summary',\n                                    on: {RECOGNISED:[\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                        actions: [cancel('timer2'), cancel('timer')], target:'#definitions' },\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                        actions: [cancel('timer2'), cancel('timer')], target:'#which_game' },\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                        actions: [cancel('timer2'), cancel('timer')],  target:'#exit_app' }, \n                                        {target:'.nomatch'}]},\n                                   ...sayAskTimeout(send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Well done! Your current score is ${context.score}. Would you like to play Definitions again, or try some other game?`})))\n    \n                },\n\n            pictures: {\n                initial: 'prompt',\n                id: 'pictures',\n                on: {\n                    RECOGNISED:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#pictures_invocation'}],\n                        TIMEOUT: '.timeout'\n                },\n                        ...sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))\n    \n            },\n                pictures_invocation:{\n                    initial: 'prompt',\n                    id: 'pictures_invocation',\n                    states:{\n                        prompt: { ...invoke_rasa('#pictures_choice')}\n                    }\n                },\n                pictures_choice:{\n                    initial: 'prompt',\n                    id: 'pictures_choice',\n                    on:{\n                        ENDSPEECH:[{\n                            cond: (context) => context.intentResult === 'Help',\n                            target: 'pictures_help'},\n                            {cond: (context) => context.intentResult === 'Quit',\n                            target: '#quit_game'},\n                            {cond: (context) => context.intentResult === 'Definitions',\n                            target: '#definitions'},\n                            {cond: (context) => context.intentResult === 'Wordplay',\n                            target: '#wordplay'},\n                            {cond: (context) => context.intentResult === 'Pictures',\n                            target: '#pictures_again'},\n                            {cond: (context) => context.intentResult === 'Animals',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Weekdays',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Occupation',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Colours',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Verbs',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Family',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n                            {cond: (context) => context.intentResult === 'Geographical',\n                            actions: assign((context) => { return { game_category: context.recResult} }),\n                            target: 'pictures_pregame'},\n\n        \n                        {target:'.nomatch'}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send('ENDSPEECH')},\n                        nomatch: {\n                            entry: say(\"Unavailable right now.\"),\n                            on: {ENDSPEECH: '#welcome'}\n                                \n                            }\n                                \n                        }\n        \n                },\n                pictures_again:{\n                    id: 'pictures_again',\n                    on:{ENDSPEECH:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#pictures_invocation'}],\n                        TIMEOUT: '.timeout' },\n                    ...sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))\n    \n                },\n                pictures_help:{\n                    initial: 'prompt',\n                    id: 'pictures_help',\n                    on: {\n                        RECOGNISED:[{\n                            actions: assign((context) => { return { task: context.recResult } }),\n                            target: 'pictures_invocation'},\n                        \n                        {target: \".nomatch\"}]\n                    },\n                            ...sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change another game.\"))\n                },\n                pictures_quit:{\n                    initial: 'prompt',\n                    id: 'pictures_quit',\n                    on: {ENDSPEECH: '#welcome'},\n                    ...sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))\n                },\n                pictures_pregame:{\n                    initial: 'prompt',\n                    id: 'pictures_pregame',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Animals\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: cat}})],\n                            target: \"#pictures_animals_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Weekdays\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: Monday}})],\n                            target: \"#pictures_weekdays_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Occupation\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: teacher}})],\n                            target: \"#pictures_occupations_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Colours\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: yellow}})],\n                            target: \"#pictures_colours_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Verbs\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: go}})],\n                            target: \"#pictures_verbs_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Family\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: cousin}})],\n                            target: \"#pictures_family_begin\"},\n                            {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.intentResult === \"Grographical\",\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: river}})],\n                            target: \"#pictures_geographical_begin\"},\n\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                            target: \"#quit_game\"},\n                        { target: \".nomatch\" }],\n                        ENDSPEECH: '.ask'\n                    },\n                    states: {\n                        prompt:\n                        {entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`})),\n                        on: {ENDSPEECH: 'ask'}},\n                        nomatch:{\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\n                            on: {ENDSPEECH: 'ask'},\n                        },\n                        ask: {\n                            entry: listen()\n                        }\n                    }\n                },\n\n/* ===================================================== PICTURES ANIMALS ===================================================================================================*/\n\n                pictures_animals_begin:{\n                    initial: 'prompt',\n                    id: 'pictures_animals_begin',\n                    on: {   RECOGNISED:[\n                        {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: dog, score: (context.score || 0)+1 }})], target: '.match'},\n                        {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer'), cancel('timer2')],  target: '.almost'},\n                        {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                        actions: [cancel('timer'),cancel('timer2'),  assign((context) => {return { picture: dog}})],  target: '.skip_to_next'},\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                        actions: [assign((context) => {return {picture: Background}}), cancel('timer')], target: '#quit_game'},\n    \n                        {target:'.nomatch'}],\n                            NEXT_STATE: {target: '#pictures_dog'},\n                            SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_dog'},\n                            SHOW: {target: '.show'},\n                },\n                ...Show_play()},\n\n            pictures_dog:{\n                initial: 'prompt',\n                id: 'pictures_dog',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: fox, score: (context.score || 0)+1 }})], target: '.match',},\n                    {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                    target: '.almost'},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: fox}})],target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_fox'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_fox'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },\n            pictures_fox:{\n                initial: 'prompt',\n                id: 'pictures_fox',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: sheep, score: (context.score || 0)+1 }})], target: '.match',},\n                    {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: sheep}})], target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_sheep'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sheep'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },    \n            pictures_sheep:{\n                initial: 'prompt',\n                id: 'pictures_sheep',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: giraffe, score: (context.score || 0)+1}})], target: '.match',},\n                    {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: giraffe}})], target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target:  '#pictures_giraffe'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_giraffe'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },          \n            pictures_giraffe:{\n                initial: 'prompt',\n                id: 'pictures_giraffe',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: crocodile, score: (context.score || 0)+1}})], target: '.match',},\n                    {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: crocodile}})],  target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_crocodile'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_crocodile'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },   \n            pictures_crocodile:{\n                initial: 'prompt',\n                id: 'pictures_crocodile',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: peacock, score: (context.score || 0)+1}})],  target: '.match',},\n                    {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: peacock}})], target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_peacock'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_peacock'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },  \n\n            pictures_peacock:{\n                initial: 'prompt',\n                id: 'pictures_peacock',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return {picture: Background, score: (context.score || 0)+1}})],  target: '.match',},\n                    {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                     target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return {picture: Background}})], target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})],\n                    target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_summary'},\n                        SKIP_STATE: {target: '#pictures_summary'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()},\n            \n\n/* ==================================================================== PICTURES WEEKDAYS =================================================================================*/\n            pictures_weekdays_begin:{\n                initial: 'prompt',\n                id: 'pictures_weekdays_begin',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Monday\" in (weekdaysGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Tuesday, score: (context.score || 0)+1}})],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: Tuesday}})], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_tuesday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_tuesday'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()},\n\n            pictures_tuesday:{\n                initial: 'prompt',\n                id: 'pictures_tuesday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Tuesday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Wednesday, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Wednesday} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_wednesday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_wednesday'},\n                        SHOW: {target: '.show'}\n\n            },\n            ...Show_play()},\n\n            pictures_wednesday:{\n                initial: 'prompt',\n                id: 'pictures_wednesday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Wednesday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Thursday, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Thursday} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_thursday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_thursday'},\n                        SHOW: {target: '.show'}\n\n            },\n            ...Show_play()},\n\n\n            pictures_thursday:{\n                initial: 'prompt',\n                id: 'pictures_thursday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Thursday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Friday, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Friday} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_friday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_friday'},\n                        SHOW: {target: '.show'}\n\n            },\n            ...Show_play()},\n\n            pictures_friday:{\n                initial: 'prompt',\n                id: 'pictures_friday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Friday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Saturday, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Saturday} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_saturday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_saturday'},\n                        SHOW: {target: '.show'}\n\n            },\n            ...Show_play()},\n\n            pictures_saturday:{\n                initial: 'prompt',\n                id: 'pictures_saturday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Saturday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Sunday, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Sunday} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_sunday'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sunday'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()},\n\n            pictures_sunday:{\n                initial: 'prompt',\n                id: 'pictures_sunday',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"Sunday\" in (weekdaysGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: Background, score: (context.score || 0)+1 } })],  target: '.match',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()},\n\n            /* ==================================================================== PICTURES OCCUPATIONS =================================================================================*/\n        pictures_occupations_begin:{\n            initial: 'prompt',\n            id: 'pictures_occupations_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return {picture: doctor, score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"teacher\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')],  target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), assign((context)=>{ return {picture: doctor} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_doctor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_doctor'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_doctor:{\n            initial: 'prompt',\n            id: 'pictures_doctor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: builder, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"doctor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: builder} }) ], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_builder'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_builder'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_builder:{\n            initial: 'prompt',\n            id: 'pictures_builder',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: lifeguard, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"builder\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: lifeguard} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_lifeguard'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_lifeguard'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_lifeguard:{\n            initial: 'prompt',\n            id: 'pictures_lifeguard',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: actor, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lifeguard\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: actor} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_actor'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_actor'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_actor:{\n            initial: 'prompt',\n            id: 'pictures_actor',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: engineer, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"actor\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: engineer} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_engineer'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_engineer'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_engineer:{\n            initial: 'prompt',\n            id: 'pictures_engineer',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: garbage_man, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"engineer\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: garbage_man} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_garbage_man'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_garbage_man'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_garbage_man:{\n            initial: 'prompt',\n            id: 'pictures_garbage_man',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: Background, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"garbage_man\" in (occupationsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n/* ==================================================================== PICTURES COLOURS =================================================================================*/\n        pictures_colours_begin:{\n            initial: 'prompt',\n            id: 'pictures_colours_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"yellow\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: red, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: red} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_red'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_red'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_red:{\n            initial: 'prompt',\n            id: 'pictures_red',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"red\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: purple, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: purple} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_purple'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_purple'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_purple:{\n            initial: 'prompt',\n            id: 'pictures_purple',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"purple\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: brown, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: brown} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_brown'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_brown'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_brown:{\n            initial: 'prompt',\n            id: 'pictures_brown',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"brown\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: black, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: black} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_black'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_black'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_black:{\n            initial: 'prompt',\n            id: 'pictures_black',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"black\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: white, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: white} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_white'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_white'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_white:{\n            initial: 'prompt',\n            id: 'pictures_white',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"white\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: green, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: green} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_green'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_green'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_green:{\n            initial: 'prompt',\n            id: 'pictures_green',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"green\" in (coloursGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: Background, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        /* ==================================================================== PICTURES VERBS =================================================================================*/\n        pictures_verbs_begin:{\n            initial: 'prompt',\n            id: 'pictures_verbs_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"go\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: run, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: run} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_run'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_run'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_run:{\n            initial: 'prompt',\n            id: 'pictures_run',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"run\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: eat, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: eat} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_eat'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_eat'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_eat:{\n            initial: 'prompt',\n            id: 'pictures_eat',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"eat\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: sleep, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: sleep} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_sleep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sleep'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_sleep:{\n            initial: 'prompt',\n            id: 'pictures_sleep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sleep\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: write, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: write} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_write'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_write'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_write:{\n            initial: 'prompt',\n            id: 'pictures_write',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"write\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: sing, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: sing} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_sing'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sing'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_sing:{\n            initial: 'prompt',\n            id: 'pictures_sing',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"sing\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: drink, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: drink} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_drink'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_drink'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_drink:{\n            initial: 'prompt',\n            id: 'pictures_drink',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"drink\" in (verbsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: Background, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n/* ===================================================== PICTURES FAMILY ===================================================================================================*/\n        pictures_family_begin:{\n            initial: 'prompt',\n            id: 'pictures_family_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: brother, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cousin\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: brother} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_brother'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_brother'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_brother:{\n            initial: 'prompt',\n            id: 'pictures_brother',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: sister, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"brother\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: sister} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_sister'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sister'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_sister:{\n            initial: 'prompt',\n            id: 'pictures_sister',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: mum, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sister\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: mum} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_mum'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_mum'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_mum:{\n            initial: 'prompt',\n            id: 'pictures_mum',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: dad, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mum\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: dad} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_dad'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_dad'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_dad:{\n            initial: 'prompt',\n            id: 'pictures_dad',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: grandma_1, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dad\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: grandma_1} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_grandma_1'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_grandma_1'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_grandma_1:{\n            initial: 'prompt',\n            id: 'pictures_grandma_1',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: grandma_2, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_1\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: grandma_2} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_grandma_2'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_grandma_2'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_grandma_2:{\n            initial: 'prompt',\n            id: 'pictures_grandma_2',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: Background, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"grandma_2\" in (familyGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        /* ===================================================== PICTURES GEOGRAPHICAL  ===================================================================================================*/\n        pictures_geographical_begin:{\n            initial: 'prompt',\n            id: 'pictures_geographical_begin',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: mountain, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"river\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: mountain} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_mountain'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_mountain'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_mountain:{\n            initial: 'prompt',\n            id: 'pictures_mountain',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: sea, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"mountain\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: sea} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_sea'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_sea'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_sea:{\n            initial: 'prompt',\n            id: 'pictures_sea',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: forest, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sea\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: forest} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_forest'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_forest'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_forest:{\n            initial: 'prompt',\n            id: 'pictures_forest',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: lake, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"forest\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: lake} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_lake'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_lake'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_lake:{\n            initial: 'prompt',\n            id: 'pictures_lake',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: cliff, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"lake\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: cliff} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_cliff'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_cliff'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_cliff:{\n            initial: 'prompt',\n            id: 'pictures_cliff',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: cave, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cliff\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: cave} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_cave'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_cave'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n\n        pictures_cave:{\n            initial: 'prompt',\n            id: 'pictures_cave',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { picture: Background, score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"cave\" in (geographicalGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'),assign((context)=>{ return {picture: Background} })], target: '.skip_to_next'},\n                {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.prompt'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context) => {return {picture: Background}})], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#pictures_summary'},\n                    SHOW: {target: '.show'}\n        },\n        ...Show_play()},\n        \n                                pictures_summary:{\n                                    initial: 'prompt',\n                                    id: 'pictures_summary',\n                                    on: {RECOGNISED:[\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                        actions: [cancel('timer2'), cancel('timer')], target:'#pictures' },\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                        actions: [cancel('timer2'), cancel('timer')], target:'#which_game' },\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                        actions: [cancel('timer2'), cancel('timer')],  target:'#exit_app' }, \n                                        {target:'.nomatch'}]},\n                                   ...sayAskTimeout(send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Well done! Your current score is ${context.score}. Would you like to guess pictures again, or try some other game?`})))\n        \n        \n                    },\n\n\n        quit_game:{\n            initial: 'prompt',\n            id:'quit_game',\n            on: {ENDSPEECH: '#which_game'},\n            states: {\n                prompt:{entry: say('Exiting current game.')\n\n                }\n            }\n        },\n        exit_app:{\n            id: 'exit_app',\n            on: {ENDSPEECH: '#idle'},\n            entry: say('Thank you for playing and have a nice day!')\n        }\n}})\n\nimport Background from \"./Pictures_game/Background.jpg\";\nimport cat from \"./Pictures_game/cat.jpg\";\nimport dog from \"./Pictures_game/dog.jpeg\";\nimport fox from \"./Pictures_game/fox.jpg\";\nimport sheep from \"./Pictures_game/sheep.jpg\";\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\nimport peacock from \"./Pictures_game/peacock.jpg\";\n\nimport Monday from \"./Pictures_game/Monday.jpg\";\nimport Tuesday from \"./Pictures_game/Tuesday.jpg\";\nimport Wednesday from \"./Pictures_game/Wednesday.jpeg\";\nimport Thursday from \"./Pictures_game/Thursday.jpg\";\nimport Friday from \"./Pictures_game/Friday.jpg\";\nimport Saturday from \"./Pictures_game/Saturday.jpg\";\nimport Sunday from \"./Pictures_game/Sunday.jpg\";\n\nimport teacher from \"./Pictures_game/Teacher.jpeg\";\nimport doctor from \"./Pictures_game/Doctor.png\";\nimport builder from \"./Pictures_game/Builder.jpg\";\nimport lifeguard from \"./Pictures_game/Lifeguard.jpg\";\nimport actor from \"./Pictures_game/Actor.jpg\";\nimport engineer from \"./Pictures_game/Engineer.png\";\nimport garbage_man from \"./Pictures_game/Garbage_man.jpeg\";\n\nimport yellow from \"./Pictures_game/yellow.jpg\";\nimport red from \"./Pictures_game/red.jpg\";\nimport purple from \"./Pictures_game/purple.png\";\nimport brown from \"./Pictures_game/brown.jpg\";\nimport black from \"./Pictures_game/black.jpg\";\nimport white from \"./Pictures_game/white.jpg\";\nimport green from \"./Pictures_game/green.jpg\";\n\nimport go from \"./Pictures_game/go.png\";\nimport run from \"./Pictures_game/run.jpg\";\nimport eat from \"./Pictures_game/eat.jpg\";\nimport sleep from \"./Pictures_game/sleep.jpg\";\nimport write from \"./Pictures_game/write.jpg\";\nimport sing from \"./Pictures_game/sing.jpg\";\nimport drink from \"./Pictures_game/drink.jpg\";\n\nimport cousin from \"./Pictures_game/cousin.jpg\";\nimport brother from \"./Pictures_game/brother.jpeg\";\nimport sister from \"./Pictures_game/sister.jpg\";\nimport mum from \"./Pictures_game/mother.jpg\";\nimport dad from \"./Pictures_game/dad.jpg\";\nimport grandma_1 from \"./Pictures_game/grandma_1.jpg\";\nimport grandma_2 from \"./Pictures_game/grandma_2.jpg\";\n\nimport river from \"./Pictures_game/river.png\";\nimport mountain from \"./Pictures_game/mountain.jpg\";\nimport sea from \"./Pictures_game/sea.jpg\";\nimport forest from \"./Pictures_game/forest.jpg\";\nimport lake from \"./Pictures_game/lake.jpg\";\nimport cliff from \"./Pictures_game/cliff.jpg\";\nimport cave from \"./Pictures_game/cave.jpg\";\n"]},"metadata":{},"sourceType":"module"}