{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport { game_vocab } from \"./definitions_and_words\";\nimport { gameGrammar, animalsGrammar } from \"./grammars/vocabGrammar\";\nconst promptReset = assign(context => {\n  return {\n    count: 0\n  };\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst cancel = actions.cancel;\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_this],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 30000,\n          id: 'timer'\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        id: 'idle',\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'timeout_final'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say(':et us give it one last try'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nfunction Say_play(say_word) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_word],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 20000,\n          id: 'timer2'\n        })]\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            target: 'reprompt'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      reprompt: {\n        entry: say('Time is running out!')\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      }\n    }\n  };\n}\n\n_c = Say_play;\n\nfunction Show_play() {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: send('SHOW')\n      },\n      show: {\n        entry: say(' '),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      reprompt: {\n        entry: [say(\"Time is up three!\")],\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      }\n    }\n  };\n}\n\n_c2 = Show_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      id: 'welcome',\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Welcome to Sweenglish!')\n        }\n      }\n    },\n    which_game: {\n      initial: 'prompt',\n      id: 'which_game',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say('Which game would you like to play?'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#exit_app'\n        }, {\n          cond: context => context.intentResult === 'Help',\n          target: '#general_help'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    general_help: {\n      initial: 'prompt',\n      id: 'general_help',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say(' Swenglish has three modes: wordplay, where you will have to guess words; definitions,\\\r\n                 where you will be given definitions, and pictures, where you will be shown a picture and will have to say a word in Swedish.')\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay_again'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: 'wordplay_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_again: _objectSpread({\n      id: 'wordplay_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))),\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where applicable, be mindful of articles! You have limited time for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))),\n    wordplay_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          target: \"#wordplay_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    wordplay_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.english))),\n    wordplay_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.english))),\n    wordplay_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.english))),\n    wordplay_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.english))),\n    wordplay_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.english))),\n    wordplay_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.english))),\n    wordplay_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.english))),\n    wordplay_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#wordplay_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))),\n    definitions: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))),\n    definitions_invocation: {\n      initial: 'prompt',\n      id: 'definitions_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#definitions_choice'))\n      }\n    },\n    definitions_choice: {\n      initial: 'prompt',\n      id: 'definitions_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'definitions_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions_again'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: 'definitions_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    definitions_again: _objectSpread({\n      id: 'definitions_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))),\n    definitions_help: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'definitions_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a corresponding word in Swedish. You can choose from seven categories:\\\r\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                            Where applicable, be mindful of articles! You have limited time to asnwer your question.\\\r\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the wordplay game.\"))),\n    definitions_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))),\n    definitions_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          target: \"#definitions_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    definitions_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#definitions_dog'\n        },\n        TIMEOUT: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.definition))),\n    definitions_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.definition))),\n    definitions_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.definition))),\n    definitions_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.definition))),\n    definitions_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.definition))),\n    definitions_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.definition))),\n    definitions_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.definition))),\n    definitions_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#definitions_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))),\n    pictures: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))),\n    pictures_invocation: {\n      initial: 'prompt',\n      id: 'pictures_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#pictures_choice'))\n      }\n    },\n    pictures_choice: {\n      initial: 'prompt',\n      id: 'pictures_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'pictures_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures_again'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: '#pictures_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    pictures_again: _objectSpread({\n      id: 'pictures_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))),\n    pictures_help: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'pictures_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\r\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                            Where applicable, be mindful of articles! You have limited time for every question.\\\r\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    pictures_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))),\n    pictures_pregame: {\n      initial: 'prompt',\n      id: 'pictures_pregame',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: cat\n            };\n          })],\n          target: \"#pictures_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    pictures_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: dog\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer'), assign(context => {\n            return {\n              picture: dog\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          }), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_dog'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_fox'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_sheep'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_giraffe'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_crocodile'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_peacock'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: cat\n            };\n          })],\n          target: '#pictures_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! Would you like to repeat, or play another game?'))),\n    quit_game: {\n      initial: 'prompt',\n      id: 'quit_game',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Exiting current game.')\n        }\n      }\n    },\n    exit_app: {\n      id: 'exit_app',\n      on: {\n        ENDSPEECH: '#idle'\n      },\n      entry: say('Thank you for playing and have a nice day!')\n    }\n  }\n};\nimport Background from \"./Pictures_game/Background.jpg\";\nimport cat from \"./Pictures_game/cat.jpg\";\nimport dog from \"./Pictures_game/dog.jpeg\";\nimport fox from \"./Pictures_game/fox.jpg\";\nimport sheep from \"./Pictures_game/sheep.jpg\";\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\nimport peacock from \"./Pictures_game/peacock.jpg\";\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Say_play\");\n$RefreshReg$(_c2, \"Show_play\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/dmSwenglish.ts"],"names":["send","assign","actions","game_vocab","gameGrammar","animalsGrammar","promptReset","context","count","say","text","_context","type","value","listen","cancel","invoke_rasa","go_to_state","invoke","id","src","event","nluRequest","task","onDone","target","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","reprompt0","reprompt1","reprompt2","Say_play","say_word","almost","match","reprompt","go_to_next","Show_play","show","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","dmMachine","start_point","CLICK","welcome","which_game","RECOGNISED","recResult","choice","tool","general_help","wordplay","wordplay_invocation","wordplay_choice","wordplay_again","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_animals_begin","NEXT_STATE","animals","cat","english","wordplay_dog","dog","wordplay_fox","fox","wordplay_sheep","sheep","wordplay_giraffe","giraffe","wordplay_crocodile","crocodile","wordplay_peacock","peacock","wordplay_summary","definitions","definitions_invocation","definitions_choice","definitions_again","definitions_help","definitions_quit","definitions_pregame","definitions_animals_begin","definition","definitions_dog","definitions_fox","definitions_sheep","definitions_giraffe","definitions_crocodile","definitions_peacock","definitions_summary","pictures","pictures_invocation","pictures_choice","pictures_again","pictures_help","pictures_quit","pictures_pregame","picture","pictures_animals_begin","Background","SHOW","pictures_dog","pictures_fox","pictures_sheep","pictures_giraffe","pictures_crocodile","pictures_peacock","pictures_summary","quit_game","exit_app"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport {game_vocab} from \"./definitions_and_words\"\r\nimport {gameGrammar, animalsGrammar, weekdaysGrammar, occupationsGrammar, familyGrammar, verbsGrammar, coloursGrammar, geographicalGrammar} from \"./grammars/vocabGrammar\"\r\n\r\nconst promptReset: Action<SDSContext, SDSEvent> = assign((context) => { return { count:0} })\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n \r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst {cancel} = actions\r\n\r\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: go_to_state,\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: '#welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n}}})}\r\n\r\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [promptReset, say_this],\r\n                on: { ENDSPEECH: 'ask'}},\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 30000, id: 'timer'})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                id: 'idle',\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\r\n                                {cond: (context) => context.count ===4, target: 'timeout_final'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: say(\" Doesn't look like I can hear you well. Please try again\"),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt1: {\r\n                entry: say('Sorry, still nothing.'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say(':et us give it one last try'),\r\n                on: {ENDSPEECH: 'ask'}\r\n}}})}\r\n\r\n\r\nfunction Say_play(say_word: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [promptReset, say_word],\r\n                on: {ENDSPEECH: 'ask'}},\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 20000, id:'timer2'})]\r\n            },\r\n            nomatch: {\r\n                entry: say(\"I'm afraid not! Try again!\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{target: 'reprompt'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            almost:{\r\n                entry: say(\"Right! But what is the correct article?\"),\r\n                on:{ENDSPEECH: 'ask'}\r\n            },\r\n            match: {\r\n                entry: say('Correct!'),\r\n                on: {ENDSPEECH:'go_to_next'}\r\n            },\r\n            reprompt:{\r\n                entry: say('Time is running out!')\r\n\r\n            },\r\n            go_to_next:{\r\n                entry: send('NEXT_STATE')\r\n            },\r\n}})}\r\n\r\nfunction Show_play(): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: send('SHOW')},\r\n            show:{\r\n                entry: say(' '),\r\n                on:{\r\n                    ENDSPEECH: 'ask'\r\n                }\r\n            },\r\n            ask: { entry: listen()\r\n            },\r\n            nomatch: {\r\n                entry: say(\"I'm afraid not! Try again!\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            reprompt: {\r\n                entry: [say(\"Time is up three!\")],\r\n                on: {ENDSPEECH: 'go_to_next'}\r\n            },\r\n            almost:{\r\n                entry: say(\"Right! But what is the correct article?\"),\r\n                on:{ENDSPEECH: 'ask'}\r\n            },\r\n            match: {\r\n                entry: say('Correct!'),\r\n                on: {ENDSPEECH:'go_to_next'}\r\n            },\r\n            go_to_next:{\r\n                entry: send('NEXT_STATE')\r\n            },\r\n}})}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            id: 'welcome',\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH:'which_game'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say('Welcome to Sweenglish!')\r\n                }\r\n                \r\n            }\r\n        },\r\n        which_game:{\r\n            initial: 'prompt',\r\n            id: 'which_game',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'}]},\r\n            \r\n            states:{\r\n                prompt: {\r\n                    entry: say('Which game would you like to play?'),\r\n                    on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask:{ entry: listen()\r\n                }\r\n            }},\r\n\r\n        choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#tool')}\r\n            }\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            id: 'tool',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Definitions',\r\n                    target: '#definitions'},\r\n                    {cond: (context) => context.intentResult === 'Words',\r\n                    target: '#wordplay'},\r\n                    {cond: (context) => context.intentResult === 'Pictures',\r\n                    target: '#pictures'},\r\n                    {cond: (context) => context.intentResult === 'Quit',\r\n                    target: '#exit_app'},\r\n                    {cond: (context) => context.intentResult === 'Help',\r\n                    target: '#general_help'},\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send('ENDSPEECH')},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#welcome'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        general_help:{\r\n            initial: 'prompt',\r\n            id: 'general_help',\r\n            on: {ENDSPEECH: '#which_game'},\r\n            states: {\r\n                prompt: {entry: say(' Swenglish has three modes: wordplay, where you will have to guess words; definitions,\\\r\n                 where you will be given definitions, and pictures, where you will be shown a picture and will have to say a word in Swedish.')}\r\n        }},\r\n        wordplay: {\r\n            initial: 'prompt',\r\n            id: 'wordplay',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: '#wordplay_invocation'}],\r\n                    TIMEOUT: '.timeout'\r\n            },\r\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))\r\n\r\n        },\r\n            wordplay_invocation:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_invocation',\r\n                states:{\r\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\r\n                }\r\n            },\r\n            wordplay_choice:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_choice',\r\n                on:{\r\n                    ENDSPEECH:[{\r\n                        cond: (context) => context.intentResult === 'Help',\r\n                        target: 'wordplay_help'},\r\n                        {cond: (context) => context.intentResult === 'Quit',\r\n                        target: '#quit_game'},\r\n                        {cond: (context) => context.intentResult === 'Definitions',\r\n                        target: '#definitions'},\r\n                        {cond: (context) => context.intentResult === 'Wordplay',\r\n                        target: 'wordplay_again'},\r\n                        {cond: (context) => context.intentResult === 'Animals',\r\n                        target: 'wordplay_pregame'},\r\n                        /*\r\n                        {cond: (context) => context.intentResult === 'Weekdays',\r\n                        target: 'wordplay_weekdays'},\r\n                        {cond: (context) => context.intentResult === 'Occupation',\r\n                        target: 'wordplay_occupation'},\r\n                        {cond: (context) => context.intentResult === 'Colours',\r\n                        target: 'wordplay_colours'},\r\n                        {cond: (context) => context.intentResult === 'Verbs',\r\n                        target: 'wordplay_verbs'},\r\n                        {cond: (context) => context.intentResult === 'Family',\r\n                        target: 'wordplay_family'},\r\n                        {cond: (context) => context.intentResult === 'Geographical',\r\n                        target: 'wordplay_geographical'},*/\r\n  \r\n                    {target:'.nomatch'}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send('ENDSPEECH')},\r\n                    nomatch: {\r\n                        entry: say(\"Unavailable right now.\"),\r\n                        on: {ENDSPEECH: '#welcome'}\r\n                            \r\n                        }\r\n                            \r\n                    }\r\n    \r\n            },\r\n            wordplay_again:{\r\n                id: 'wordplay_again',\r\n                on:{ENDSPEECH:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: '#wordplay_invocation'}],\r\n                    TIMEOUT: '.timeout' },\r\n                ...sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))\r\n\r\n            },\r\n            wordplay_help:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_help',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: 'wordplay_invocation'},\r\n                    \r\n                    {target: \".nomatch\"}]\r\n                },\r\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where applicable, be mindful of articles! You have limited time for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\r\n            },\r\n            wordplay_quit:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_quit',\r\n                on: {ENDSPEECH: '#welcome'},\r\n               ...sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))\r\n            },\r\n            wordplay_pregame:{\r\n                initial: 'prompt',\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\r\n                        target: \"#wordplay_animals_begin\"},\r\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                        target: \"#quit_game\"},\r\n                    { target: \".nomatch\" }],\r\n                    ENDSPEECH: '.ask'\r\n                },\r\n                states: {\r\n                    prompt:\r\n                    {entry: send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.`}))},\r\n                    nomatch:{\r\n                        entry: say('Sorry, I did not quite catch that. Please repeat'),\r\n                        on: {ENDSPEECH: 'ask'},\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    }}},\r\n            wordplay_animals_begin:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_animals_begin',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [cancel('timer2'), cancel('timer')], target: '.match',},\r\n                    {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: [cancel('timer2'), cancel('timer')], target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\r\n\r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.cat.english))\r\n        },\r\n        wordplay_dog:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_dog',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: [cancel('timer2'), cancel('timer')], target: '.match',},\r\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'),target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.dog.english))\r\n        },\r\n        wordplay_fox:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_fox',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.fox.english))\r\n            },    \r\n        wordplay_sheep:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_sheep',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target:  '#wordplay_giraffe'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.sheep.english))\r\n        },          \r\n        wordplay_giraffe:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_giraffe',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.giraffe.english))\r\n        },   \r\n        wordplay_crocodile:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_crocodile',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.match',},\r\n                {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.crocodile.english))\r\n        },      \r\n        wordplay_peacock:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_peacock',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.match',},\r\n                {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.peacock.english))\r\n        },                                            \r\n    \r\n                            wordplay_summary:{\r\n                                initial: 'prompt',\r\n                                id: 'wordplay_summary',\r\n                                on: {RECOGNISED:[\r\n                                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \r\n                                    actions: [cancel('timer2'), cancel('timer')], target:'#wordplay_animals_begin' },\r\n                                    {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \r\n                                    actions: [cancel('timer2'), cancel('timer')], target:'#which_game' },\r\n                                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                                    actions: [cancel('timer2'), cancel('timer')],  target:'#exit_app' }, \r\n                                    {target:'.nomatch'}]},\r\n                               ...sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))\r\n\r\n\r\n            },\r\n            definitions: {\r\n                initial: 'prompt',\r\n                id: 'definitions',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: '#definitions_invocation'}],\r\n                        TIMEOUT: '.timeout'\r\n                },\r\n                        ...sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))\r\n    \r\n            },\r\n                definitions_invocation:{\r\n                    initial: 'prompt',\r\n                    id: 'definitions_invocation',\r\n                    states:{\r\n                        prompt: { ...invoke_rasa('#definitions_choice')}\r\n                    }\r\n                },\r\n                definitions_choice:{\r\n                    initial: 'prompt',\r\n                    id: 'definitions_choice',\r\n                    on:{\r\n                        ENDSPEECH:[{\r\n                            cond: (context) => context.intentResult === 'Help',\r\n                            target: 'definitions_help'},\r\n                            {cond: (context) => context.intentResult === 'Quit',\r\n                            target: '#quit_game'},\r\n                            {cond: (context) => context.intentResult === 'Definitions',\r\n                            target: '#definitions_again'},\r\n                            {cond: (context) => context.intentResult === 'Wordplay',\r\n                            target: 'wordplay'},\r\n                            {cond: (context) => context.intentResult === 'Animals',\r\n                            target: 'definitions_pregame'},\r\n                            /*\r\n                            {cond: (context) => context.intentResult === 'Weekdays',\r\n                            target: 'wordplay_weekdays'},\r\n                            {cond: (context) => context.intentResult === 'Occupation',\r\n                            target: 'wordplay_occupation'},\r\n                            {cond: (context) => context.intentResult === 'Colours',\r\n                            target: 'wordplay_colours'},\r\n                            {cond: (context) => context.intentResult === 'Verbs',\r\n                            target: 'wordplay_verbs'},\r\n                            {cond: (context) => context.intentResult === 'Family',\r\n                            target: 'wordplay_family'},\r\n                            {cond: (context) => context.intentResult === 'Geographical',\r\n                            target: 'wordplay_geographical'},*/\r\n      \r\n                        {target:'.nomatch'}]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send('ENDSPEECH')},\r\n                        nomatch: {\r\n                            entry: say(\"Unavailable right now.\"),\r\n                            on: {ENDSPEECH: '#welcome'}\r\n                                \r\n                            }\r\n                                \r\n                        }\r\n        \r\n                },\r\n                definitions_again:{\r\n                    id: 'definitions_again',\r\n                    on:{ENDSPEECH:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: '#definitions_invocation'}],\r\n                        TIMEOUT: '.timeout' },\r\n                    ...sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))\r\n    \r\n                },\r\n                definitions_help:{\r\n                    initial: 'prompt',\r\n                    id: 'definitions_help',\r\n                    on: {\r\n                        RECOGNISED:[{\r\n                            actions: assign((context) => { return { task: context.recResult } }),\r\n                            target: 'definitions_invocation'},\r\n                        \r\n                        {target: \".nomatch\"}]\r\n                    },\r\n                            ...sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a corresponding word in Swedish. You can choose from seven categories:\\\r\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                            Where applicable, be mindful of articles! You have limited time to asnwer your question.\\\r\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the wordplay game.\"))\r\n                },\r\n                definitions_quit:{\r\n                    initial: 'prompt',\r\n                    id: 'definitions_quit',\r\n                    on: {ENDSPEECH: '#welcome'},\r\n                   ...sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))\r\n                },\r\n                definitions_pregame:{\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\r\n                            target: \"#definitions_animals_begin\"},\r\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                            target: \"#quit_game\"},\r\n                        { target: \".nomatch\" }],\r\n                        ENDSPEECH: '.ask'\r\n                    },\r\n                    states: {\r\n                        prompt:\r\n                        {entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.`}))},\r\n                        nomatch:{\r\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\r\n                            on: {ENDSPEECH: 'ask'},\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                }}},\r\n                definitions_animals_begin:{\r\n                    initial: 'prompt',\r\n                    id: 'definitions_animals_begin',\r\n                    on: {   RECOGNISED:[\r\n                        {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \r\n                        actions: [cancel('timer2'), cancel('timer')], target: '.match',},\r\n                        {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \r\n                        actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\r\n                        {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                        actions: [cancel('timer2'), cancel('timer')],  target: '.go_to_next'},\r\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                        actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\r\n    \r\n                        {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\r\n                            NEXT_STATE: {actions: [cancel('timer2'), cancel('timer')], target: '#definitions_dog'},\r\n                            TIMEOUT: {actions: [cancel('timer2'), cancel('timer')], target:'.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.cat.definition))\r\n            },\r\n            definitions_dog:{\r\n                initial: 'prompt',\r\n                id: 'definitions_dog',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'), target: '.match',},\r\n                    {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'),target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_fox'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.dog.definition))\r\n            },\r\n            definitions_fox:{\r\n                initial: 'prompt',\r\n                id: 'definitions_fox',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [cancel('timer2'), cancel('timer')], target: '.match',},\r\n                    {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'), target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sheep'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.fox.definition))\r\n                },    \r\n            definitions_sheep:{\r\n                initial: 'prompt',\r\n                id: 'definitions_sheep',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.match',},\r\n                    {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target:  '#definitions_giraffe'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.sheep.definition))\r\n            },          \r\n            definitions_giraffe:{\r\n                initial: 'prompt',\r\n                id: 'definitions_giraffe',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.match',},\r\n                    {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'),  target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_crocodile'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.giraffe.definition))\r\n            },   \r\n            definitions_crocodile:{\r\n                initial: 'prompt',\r\n                id: 'definitions_crocodile',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'),  target: '.match',},\r\n                    {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_peacock'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.crocodile.definition))\r\n            },      \r\n            definitions_peacock:{\r\n                initial: 'prompt',\r\n                id: 'definitions_peacock',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'),  target: '.match',},\r\n                    {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n    \r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.peacock.definition))\r\n            },                                            \r\n        \r\n                                definitions_summary:{\r\n                                    initial: 'prompt',\r\n                                    id: 'definitions_summary',\r\n                                    on: {RECOGNISED:[\r\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \r\n                                        actions: cancel('timer2'), target:'#definitions_animals_begin' },\r\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \r\n                                        actions: cancel('timer2'), target:'#which_game' },\r\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                                        actions: cancel('timer2'),  target:'#exit_app' },{target: '.nomatch'}]},\r\n                                   ...sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))\r\n    \r\n                },\r\n\r\n            pictures: {\r\n                initial: 'prompt',\r\n                id: 'pictures',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: '#pictures_invocation'}],\r\n                        TIMEOUT: '.timeout'\r\n                },\r\n                        ...sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))\r\n    \r\n            },\r\n                pictures_invocation:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_invocation',\r\n                    states:{\r\n                        prompt: { ...invoke_rasa('#pictures_choice')}\r\n                    }\r\n                },\r\n                pictures_choice:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_choice',\r\n                    on:{\r\n                        ENDSPEECH:[{\r\n                            cond: (context) => context.intentResult === 'Help',\r\n                            target: 'pictures_help'},\r\n                            {cond: (context) => context.intentResult === 'Quit',\r\n                            target: '#quit_game'},\r\n                            {cond: (context) => context.intentResult === 'Definitions',\r\n                            target: '#definitions'},\r\n                            {cond: (context) => context.intentResult === 'Wordplay',\r\n                            target: '#wordplay'},\r\n                            {cond: (context) => context.intentResult === 'Pictures',\r\n                            target: '#pictures_again'},\r\n                            {cond: (context) => context.intentResult === 'Animals',\r\n                            target: '#pictures_pregame'},\r\n                            /*\r\n                            {cond: (context) => context.intentResult === 'Weekdays',\r\n                            target: 'wordplay_weekdays'},\r\n                            {cond: (context) => context.intentResult === 'Occupation',\r\n                            target: 'wordplay_occupation'},\r\n                            {cond: (context) => context.intentResult === 'Colours',\r\n                            target: 'wordplay_colours'},\r\n                            {cond: (context) => context.intentResult === 'Verbs',\r\n                            target: 'wordplay_verbs'},\r\n                            {cond: (context) => context.intentResult === 'Family',\r\n                            target: 'wordplay_family'},\r\n                            {cond: (context) => context.intentResult === 'Geographical',\r\n                            target: 'wordplay_geographical'},*/\r\n        \r\n                        {target:'.nomatch'}]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send('ENDSPEECH')},\r\n                        nomatch: {\r\n                            entry: say(\"Unavailable right now.\"),\r\n                            on: {ENDSPEECH: '#welcome'}\r\n                                \r\n                            }\r\n                                \r\n                        }\r\n        \r\n                },\r\n                pictures_again:{\r\n                    id: 'pictures_again',\r\n                    on:{ENDSPEECH:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: '#pictures_invocation'}],\r\n                        TIMEOUT: '.timeout' },\r\n                    ...sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))\r\n    \r\n                },\r\n                pictures_help:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_help',\r\n                    on: {\r\n                        RECOGNISED:[{\r\n                            actions: assign((context) => { return { task: context.recResult } }),\r\n                            target: 'pictures_invocation'},\r\n                        \r\n                        {target: \".nomatch\"}]\r\n                    },\r\n                            ...sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\r\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                            Where applicable, be mindful of articles! You have limited time for every question.\\\r\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\r\n                },\r\n                pictures_quit:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_quit',\r\n                    on: {ENDSPEECH: '#welcome'},\r\n                    ...sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))\r\n                },\r\n                pictures_pregame:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_pregame',\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\r\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: cat}})],\r\n                            target: \"#pictures_animals_begin\"},\r\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                            target: \"#quit_game\"},\r\n                        { target: \".nomatch\" }],\r\n                        ENDSPEECH: '.ask'\r\n                    },\r\n                    states: {\r\n                        prompt:\r\n                        {entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`}))},\r\n                        nomatch:{\r\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\r\n                            on: {ENDSPEECH: 'ask'},\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        }\r\n                    }\r\n                },\r\n                pictures_animals_begin:{\r\n                    initial: 'prompt',\r\n                    id: 'pictures_animals_begin',\r\n                    on: {   RECOGNISED:[\r\n                        {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \r\n                        actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: dog}})], target: '.match'},\r\n                        {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \r\n                        actions: [cancel('timer'), cancel('timer2')],  target: '.almost'},\r\n                        {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                        actions: [cancel('timer'),cancel('timer'),  assign((context) => {return { picture: dog}})],  target: '.go_to_next'},\r\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                        actions: [assign((context) => {return {picture: Background}}), cancel('timer')], target: '#quit_game'},\r\n    \r\n                        {target:'.nomatch'}],\r\n                            NEXT_STATE: {target: '#pictures_dog'},\r\n                            SHOW: {target: '.show'},\r\n                },\r\n                ...Show_play()\r\n            },\r\n            pictures_dog:{\r\n                initial: 'prompt',\r\n                id: 'pictures_dog',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return { picture: fox}})], target: '.match',},\r\n                    {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\r\n                    target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: fox}})],target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target: '#pictures_fox'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },\r\n            pictures_fox:{\r\n                initial: 'prompt',\r\n                id: 'pictures_fox',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: sheep}})], target: '.match',},\r\n                    {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \r\n                    target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return { picture: sheep}})], target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target: '#pictures_sheep'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },    \r\n            pictures_sheep:{\r\n                initial: 'prompt',\r\n                id: 'pictures_sheep',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: giraffe}})], target: '.match',},\r\n                    {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                    target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: giraffe}})], target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target:  '#pictures_giraffe'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },          \r\n            pictures_giraffe:{\r\n                initial: 'prompt',\r\n                id: 'pictures_giraffe',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: crocodile}})], target: '.match',},\r\n                    {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                    target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return { picture: crocodile}})],  target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target: '#pictures_crocodile'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },   \r\n            pictures_crocodile:{\r\n                initial: 'prompt',\r\n                id: 'pictures_crocodile',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return { picture: peacock}})],  target: '.match',},\r\n                    {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \r\n                    target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return { picture: peacock}})], target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target: '#pictures_peacock'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },  \r\n\r\n            pictures_peacock:{\r\n                initial: 'prompt',\r\n                id: 'pictures_peacock',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return {picture: Background}})],  target: '.match',},\r\n                    {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})], target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                    target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: [assign((context) => {return {picture: Background}})],\r\n                    target: '#quit_game'},\r\n    \r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: {target: '#pictures_summary'},\r\n                        SHOW: {target: '.show'}\r\n            },\r\n            ...Show_play()\r\n        },                                            \r\n        \r\n                                pictures_summary:{\r\n                                    initial: 'prompt',\r\n                                    id: 'pictures_summary',\r\n                                    on: {RECOGNISED:[\r\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \r\n                                        actions: [assign((context) => {return {picture: cat}})], target:'#pictures_animals_begin' },\r\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \r\n                                        target:'#which_game' },\r\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                                        target:'#exit_app' }, {target:'.nomatch'}],\r\n                                        },\r\n                                    ...sayAskTimeout(say('Well done! Would you like to repeat, or play another game?'))\r\n        \r\n        \r\n                    },\r\n\r\n\r\n        quit_game:{\r\n            initial: 'prompt',\r\n            id:'quit_game',\r\n            on: {ENDSPEECH: '#which_game'},\r\n            states: {\r\n                prompt:{entry: say('Exiting current game.')\r\n\r\n                }\r\n            }\r\n        },\r\n        exit_app:{\r\n            id: 'exit_app',\r\n            on: {ENDSPEECH: '#idle'},\r\n            entry: say('Thank you for playing and have a nice day!')\r\n        }\r\n}})\r\n\r\nimport Background from \"./Pictures_game/Background.jpg\";\r\nimport cat from \"./Pictures_game/cat.jpg\";\r\nimport dog from \"./Pictures_game/dog.jpeg\";\r\nimport fox from \"./Pictures_game/fox.jpg\";\r\nimport sheep from \"./Pictures_game/sheep.jpg\";\r\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\r\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\r\nimport peacock from \"./Pictures_game/peacock.jpg\";\r\n\r\nimport Monday from \"./Pictures_game/Monday.jpg\";\r\nimport Tuesday from \"./Pictures_game/Tuesday.jpg\";\r\nimport Wednesday from \"./Pictures_game/Wednesday.jpeg\";\r\nimport Thursday from \"./Pictures_game/Thursday.jpg\";\r\nimport Friday from \"./Pictures_game/Friday.jpg\";\r\nimport Saturday from \"./Pictures_game/Saturday.jpg\";\r\nimport Sunday from \"./Pictures_game/Sunday.jpg\";\r\n\r\nimport teacher from \"./Pictures_game/Teacher.jpeg\";\r\nimport doctor from \"./Pictures_game/Doctor.png\";\r\nimport builder from \"./Pictures_game/Builder.jpg\";\r\nimport lifeguard from \"./Pictures_game/Lifeguard.jpg\";\r\nimport actor from \"./Pictures_game/Actor.jpg\";\r\nimport engineer from \"./Pictures_game/Engineer.png\";\r\nimport garbage_man from \"./Pictures_game/Garbage_man.jpeg\";\r\n\r\nimport yellow from \"./Pictures_game/yellow.jpg\";\r\nimport red from \"./Pictures_game/red.jpg\";\r\nimport purple from \"./Pictures_game/purple.png\";\r\nimport brown from \"./Pictures_game/brown.jpg\";\r\nimport black from \"./Pictures_game/black.jpg\";\r\nimport white from \"./Pictures_game/white.jpg\";\r\nimport green from \"./Pictures_game/green.jpg\";\r\n\r\nimport go from \"./Pictures_game/go.png\";\r\nimport run from \"./Pictures_game/run.jpg\";\r\nimport eat from \"./Pictures_game/eat.jpg\";\r\nimport sleep from \"./Pictures_game/sleep.jpg\";\r\nimport write from \"./Pictures_game/write.jpg\";\r\nimport sing from \"./Pictures_game/sing.jpg\";\r\nimport drink from \"./Pictures_game/drink.jpg\";\r\n\r\nimport cousin from \"./Pictures_game/cousin.jpg\";\r\nimport brother from \"./Pictures_game/brother.jpeg\";\r\nimport sister from \"./Pictures_game/sister.jpg\";\r\nimport mum from \"./Pictures_game/mother.jpg\";\r\nimport dad from \"./Pictures_game/dad.jpg\";\r\nimport grandma_1 from \"./Pictures_game/grandma_1.jpg\";\r\nimport grandma_2 from \"./Pictures_game/grandma_2.jpg\";\r\n\r\nimport river from \"./Pictures_game/river.png\";\r\nimport mountain from \"./Pictures_game/mountain.jpg\";\r\nimport sea from \"./Pictures_game/sea.jpg\";\r\nimport forest from \"./Pictures_game/forest.jpg\";\r\nimport lake from \"./Pictures_game/lake.jpg\";\r\nimport cliff from \"./Pictures_game/cliff.jpg\";\r\nimport cave from \"./Pictures_game/cave.jpg\";\r\nimport { mapContext } from \"xstate/lib/utils\";\r\n"]},"metadata":{},"sourceType":"module"}