{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nconst promptReset = assign(context => {\n  return {\n    count: 0\n  };\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_this],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 15000\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'timeout_final'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say('Why are you silent'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Not working'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say('Sorry Im a mess today. Hmmmm'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nfunction Say_play(guessWord) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [say(guessWord), promptReset],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 10000\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 4,\n            target: 'reprompt0'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: [say(\"Sorry I'm a mess today. Hmmmm\")],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      almost: {\n        entry: say('You are correct, but you forgot something! Try agin'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      no_match: {\n        entry: say('Try again'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      }\n      /*            reprompt1: {\r\n                      entry: say('Pyderis'),\r\n                      on: {ENDSPEECH: 'ask'}\r\n                  },\r\n                  reprompt2: {\r\n                      entry: say('Sorry Im a mess today. Hmmmm'),\r\n                      on: {ENDSPEECH: 'ask'}\r\n                  },*/\n\n    }\n  };\n}\n\n_c = Say_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst animalsGrammar = {\n  \"katt\": {\n    cat: \"cat\"\n  },\n  \"en katt\": {\n    en_cat: \"cat\"\n  },\n  \"hund\": {\n    dog: \"hund\"\n  },\n  \"en hund\": {\n    en_dog: \"hund\"\n  },\n  \"fox\": {\n    fox: \"fox\"\n  },\n  \"en_fox\": {\n    en_fox: \"fox\"\n  }\n};\nconst grammar = {\n  \"start\": {\n    start: \"start\"\n  },\n  \"begin\": {\n    start: \"start\"\n  },\n  \"let's begin\": {\n    start: \"start\"\n  },\n  \"go back\": {\n    start: \"quit\"\n  },\n  \"back\": {\n    start: \"quit\"\n  },\n  \"return\": {\n    start: \"quit\"\n  },\n  \"quit\": {\n    start: \"quit\"\n  },\n  \"I wish to quit\": {\n    start: \"quit\"\n  },\n  \"skip\": {\n    skip: 'skip'\n  },\n  \"pass\": {\n    skip: 'skip'\n  },\n  \"skip this one\": {\n    skip: 'skip'\n  },\n  \"skip it\": {\n    skip: 'skip'\n  },\n  \"next\": {\n    skip: 'skip'\n  }\n};\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: 'prompt',\n      id: 'welcome',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('Welcome to Sweenglish! Which game would you like to play?'))),\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        },\n        /*{cond: (context) => context.intentResult === 'Quit',\r\n        target: 'cancel'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" \"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: 'wordplay_quit'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        },\n        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n        target: 'wordplay_again'},*/\n        {\n          cond: context => context.intentResult === 'Animals',\n          target: 'wordplay_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" \"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))),\n    wordplay_pregame: _objectSpread({\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (grammar[context.recResult] || {}),\n          target: \"#wordplay_begin\"\n        }, {\n          cond: context => \"quit\" in (grammar[context.recResult] || {}),\n          target: \"#wordplay_quit\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n    })))),\n    wordplay_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (grammar[context.recResult] || {}),\n          target: '.match'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: '#wordplay_dog'\n      }\n    }, Say_play('cat')),\n    wordplay_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (grammar[context.recResult] || {}),\n          target: '.match'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: '#wordplay_fox'\n      }\n    }, Say_play('dog')),\n    wordplay_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          target: '#welcome'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (grammar[context.recResult] || {}),\n          target: '#welcome'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: '#wordplay_dog'\n      }\n    }, Say_play('fox')),\n\n    /*\r\n    cond: (context) => context.gamecount != 7,\r\n        actions: [assign((context: SDSContext) => Game(item_for_game, context.recResult),\r\n        return {gamecount: context.gamecount+1)}                         \r\n    */\n    wordplay_summary: {\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        ENDSPEECH: 'wordplay_quit'\n      },\n      states: {\n        prompt: {\n          entry: say('I want to kill myself')\n        }\n      }\n    },\n    definitions: {\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        ENDSPEECH: '#welcome'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the definitions game! Going back.\")\n        }\n      }\n    }\n    /*\r\n    definitions_choice:{\r\n      initial: 'prompt',\r\n      states:{\r\n          prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n      }\r\n    },\r\n    definitions_invocation:{\r\n      initial: 'prompt',\r\n      id: 'wordplay_choice',\r\n      on:{\r\n          ENDSPEECH:[{\r\n              cond: (context) => context.intentResult === 'Help',\r\n              target: 'definitions_help'},\r\n              {cond: (context) => context.intentResult === 'Quit',\r\n              target: 'definitionsy_quit'},\r\n              {cond: (context) => context.intentResult === 'Definitions',\r\n              target: 'definitions_again'},\r\n              {cond: (context) => context.intentResult === 'Wordplay',\r\n              target: '#wordplay'},\r\n              {cond: (context) => context.intentResult === 'Animals',\r\n              target: 'definitions_animals'},\r\n              {cond: (context) => context.intentResult === 'Weekdays',\r\n              target: 'definitions_weekdays'},\r\n              {cond: (context) => context.intentResult === 'Occupation',\r\n              target: 'definitions_occupation'},\r\n              {cond: (context) => context.intentResult === 'Colours',\r\n              target: 'definitions_colours'},\r\n              {cond: (context) => context.intentResult === 'Verbs',\r\n              target: 'definitions_verbs'},\r\n              {cond: (context) => context.intentResult === 'Family',\r\n              target: 'definitions_family'},\r\n              {cond: (context) => context.intentResult === 'Geographical',\r\n              target: 'definitions_geographical'},\r\n            {target:'.nomatch'}]\r\n      },\r\n      states: {\r\n          prompt: {\r\n              entry: send((context) => ({\r\n                  type: \"SPEAK\",\r\n                  value: `${context.task}.`}))},\r\n          nomatch: {\r\n              entry: say(\"Unavailable right now.\"),\r\n              on: {ENDSPEECH: '#choose_game'}\r\n    cancel:{\r\n      initial: 'prompt',\r\n      on:{ ENDSPEECH: '#choose_game'\r\n      },\r\n      states:{\r\n          prompt:{\r\n              entry: say(\"Cancelling.\")\r\n          }\r\n      }\r\n      },\r\n    }*/\n\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Say_play\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/dmSwenglish.ts"],"names":["send","assign","promptReset","context","count","say","text","_context","type","value","listen","invoke_rasa","go_to_state","invoke","id","src","event","nluRequest","task","onDone","target","actions","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","reprompt0","reprompt1","reprompt2","Say_play","guessWord","almost","no_match","match","go_to_next","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","animalsGrammar","cat","en_cat","dog","en_dog","fox","en_fox","grammar","start","skip","dmMachine","start_point","CLICK","welcome","RECOGNISED","recResult","choice","tool","wordplay","wordplay_invocation","wordplay_choice","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_begin","NEXT_STATE","wordplay_dog","wordplay_fox","wordplay_summary","definitions"],"mappings":"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AAZ,OAHS;AAIbJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAE;AAACC,UAAAA,KAAK,EAAE7B,GAAG,CAAC,uBAAD;AAAX;AADL;AAJM,KAxMjB;AAiNJuF,IAAAA,WAAW,EAAE;AACT7D,MAAAA,OAAO,EAAE,QADA;AAETjB,MAAAA,EAAE,EAAE,aAFK;AAGTqB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAHK;AAITJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAE7B,GAAG,CAAC,8CAAD;AADP;AADJ;AAJE;AASX;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhRY;AAHwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport { mapContext } from \"xstate/lib/utils\";\r\nimport {game_vocab} from \"./definitions_and_words\"\r\n\r\nconst promptReset: Action<SDSContext, SDSEvent> = assign((context) => { return { count:0} })\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n \r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: go_to_state,\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: '#welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }  )}\r\n\r\n\r\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [promptReset, say_this],\r\n                on: { ENDSPEECH: 'ask'}},\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 15000})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\r\n                                {cond: (context) => context.count ===4, target: 'timeout_final'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: say('Why are you silent'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt1: {\r\n                entry: say('Not working'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say('Sorry Im a mess today. Hmmmm'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction Say_play(guessWord: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [say(guessWord), promptReset],\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 10000})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===4, target: 'reprompt0'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: [say(\"Sorry I'm a mess today. Hmmmm\")],\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            almost:{\r\n                entry: say('You are correct, but you forgot something! Try agin'),\r\n                on:{ENDSPEECH: 'ask'}\r\n            },\r\n            no_match: {\r\n                entry: say('Try again'),\r\n                on:{ENDSPEECH: 'ask'}\r\n            },\r\n            match: {\r\n                entry: say('Correct!'),\r\n                on: {ENDSPEECH:'go_to_next'}\r\n            },\r\n            go_to_next:{\r\n                entry: send('NEXT_STATE')\r\n            },\r\n/*            reprompt1: {\r\n                entry: say('Pyderis'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say('Sorry Im a mess today. Hmmmm'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },*/\r\n\r\n    }})}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst animalsGrammar: { [index: string]: {cat?: string, en_cat?:string, dog?:string, en_dog?:string, fox?:string, en_fox?:string}} ={\r\n    \"katt\" : {cat: \"cat\"},\r\n    \"en katt\" : {en_cat: \"cat\"},\r\n\r\n    \"hund\" : {dog: \"hund\"},\r\n    \"en hund\" : {en_dog: \"hund\"},\r\n\r\n    \"fox\": {fox: \"fox\"},\r\n    \"en_fox\": {en_fox: \"fox\"}\r\n}\r\n\r\nconst grammar: { [index: string]: {start?: string, skip?: string\r\n }} = {\r\n\r\n    \"start\": {start: \"start\"},\r\n    \"begin\": {start: \"start\"},\r\n    \"let's begin\": {start: \"start\"},\r\n    \"go back\": {start: \"quit\"},\r\n    \"back\": {start: \"quit\"},\r\n    \"return\": {start: \"quit\"},\r\n    \"quit\": {start: \"quit\"},\r\n    \"I wish to quit\": {start: \"quit\"},\r\n\r\n    \"skip\": {skip: 'skip'},\r\n    \"pass\": {skip: 'skip'},\r\n    \"skip this one\": {skip: 'skip'},\r\n    \"skip it\": {skip: 'skip'},\r\n    \"next\": {skip: 'skip'},\r\n\r\n}\r\n\r\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/ \r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            id: 'welcome',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'}],\r\n            TIMEOUT: '.timeout'},\r\n        ...sayAskTimeout(say('Welcome to Sweenglish! Which game would you like to play?'))\r\n        },\r\n\r\n        choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#tool')}\r\n            }\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            id: 'tool',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Definitions',\r\n                    target: '#definitions'},\r\n                    {cond: (context) => context.intentResult === 'Words',\r\n                    target: '#wordplay'},\r\n                    /*{cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'cancel'},*/\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: ` `}))},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#welcome'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        wordplay: {\r\n            initial: 'prompt',\r\n            id: 'wordplay',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: '#wordplay_invocation'}],\r\n                    TIMEOUT: '.timeout'\r\n            },\r\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))\r\n\r\n        },\r\n            wordplay_invocation:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_invocation',\r\n                states:{\r\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\r\n                }\r\n            },\r\n            wordplay_choice:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_choice',\r\n                on:{\r\n                    ENDSPEECH:[{\r\n                        cond: (context) => context.intentResult === 'Help',\r\n                        target: 'wordplay_help'},\r\n                        {cond: (context) => context.intentResult === 'Quit',\r\n                        target: 'wordplay_quit'},\r\n                        {cond: (context) => context.intentResult === 'Definitions',\r\n                        target: '#definitions'},\r\n                        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n                        target: 'wordplay_again'},*/\r\n                        {cond: (context) => context.intentResult === 'Animals',\r\n                        target: 'wordplay_pregame'},\r\n                        /*\r\n                        {cond: (context) => context.intentResult === 'Weekdays',\r\n                        target: 'wordplay_weekdays'},\r\n                        {cond: (context) => context.intentResult === 'Occupation',\r\n                        target: 'wordplay_occupation'},\r\n                        {cond: (context) => context.intentResult === 'Colours',\r\n                        target: 'wordplay_colours'},\r\n                        {cond: (context) => context.intentResult === 'Verbs',\r\n                        target: 'wordplay_verbs'},\r\n                        {cond: (context) => context.intentResult === 'Family',\r\n                        target: 'wordplay_family'},\r\n                        {cond: (context) => context.intentResult === 'Geographical',\r\n                        target: 'wordplay_geographical'},*/\r\n  \r\n                    {target:'.nomatch'}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: ` `}))},\r\n                    nomatch: {\r\n                        entry: say(\"Unavailable right now.\"),\r\n                        on: {ENDSPEECH: '#welcome'}\r\n                            \r\n                        }\r\n                            \r\n                    }\r\n    \r\n            },\r\n\r\n            wordplay_help:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_help',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: 'wordplay_invocation'},\r\n                    \r\n                    {target: \".nomatch\"}]\r\n                },\r\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\r\n            },\r\n            wordplay_quit:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_quit',\r\n                on: {ENDSPEECH: '#welcome'},\r\n               ...sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))\r\n            },\r\n            wordplay_pregame:{\r\n                initial: 'prompt',\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"start\" in (grammar[context.recResult] || {}),\r\n                        target: \"#wordplay_begin\"},\r\n                        {cond: (context) => \"quit\" in (grammar[context.recResult] || {}),\r\n                        target: \"#wordplay_quit\"},\r\n    \r\n                    { target: \".nomatch\" }]\r\n                },\r\n                ...sayAskTimeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`})))\r\n            },\r\n            wordplay_begin:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_begin',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), target: '.match',},\r\n                    {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (grammar[context.recResult] || {}), target: '.match'},\r\n\r\n                    {target:'.nomatch'}],\r\n                        NEXT_STATE: '#wordplay_dog',\r\n            },\r\n            ...Say_play('cat')\r\n        },\r\n        wordplay_dog:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_dog',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}), target: '.match',},\r\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (grammar[context.recResult] || {}), target: '.match'},\r\n\r\n                {target:'.nomatch'}],\r\n                    NEXT_STATE: '#wordplay_fox',\r\n        },\r\n        ...Say_play('dog')\r\n    },\r\n    wordplay_fox:{\r\n        initial: 'prompt',\r\n        id: 'wordplay_fox',\r\n        on: {   RECOGNISED:[\r\n            {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), target: '#welcome',},\r\n            {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), target: '.almost',},\r\n            {cond: (context) => \"skip\" in (grammar[context.recResult] || {}), target: '#welcome'},\r\n\r\n            {target:'.nomatch'}],\r\n                NEXT_STATE: '#wordplay_dog',\r\n    },\r\n    ...Say_play('fox')\r\n},                                   \r\n\r\n\r\n                /*\r\n                cond: (context) => context.gamecount != 7,\r\n                    actions: [assign((context: SDSContext) => Game(item_for_game, context.recResult),\r\n                    return {gamecount: context.gamecount+1)}                         \r\n                */\r\n            \r\n    \r\n            wordplay_summary:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_summary',\r\n                on: {ENDSPEECH: 'wordplay_quit'},\r\n                states:{\r\n                    prompt: {entry: say('I want to kill myself')}\r\n                }\r\n\r\n            },\r\n        definitions: {\r\n            initial: 'prompt',\r\n            id: 'definitions',\r\n            on: {ENDSPEECH: '#welcome'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the definitions game! Going back.\")\r\n                }\r\n            }\r\n        },/*\r\n        definitions_choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n            }\r\n        },\r\n        definitions_invocation:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_choice',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Help',\r\n                    target: 'definitions_help'},\r\n                    {cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'definitionsy_quit'},\r\n                    {cond: (context) => context.intentResult === 'Definitions',\r\n                    target: 'definitions_again'},\r\n                    {cond: (context) => context.intentResult === 'Wordplay',\r\n                    target: '#wordplay'},\r\n                    {cond: (context) => context.intentResult === 'Animals',\r\n                    target: 'definitions_animals'},\r\n                    {cond: (context) => context.intentResult === 'Weekdays',\r\n                    target: 'definitions_weekdays'},\r\n                    {cond: (context) => context.intentResult === 'Occupation',\r\n                    target: 'definitions_occupation'},\r\n                    {cond: (context) => context.intentResult === 'Colours',\r\n                    target: 'definitions_colours'},\r\n                    {cond: (context) => context.intentResult === 'Verbs',\r\n                    target: 'definitions_verbs'},\r\n                    {cond: (context) => context.intentResult === 'Family',\r\n                    target: 'definitions_family'},\r\n                    {cond: (context) => context.intentResult === 'Geographical',\r\n                    target: 'definitions_geographical'},\r\n\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.task}.`}))},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#choose_game'}\r\n        cancel:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: '#choose_game'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Cancelling.\")\r\n                }\r\n            }\r\n            },\r\n        }*/\r\n}})"]},"metadata":{},"sourceType":"module"}