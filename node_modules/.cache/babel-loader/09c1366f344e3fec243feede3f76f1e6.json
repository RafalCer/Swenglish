{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport { game_vocab } from \"./definitions_and_words\";\nconst promptReset = assign(context => {\n  return {\n    count: 0\n  };\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst cancel = actions.cancel;\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_this],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 20000,\n          id: 'timer'\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        id: 'idle',\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'timeout_final'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say(':et us give it one last try'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nfunction Say_play(say_word) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_word],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 20000,\n          id: 'timer2'\n        })]\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            target: 'reprompt'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt: {\n        entry: [say(\"Time is up!\")],\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      }\n    }\n  };\n}\n\n_c = Say_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst animalsGrammar = {\n  \"katt\": {\n    cat: \"cat\"\n  },\n  \"en katt\": {\n    en_cat: \"cat\"\n  },\n  \"hund\": {\n    dog: \"dog\"\n  },\n  \"en hund\": {\n    en_dog: \"dog\"\n  },\n  \"räv\": {\n    fox: \"fox\"\n  },\n  \"en räv\": {\n    en_fox: \"fox\"\n  },\n  \"får\": {\n    sheep: \"sheep\"\n  },\n  \"ett får\": {\n    ett_sheep: \"sheep\"\n  },\n  \"giraff\": {\n    giraffe: \"griffe\"\n  },\n  \"en giraff\": {\n    en_giraffe: \"giraffe\"\n  },\n  \"krokodil\": {\n    crocodile: \"crocodile\"\n  },\n  \"en krokodil\": {\n    en_crocodile: \"crocodile\"\n  },\n  \"påfågel\": {\n    peacock: \"peacock\"\n  },\n  \"en påfågel\": {\n    en_peacock: \"peacock\"\n  }\n};\nconst gameGrammar = {\n  \"start\": {\n    start: \"start\"\n  },\n  \"begin\": {\n    start: \"start\"\n  },\n  \"let's begin\": {\n    start: \"start\"\n  },\n  \"go back\": {\n    quit: \"quit\"\n  },\n  \"back\": {\n    quit: \"quit\"\n  },\n  \"return\": {\n    quit: \"quit\"\n  },\n  \"quit\": {\n    quit: \"quit\"\n  },\n  \"I wish to quit\": {\n    quit: \"quit\"\n  },\n  \"stop\": {\n    quit: \"quit\"\n  },\n  \"pause\": {\n    quit: \"quit\"\n  },\n  \"skip\": {\n    skip: 'skip'\n  },\n  \"pass\": {\n    skip: 'skip'\n  },\n  \"skip this one\": {\n    skip: 'skip'\n  },\n  \"skip it\": {\n    skip: 'skip'\n  },\n  \"next\": {\n    skip: 'skip'\n  },\n  \"repeat\": {\n    repeat: 'repeat'\n  },\n  \"again\": {\n    repeat: 'repeat'\n  },\n  \"restart\": {\n    repeat: 'repeat'\n  },\n  \"play again\": {\n    repeat: 'repeat'\n  },\n  \"same category\": {\n    repeat: 'repeat'\n  },\n  \"change game\": {\n    change_game: 'change_game'\n  },\n  \"change category\": {\n    change_game: 'change_game'\n  },\n  \"other category\": {\n    change_game: 'change_game'\n  },\n  \"categories\": {\n    change_game: 'change_game'\n  }\n};\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      id: 'welcome',\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Welcome to Sweenglish!')\n        }\n      }\n    },\n    which_game: _objectSpread({\n      id: 'which_game',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('Which game would you like to play?'))),\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        },\n        /*{cond: (context) => context.intentResult === 'Quit',\r\n        target: 'cancel'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        },\n        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n        target: 'wordplay_again'},*/\n        {\n          cond: context => context.intentResult === 'Animals',\n          target: 'wordplay_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" \"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))),\n    wordplay_pregame: _objectSpread({\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          target: \"#wordplay_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        TIMEOUT: '.timeout',\n        ENDSPEECH: '.ask'\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n    })))),\n    wordplay_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.english))),\n    wordplay_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.english))),\n    wordplay_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.english))),\n    wordplay_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.english))),\n    wordplay_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.english))),\n    wordplay_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.english))),\n    wordplay_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.english))),\n    wordplay_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#wordplay_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#exit_app'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))),\n    definitions: {\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        ENDSPEECH: '#welcome'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the definitions game! Going back.\")\n        }\n      }\n    },\n    quit_game: {\n      initial: 'prompt',\n      id: 'quit_game',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Exiting game.')\n        }\n      }\n    },\n    exit_app: {\n      id: 'exit_app',\n      on: {\n        ENDSPEECH: '#idle'\n      },\n      entry: say('Thank you for playing and have a nice day!')\n    }\n    /*\r\n    definitions_choice:{\r\n    initial: 'prompt',\r\n    states:{\r\n        prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n    }\r\n    },\r\n    definitions_invocation:{\r\n    initial: 'prompt',\r\n    id: 'wordplay_choice',\r\n    on:{\r\n        ENDSPEECH:[{\r\n            cond: (context) => context.intentResult === 'Help',\r\n            target: 'definitions_help'},\r\n            {cond: (context) => context.intentResult === 'Quit',\r\n            target: 'definitionsy_quit'},\r\n            {cond: (context) => context.intentResult === 'Definitions',\r\n            target: 'definitions_again'},\r\n            {cond: (context) => context.intentResult === 'Wordplay',\r\n            target: '#wordplay'},\r\n            {cond: (context) => context.intentResult === 'Animals',\r\n            target: 'definitions_animals'},\r\n            {cond: (context) => context.intentResult === 'Weekdays',\r\n            target: 'definitions_weekdays'},\r\n            {cond: (context) => context.intentResult === 'Occupation',\r\n            target: 'definitions_occupation'},\r\n            {cond: (context) => context.intentResult === 'Colours',\r\n            target: 'definitions_colours'},\r\n            {cond: (context) => context.intentResult === 'Verbs',\r\n            target: 'definitions_verbs'},\r\n            {cond: (context) => context.intentResult === 'Family',\r\n            target: 'definitions_family'},\r\n            {cond: (context) => context.intentResult === 'Geographical',\r\n            target: 'definitions_geographical'},\r\n          {target:'.nomatch'}]\r\n    },\r\n    states: {\r\n        prompt: {\r\n            entry: send((context) => ({\r\n                type: \"SPEAK\",\r\n                value: `${context.task}.`}))},\r\n        nomatch: {\r\n            entry: say(\"Unavailable right now.\"),\r\n            on: {ENDSPEECH: '#choose_game'}\r\n    cancel:{\r\n    initial: 'prompt',\r\n    on:{ ENDSPEECH: '#choose_game'\r\n    },\r\n    states:{\r\n        prompt:{\r\n            entry: say(\"Cancelling.\")\r\n        }\r\n    }\r\n    },\r\n    }*/\n\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Say_play\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/dmSwenglish.ts"],"names":["send","assign","actions","game_vocab","promptReset","context","count","say","text","_context","type","value","listen","cancel","invoke_rasa","go_to_state","invoke","id","src","event","nluRequest","task","onDone","target","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","reprompt0","reprompt1","reprompt2","Say_play","say_word","reprompt","almost","match","go_to_next","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","animalsGrammar","cat","en_cat","dog","en_dog","fox","en_fox","sheep","ett_sheep","giraffe","en_giraffe","crocodile","en_crocodile","peacock","en_peacock","gameGrammar","start","quit","skip","repeat","change_game","dmMachine","start_point","CLICK","welcome","which_game","RECOGNISED","recResult","choice","tool","wordplay","wordplay_invocation","wordplay_choice","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_animals_begin","NEXT_STATE","animals","english","wordplay_dog","wordplay_fox","wordplay_sheep","wordplay_giraffe","wordplay_crocodile","wordplay_peacock","wordplay_summary","definitions","quit_game","exit_app"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport { mapContext } from \"xstate/lib/utils\";\r\nimport {game_vocab} from \"./definitions_and_words\"\r\n\r\nconst promptReset: Action<SDSContext, SDSEvent> = assign((context) => { return { count:0} })\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n \r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst {cancel} = actions\r\n\r\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: go_to_state,\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: '#welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }  )}\r\n\r\n\r\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [promptReset, say_this],\r\n                on: { ENDSPEECH: 'ask'}},\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 20000, id: 'timer'})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                id: 'idle',\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\r\n                                {cond: (context) => context.count ===4, target: 'timeout_final'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: say(\" Doesn't look like I can hear you well. Please try again\"),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt1: {\r\n                entry: say('Sorry, still nothing.'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say(':et us give it one last try'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction Say_play(say_word: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: [promptReset, say_word],\r\n                on: {ENDSPEECH: 'ask'}},\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 20000, id:'timer2'})]\r\n            },\r\n            nomatch: {\r\n                entry: say(\"I'm afraid not! Try again!\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{target: 'reprompt'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt: {\r\n                entry: [say(\"Time is up!\")],\r\n                on: {ENDSPEECH: 'go_to_next'}\r\n            },\r\n            almost:{\r\n                entry: say(\"Right! But what is the correct article?\"),\r\n                on:{ENDSPEECH: 'ask'}\r\n            },\r\n            match: {\r\n                entry: say('Correct!'),\r\n                on: {ENDSPEECH:'go_to_next'}\r\n            },\r\n            go_to_next:{\r\n                entry: send('NEXT_STATE')\r\n            },\r\n    }})}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst animalsGrammar: { [index: string]: {cat?: string, en_cat?:string, dog?:string, en_dog?:string, fox?:string, en_fox?:string,  \r\nsheep?:string, ett_sheep?:string, peacock?: string, en_peacock?:string, crocodile?:string, en_crocodile?:string, giraffe?:string,\r\nen_giraffe?:string}} ={\r\n    \"katt\" : {cat: \"cat\"},\r\n    \"en katt\" : {en_cat: \"cat\"},\r\n\r\n    \"hund\" : {dog: \"dog\"},\r\n    \"en hund\" : {en_dog: \"dog\"},\r\n\r\n    \"räv\": {fox: \"fox\"},\r\n    \"en räv\": {en_fox: \"fox\"},\r\n\r\n    \"får\": {sheep: \"sheep\"},\r\n    \"ett får\": {ett_sheep: \"sheep\"},\r\n\r\n    \"giraff\": {giraffe: \"griffe\"},\r\n    \"en giraff\": {en_giraffe: \"giraffe\"},\r\n\r\n    \"krokodil\": {crocodile: \"crocodile\"},\r\n    \"en krokodil\": {en_crocodile: \"crocodile\"},\r\n\r\n    \"påfågel\": {peacock: \"peacock\"},\r\n    \"en påfågel\": {en_peacock: \"peacock\"}\r\n}\r\n\r\nconst gameGrammar: { [index: string]: {start?: string, quit?: string, skip?: string, repeat?: string, change_game?: string}} = {\r\n\r\n    \"start\": {start: \"start\"},\r\n    \"begin\": {start: \"start\"},\r\n    \"let's begin\": {start: \"start\"},\r\n\r\n    \"go back\": {quit: \"quit\"},\r\n    \"back\": {quit: \"quit\"},\r\n    \"return\": {quit: \"quit\"},\r\n    \"quit\": {quit: \"quit\"},\r\n    \"I wish to quit\": {quit: \"quit\"},\r\n    \"stop\": {quit: \"quit\"},\r\n    \"pause\": {quit: \"quit\"},\r\n\r\n    \"skip\": {skip: 'skip'},\r\n    \"pass\": {skip: 'skip'},\r\n    \"skip this one\": {skip: 'skip'},\r\n    \"skip it\": {skip: 'skip'},\r\n    \"next\": {skip: 'skip'},\r\n\r\n    \"repeat\": {repeat: 'repeat'},\r\n    \"again\": {repeat: 'repeat'},\r\n    \"restart\": {repeat: 'repeat'},\r\n    \"play again\": {repeat: 'repeat'},\r\n    \"same category\": {repeat: 'repeat'},\r\n\r\n    \"change game\": {change_game: 'change_game'},\r\n    \"change category\": {change_game: 'change_game'},\r\n    \"other category\": {change_game: 'change_game'},\r\n    \"categories\": {change_game: 'change_game'},\r\n\r\n}\r\n\r\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/ \r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            id: 'welcome',\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH:'which_game'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say('Welcome to Sweenglish!')\r\n                }\r\n                \r\n            }\r\n        },\r\n        which_game:{\r\n            id: 'which_game',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'}],\r\n            TIMEOUT: '.timeout'},\r\n        ...sayAskTimeout(say('Which game would you like to play?'))\r\n        },\r\n\r\n        choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#tool')}\r\n            }\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            id: 'tool',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Definitions',\r\n                    target: '#definitions'},\r\n                    {cond: (context) => context.intentResult === 'Words',\r\n                    target: '#wordplay'},\r\n                    /*{cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'cancel'},*/\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send('ENDSPEECH')},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#welcome'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        wordplay: {\r\n            initial: 'prompt',\r\n            id: 'wordplay',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: '#wordplay_invocation'}],\r\n                    TIMEOUT: '.timeout'\r\n            },\r\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))\r\n\r\n        },\r\n            wordplay_invocation:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_invocation',\r\n                states:{\r\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\r\n                }\r\n            },\r\n            wordplay_choice:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_choice',\r\n                on:{\r\n                    ENDSPEECH:[{\r\n                        cond: (context) => context.intentResult === 'Help',\r\n                        target: 'wordplay_help'},\r\n                        {cond: (context) => context.intentResult === 'Quit',\r\n                        target: '#quit_game'},\r\n                        {cond: (context) => context.intentResult === 'Definitions',\r\n                        target: '#definitions'},\r\n                        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n                        target: 'wordplay_again'},*/\r\n                        {cond: (context) => context.intentResult === 'Animals',\r\n                        target: 'wordplay_pregame'},\r\n                        /*\r\n                        {cond: (context) => context.intentResult === 'Weekdays',\r\n                        target: 'wordplay_weekdays'},\r\n                        {cond: (context) => context.intentResult === 'Occupation',\r\n                        target: 'wordplay_occupation'},\r\n                        {cond: (context) => context.intentResult === 'Colours',\r\n                        target: 'wordplay_colours'},\r\n                        {cond: (context) => context.intentResult === 'Verbs',\r\n                        target: 'wordplay_verbs'},\r\n                        {cond: (context) => context.intentResult === 'Family',\r\n                        target: 'wordplay_family'},\r\n                        {cond: (context) => context.intentResult === 'Geographical',\r\n                        target: 'wordplay_geographical'},*/\r\n  \r\n                    {target:'.nomatch'}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: ` `}))},\r\n                    nomatch: {\r\n                        entry: say(\"Unavailable right now.\"),\r\n                        on: {ENDSPEECH: '#welcome'}\r\n                            \r\n                        }\r\n                            \r\n                    }\r\n    \r\n            },\r\n\r\n            wordplay_help:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_help',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: 'wordplay_invocation'},\r\n                    \r\n                    {target: \".nomatch\"}]\r\n                },\r\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\r\n            },\r\n            wordplay_quit:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_quit',\r\n                on: {ENDSPEECH: '#welcome'},\r\n               ...sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))\r\n            },\r\n            wordplay_pregame:{\r\n                initial: 'prompt',\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\r\n                        target: \"#wordplay_animals_begin\"},\r\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                        target: \"#quit_game\"},\r\n                    { target: \".nomatch\" }],\r\n                    TIMEOUT: '.timeout',\r\n                    ENDSPEECH: '.ask'\r\n                },\r\n                ...sayAskTimeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`})))\r\n            },\r\n            wordplay_animals_begin:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_animals_begin',\r\n                on: {   RECOGNISED:[\r\n                    {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.match',},\r\n                    {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '.almost',},\r\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                    actions: cancel('timer2'),  target: '.go_to_next'},\r\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                    actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                    {actions: cancel('timer2'), target:'.nomatch'}],\r\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\r\n                        TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\r\n            },\r\n            ...Say_play(say(game_vocab.animals.cat.english))\r\n        },\r\n        wordplay_dog:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_dog',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'),target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.dog.english))\r\n        },\r\n        wordplay_fox:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_fox',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.fox.english))\r\n            },    \r\n        wordplay_sheep:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_sheep',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target:  '#wordplay_giraffe'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.sheep.english))\r\n        },          \r\n        wordplay_giraffe:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_giraffe',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.match',},\r\n                {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.giraffe.english))\r\n        },   \r\n        wordplay_crocodile:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_crocodile',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.match',},\r\n                {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.crocodile.english))\r\n        },      \r\n        wordplay_peacock:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_peacock',\r\n            on: {   RECOGNISED:[\r\n                {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\r\n                actions: cancel('timer2'),  target: '.match',},\r\n                {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.almost',},\r\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '.go_to_next'},\r\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \r\n                actions: cancel('timer2'), target: '#quit_game'},\r\n\r\n                {actions: cancel('timer2'), target:'.nomatch'}],\r\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\r\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\r\n        },\r\n        ...Say_play(say(game_vocab.animals.peacock.english))\r\n        },                                            \r\n    \r\n                            wordplay_summary:{\r\n                                initial: 'prompt',\r\n                                id: 'wordplay_summary',\r\n                                on: {RECOGNISED:[\r\n                                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \r\n                                    actions: cancel('timer2'), target:'#wordplay_animals_begin' },\r\n                                    {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \r\n                                    actions: cancel('timer2'), target:'#which_game' },\r\n                                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\r\n                                    actions: cancel('timer2'),  target:'#exit_app' }]},\r\n                               ...sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))\r\n\r\n\r\n            },\r\n        definitions: {\r\n            initial: 'prompt',\r\n            id: 'definitions',\r\n            on: {ENDSPEECH: '#welcome'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the definitions game! Going back.\")\r\n                }\r\n            }\r\n        },\r\n        quit_game:{\r\n            initial: 'prompt',\r\n            id:'quit_game',\r\n            on: {ENDSPEECH: '#which_game'},\r\n            states: {\r\n                prompt:{entry: say('Exiting game.')\r\n\r\n                }\r\n            }\r\n        },\r\n        exit_app:{\r\n            id: 'exit_app',\r\n            on: {ENDSPEECH: '#idle'},\r\n            entry: say('Thank you for playing and have a nice day!')\r\n        }\r\n            /*\r\n        definitions_choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n            }\r\n        },\r\n        definitions_invocation:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_choice',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Help',\r\n                    target: 'definitions_help'},\r\n                    {cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'definitionsy_quit'},\r\n                    {cond: (context) => context.intentResult === 'Definitions',\r\n                    target: 'definitions_again'},\r\n                    {cond: (context) => context.intentResult === 'Wordplay',\r\n                    target: '#wordplay'},\r\n                    {cond: (context) => context.intentResult === 'Animals',\r\n                    target: 'definitions_animals'},\r\n                    {cond: (context) => context.intentResult === 'Weekdays',\r\n                    target: 'definitions_weekdays'},\r\n                    {cond: (context) => context.intentResult === 'Occupation',\r\n                    target: 'definitions_occupation'},\r\n                    {cond: (context) => context.intentResult === 'Colours',\r\n                    target: 'definitions_colours'},\r\n                    {cond: (context) => context.intentResult === 'Verbs',\r\n                    target: 'definitions_verbs'},\r\n                    {cond: (context) => context.intentResult === 'Family',\r\n                    target: 'definitions_family'},\r\n                    {cond: (context) => context.intentResult === 'Geographical',\r\n                    target: 'definitions_geographical'},\r\n\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.task}.`}))},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#choose_game'}\r\n        cancel:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: '#choose_game'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Cancelling.\")\r\n                }\r\n            }\r\n            },\r\n        }*/\r\n}})"]},"metadata":{},"sourceType":"module"}