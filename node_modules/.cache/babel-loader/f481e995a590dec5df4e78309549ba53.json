{"ast":null,"code":"import { send, assign, actions } from \"xstate\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction Game(answer, RecResult) {\n  let score = 0;\n  let resArray = RecResult.split(\" \");\n  resArray.forEach(word => {\n    if (word == answer.article) {\n      score += 0.25;\n    } else if (word == answer.sv) {\n      score += 0.75;\n    }\n  });\n  return score;\n}\n\n_c = Game;\nconst animals_list = ['cat', 'dog'];\n\nfunction say_ask_nomatch_timeout(say_this, help_message) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say_this,\n        on: {\n          ENDSPEECH: 'ask1'\n        }\n      },\n      ask1: {\n        entry: [send('LISTEN'), send('TIMEOUT1', {\n          delay: 4500,\n          id: 'time1'\n        })]\n      },\n      ask2: {\n        entry: [send('LISTEN'), send('TIMEOUT2', {\n          delay: 4500,\n          id: 'time2'\n        })]\n      },\n      ask3: {\n        entry: [send('LISTEN'), send('TIMEOUT3', {\n          delay: 4500,\n          id: 'time3'\n        })]\n      },\n      ask4: {\n        entry: [send('LISTEN'), send('TIMEOUT4', {\n          delay: 4500,\n          id: 'time4'\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout1: {\n        entry: say('I did not hear you this time, please speak louder.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout2: {\n        entry: say('I still cannot hear you, please try again.'),\n        on: {\n          ENDSPEECH: \"ask3\"\n        }\n      },\n      timeout3: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: \"ask4\"\n        }\n      },\n      timeout4: {\n        //Add idle state after 3 reprompts//\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      to_do: {\n        entry: say('Sorry, this tool has not been developed yet. I will now return to idle state.'),\n        on: {\n          ENDSPEECH: 'idle'\n        }\n      },\n      specific: {\n        entry: say(\"Please be more specific\"),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      canceled: {\n        entry: say(\"Your appointment has been canceled. I will now returnto idle state.\")\n      },\n      help: {\n        entry: say(help_message),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst grammar = {\n  \"help\": {\n    help: \"help\"\n  },\n  \"help me\": {\n    help: \"help\"\n  },\n  \"Help\": {\n    help: \"help\"\n  },\n  \"Help me\": {\n    help: \"help\"\n  }\n};\nconst boolean_grammar = {\n  \"yes\": {\n    agreement: Boolean(true)\n  },\n  \"of course\": {\n    agreement: Boolean(true)\n  },\n  \"sure\": {\n    agreement: Boolean(true)\n  },\n  \"absolutely\": {\n    agreement: Boolean(true)\n  },\n  \"yes please\": {\n    agreement: Boolean(true)\n  },\n  \"no\": {\n    disagreement: Boolean(false)\n  },\n  \"no way\": {\n    disagreement: Boolean(false)\n  },\n  \"absolutely not\": {\n    disagreement: Boolean(false)\n  },\n  \"never\": {\n    disagreement: Boolean(false)\n  },\n  \"maybe\": {\n    uncertain: \"unsure\"\n  },\n  \"perhaps\": {\n    uncertain: \"unsure\"\n  },\n  \"I don't know\": {\n    uncertain: \"unsure\"\n  },\n  \"probably\": {\n    uncertain: \"unsure\"\n  }\n};\nconst cancel = actions.cancel;\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'choose_game'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the Swenglish app. If you speak English and want to learn some basic Swedish - you've chosen the right app!\")\n        }\n      }\n    },\n    choose_game: {\n      id: 'make_a_choice',\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Which game would you like to play? Your options for are: wordplay and definitions game.\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, could you repeat?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        }\n      }\n    },\n    choice: {\n      invoke: {\n        id: 'rasaApi',\n        src: (context, event) => nluRequest(context.task),\n        onDone: {\n          target: 'tool',\n          actions: [assign((context, event) => {\n            return {\n              intentResult: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'choose_game',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: 'definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay'\n        }, {\n          cond: context => context.intentResult === 'Cancel',\n          target: 'cancel'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Ok, let's see if I can help you with \".concat(context.task, \".\")\n          }))\n        },\n        nomatch: {\n          entry: say(\"Excuse me, I haven't yet learned such task. Let's try again.\"),\n          on: {\n            ENDSPEECH: '#make_a_choice'\n          }\n        }\n      }\n    },\n    definitions: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: '#choice_of_tool'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the definitions game! Going back.\")\n        }\n      }\n    },\n    wordplay: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: '#choice_of_tool'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the wordplay game! Going back.\")\n        }\n      }\n    },\n    cancel: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: '#choice_of_tool'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Cancelling.\")\n        }\n      }\n    }\n  }\n};\n/*\r\n            introduction: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                        actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"day\"},\r\n\r\n                        {\r\n                        cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"\r\n                        },\r\n\r\n                    {target: \".nomatch\" }],\r\n                    \r\n                        TIMEOUT1: '.timeout1',\r\n                        TIMEOUT2: '.timeout2',\r\n                        TIMEOUT3: '.timeout3',\r\n                        TIMEOUT4: '.timeout4'\r\n                    \r\n                },\r\n                ...say_ask_nomatch_timeout(say('Who are you meeting with?'), \"Please specify the name of the person you are planning to meet up with. Pick someone from your contacts list.\")\r\n            },\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: [assign((context) => {return{ day: grammar[context.recResult].day}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"length\"\r\n                    },\r\n\r\n                    {\r\n                        cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"\r\n                    },\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('On which day is your meating?'), \"You need to specify the day on which you meeting is to be held. Please pick a day of the week. \") //Can add name specification\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target:\".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n\r\n                    },\r\n                \r\n                    ...say_ask_nomatch_timeout(say('Will it take the whole day?'), \"You need to specify whether your meeting will take the whole day so that I can book it accordingly. Please answer with yes or no.\")\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return{ time: grammar[context.recResult].time}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \"repetition\"},\r\n\r\n                    {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"\r\n                    }],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('At what time is your meeting?'), \"You need to specify the time when your meeting will start so that I can book it accordingly. Please tell me the time in military notation or, in other words, 24-hours format.\")\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} for the whole day?`})), \r\n                    \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm the meeting.\")\r\n                },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        \r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                     \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm it.\") \r\n                },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                     RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".to_do\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".idle\"},\r\n                        {\r\n                        cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('Your appointment has been scheduled! Do you want me to add it to your to do item?'), \r\n                \"The appointment tool has not yet been developed, and I only need to ask this as a formality, please say yes.\")\r\n                }\r\n            },\r\n        }\r\n)\r\n    */\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/dmSwenglish.ts"],"names":["send","assign","actions","say","text","_context","type","value","listen","Game","answer","RecResult","score","resArray","split","forEach","word","article","sv","animals_list","say_ask_nomatch_timeout","say_this","help_message","initial","states","prompt","entry","on","ENDSPEECH","ask1","delay","id","ask2","ask3","ask4","nomatch","timeout1","timeout2","timeout3","timeout4","idle","to_do","specific","canceled","help","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","grammar","boolean_grammar","agreement","Boolean","disagreement","uncertain","cancel","dmMachine","start_point","CLICK","welcome","choose_game","RECOGNISED","context","task","recResult","target","ask","choice","invoke","src","event","onDone","intentResult","intent","name","console","log","onError","tool","cond","definitions","wordplay"],"mappings":"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":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\n\r\nfunction Game(answer: any, RecResult: string){\r\n    let score = 0;\r\n    let resArray = RecResult.split(\" \");\r\n    resArray.forEach( word => \r\n        {if (word == answer.article) {(score += 0.25)}\r\n        else if (word == answer.sv) {score += 0.75}\r\n        })\r\n        return(score)\r\n}\r\n\r\nconst animals_list = ['cat', 'dog']\r\n\r\nfunction say_ask_nomatch_timeout(say_this: Action<SDSContext, SDSEvent>, help_message: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say_this,\r\n\r\n                on: { ENDSPEECH: 'ask1' }\r\n            },\r\n            ask1: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT1', {delay: 4500, id: 'time1'})]\r\n            },\r\n            ask2: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT2', {delay: 4500, id: 'time2'})]\r\n            },\r\n            ask3: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT3', {delay: 4500, id: 'time3'})]\r\n            },\r\n            ask4: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT4', {delay: 4500, id: 'time4'})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            timeout1: {\r\n                entry: say('I did not hear you this time, please speak louder.'),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            timeout2: {\r\n                entry: say('I still cannot hear you, please try again.'),\r\n                on: {ENDSPEECH: \"ask3\"}\r\n            },\r\n            timeout3: {\r\n                entry: say('Sorry, still nothing.'),\r\n                on: {ENDSPEECH: \"ask4\"}\r\n            },\r\n            timeout4: {\r\n                //Add idle state after 3 reprompts//\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            to_do:{\r\n                entry: say('Sorry, this tool has not been developed yet. I will now return to idle state.'),\r\n                on: {ENDSPEECH: 'idle'}\r\n            },\r\n            specific:{\r\n                entry: say(\"Please be more specific\"),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            canceled:{\r\n                entry: say(\"Your appointment has been canceled. I will now returnto idle state.\")\r\n            },\r\n            help:{\r\n                entry: say(help_message),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst grammar: { [index: string]: {help?: string } } = {\r\n\r\n    \"help\": {help: \"help\"},\r\n    \"help me\": {help: \"help\"},\r\n    \"Help\": {help: \"help\"},\r\n    \"Help me\": {help: \"help\"},\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\nconst {cancel} = actions\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: 'choose_game'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the Swenglish app. If you speak English and want to learn some basic Swedish - you've chosen the right app!\")\r\n                }\r\n            }\r\n        },\r\n        choose_game:{\r\n            id: 'make_a_choice',\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'},\r\n                \r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt: {\r\n                    entry: say(\"Which game would you like to play? Your options for are: wordplay and definitions game.\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: { entry: say(\"Sorry, could you repeat?\"),\r\n                on: {ENDSPEECH: 'ask'}}\r\n            }\r\n        },\r\n        choice:{\r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: 'tool',\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: 'choose_game',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Definitions',\r\n                    target: 'definitions'},\r\n                    {cond: (context) => context.intentResult === 'Wordplay',\r\n                    target: 'wordplay'},\r\n                    {cond: (context) => context.intentResult === 'Cancel',\r\n                    target: 'cancel'},\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Ok, let's see if I can help you with ${context.task}.`}))},\r\n                nomatch: {\r\n                    entry: say(\"Excuse me, I haven't yet learned such task. Let's try again.\"),\r\n                    on: {ENDSPEECH: '#make_a_choice'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        definitions: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: '#choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the definitions game! Going back.\")\r\n                }\r\n            }\r\n        },\r\n        wordplay: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: '#choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the wordplay game! Going back.\")\r\n                }\r\n            }\r\n        },\r\n        cancel:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: '#choice_of_tool'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Cancelling.\")\r\n                }\r\n            }\r\n            },\r\n        }\r\n})\r\n/*\r\n            introduction: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                        actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"day\"},\r\n\r\n                        {\r\n                        cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"\r\n                        },\r\n\r\n                    {target: \".nomatch\" }],\r\n                    \r\n                        TIMEOUT1: '.timeout1',\r\n                        TIMEOUT2: '.timeout2',\r\n                        TIMEOUT3: '.timeout3',\r\n                        TIMEOUT4: '.timeout4'\r\n                    \r\n                },\r\n                ...say_ask_nomatch_timeout(say('Who are you meeting with?'), \"Please specify the name of the person you are planning to meet up with. Pick someone from your contacts list.\")\r\n            },\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: [assign((context) => {return{ day: grammar[context.recResult].day}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"length\"\r\n                    },\r\n\r\n                    {\r\n                        cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"\r\n                    },\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('On which day is your meating?'), \"You need to specify the day on which you meeting is to be held. Please pick a day of the week. \") //Can add name specification\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target:\".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n\r\n                    },\r\n                \r\n                    ...say_ask_nomatch_timeout(say('Will it take the whole day?'), \"You need to specify whether your meeting will take the whole day so that I can book it accordingly. Please answer with yes or no.\")\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return{ time: grammar[context.recResult].time}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \"repetition\"},\r\n\r\n                    {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"\r\n                    }],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('At what time is your meeting?'), \"You need to specify the time when your meeting will start so that I can book it accordingly. Please tell me the time in military notation or, in other words, 24-hours format.\")\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} for the whole day?`})), \r\n                    \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm the meeting.\")\r\n                },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        \r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                     \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm it.\") \r\n                },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                     RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".to_do\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".idle\"},\r\n                        {\r\n                        cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('Your appointment has been scheduled! Do you want me to add it to your to do item?'), \r\n                \"The appointment tool has not yet been developed, and I only need to ask this as a formality, please say yes.\")\r\n                }\r\n            },\r\n        }\r\n)\r\n    */"]},"metadata":{},"sourceType":"module"}