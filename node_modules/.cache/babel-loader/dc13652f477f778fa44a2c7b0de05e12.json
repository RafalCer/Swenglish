{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { game_vocab } from \"./definitions_and_words\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction shiftList(list) {\n  let item;\n  item = list.shift();\n  return {\n    item\n  };\n}\n\nfunction Game(correct, input) {\n  let score = 0;\n  let resArray = input.split(\" \");\n  resArray.forEach(word => {\n    if (word == correct.article) {\n      score += 0.25;\n    } else if (word == correct.sv) {\n      score += 0.75;\n    }\n  });\n  return score;\n}\n\n_c = Game;\nlet score = 0;\nlet final_score = 0;\nlet gamecount = 0;\nconst max_index = 6;\n/*function PlayGame(words_list: Array<string>, input: string){\r\n    for (index = 0; index < 7; index++) \r\n{\r\n        one_word = words_list[index]\r\n        Game(one_word, input)\r\n\r\n    } \r\n}\r\n*/\n\nconst animals_list = ['cat', 'dog', 'fox', 'sheep', 'giraffe', 'crocodile', 'peacock'];\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say_this,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 3500\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'idle'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say('Why are you silent'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Pyderis'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say('Sorry Im a mess today. Hmmmm'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nlet item_from_list = animals_list[0];\nlet path_to_item = \"animals.\".concat(item_from_list); //let path_to_swedish = `animals.${item}.sv`\n\nfunction index(obj, i) {\n  return obj[i];\n}\n\nlet item_for_game = path_to_item.split('.').reduce(index, game_vocab); //let item_in_swedish = path_to_item.split('.').reduce(index, game_vocab)\n\nfunction Say_play(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: _objectSpread(_objectSpread({\n        entry: say(item_from_list)\n      }, shiftList(animals_list)), {}, {\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }),\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 7000\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'idle'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say('Why are you silent'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Pyderis'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say('Sorry Im a mess today. Hmmmm'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\n_c2 = Say_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst grammar = {\n  \"start\": {\n    start: \"start\"\n  },\n  \"begin\": {\n    start: \"start\"\n  },\n  \"let's begin\": {\n    start: \"start\"\n  },\n  \"go back\": {\n    start: \"quit\"\n  },\n  \"back\": {\n    start: \"quit\"\n  },\n  \"return\": {\n    start: \"quit\"\n  },\n  \"quit\": {\n    start: \"quit\"\n  },\n  \"I wish to quit\": {\n    start: \"quit\"\n  }\n};\nconst boolean_grammar = {\n  \"yes\": {\n    agreement: Boolean(true)\n  },\n  \"of course\": {\n    agreement: Boolean(true)\n  },\n  \"sure\": {\n    agreement: Boolean(true)\n  },\n  \"absolutely\": {\n    agreement: Boolean(true)\n  },\n  \"yes please\": {\n    agreement: Boolean(true)\n  },\n  \"no\": {\n    disagreement: Boolean(false)\n  },\n  \"no way\": {\n    disagreement: Boolean(false)\n  },\n  \"absolutely not\": {\n    disagreement: Boolean(false)\n  },\n  \"never\": {\n    disagreement: Boolean(false)\n  },\n  \"maybe\": {\n    uncertain: \"unsure\"\n  },\n  \"perhaps\": {\n    uncertain: \"unsure\"\n  },\n  \"I don't know\": {\n    uncertain: \"unsure\"\n  },\n  \"probably\": {\n    uncertain: \"unsure\"\n  }\n};\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: 'prompt',\n      id: 'welcome',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('Welcome to Sweenglish! Which game would you like to play?'))),\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        },\n        /*{cond: (context) => context.intentResult === 'Quit',\r\n        target: 'cancel'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" \"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start. Alternatively, say quit - if you want to quit or change the game, or\\\r\n                     help - if you would like to hear the instructions and available categories.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: 'wordplay_quit'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        },\n        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n        target: 'wordplay_again'},*/\n        {\n          cond: context => context.intentResult === 'Animals',\n          target: 'wordplay_pregame'\n        },\n        /*\r\n        {cond: (context) => context.intentResult === 'Weekdays',\r\n        target: 'wordplay_weekdays'},\r\n        {cond: (context) => context.intentResult === 'Occupation',\r\n        target: 'wordplay_occupation'},\r\n        {cond: (context) => context.intentResult === 'Colours',\r\n        target: 'wordplay_colours'},\r\n        {cond: (context) => context.intentResult === 'Verbs',\r\n        target: 'wordplay_verbs'},\r\n        {cond: (context) => context.intentResult === 'Family',\r\n        target: 'wordplay_family'},\r\n        {cond: (context) => context.intentResult === 'Geographical',\r\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" \"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))),\n    wordplay_pregame: _objectSpread({\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (grammar[context.recResult] || {}),\n          target: \"wordplay_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (grammar[context.recResult] || {}),\n          target: \"#wordplay_quit\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n    })))),\n    wordplay_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => context.gamecount != 7,\n          actions: assign(context => {\n            Game(item_for_game, context.recResult);\n            return {\n              gamecount: context.gamecount + 1\n            };\n          }),\n          target: '.prompt'\n        }],\n\n        /*\r\n        cond: (context) => context.gamecount != 7,\r\n            actions: [assign((context: SDSContext) => Game(item_for_game, context.recResult),\r\n            return {gamecount: context.gamecount+1)}                         \r\n        */\n        TIMEOUT: '.timeout',\n        ENDGAME: '#wordplay_summary'\n      }\n    }, Say_play('alll')),\n    wordplay_summary: {\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        ENDSPEECH: 'wordplay_quit'\n      },\n      states: {\n        prompt: {\n          entry: say('I want to kill myself')\n        }\n      }\n    },\n    definitions: {\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        ENDSPEECH: '#welcome'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the definitions game! Going back.\")\n        }\n      }\n    }\n    /*\r\n    definitions_choice:{\r\n      initial: 'prompt',\r\n      states:{\r\n          prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n      }\r\n    },\r\n    definitions_invocation:{\r\n      initial: 'prompt',\r\n      id: 'wordplay_choice',\r\n      on:{\r\n          ENDSPEECH:[{\r\n              cond: (context) => context.intentResult === 'Help',\r\n              target: 'definitions_help'},\r\n              {cond: (context) => context.intentResult === 'Quit',\r\n              target: 'definitionsy_quit'},\r\n              {cond: (context) => context.intentResult === 'Definitions',\r\n              target: 'definitions_again'},\r\n              {cond: (context) => context.intentResult === 'Wordplay',\r\n              target: '#wordplay'},\r\n              {cond: (context) => context.intentResult === 'Animals',\r\n              target: 'definitions_animals'},\r\n              {cond: (context) => context.intentResult === 'Weekdays',\r\n              target: 'definitions_weekdays'},\r\n              {cond: (context) => context.intentResult === 'Occupation',\r\n              target: 'definitions_occupation'},\r\n              {cond: (context) => context.intentResult === 'Colours',\r\n              target: 'definitions_colours'},\r\n              {cond: (context) => context.intentResult === 'Verbs',\r\n              target: 'definitions_verbs'},\r\n              {cond: (context) => context.intentResult === 'Family',\r\n              target: 'definitions_family'},\r\n              {cond: (context) => context.intentResult === 'Geographical',\r\n              target: 'definitions_geographical'},\r\n            {target:'.nomatch'}]\r\n      },\r\n      states: {\r\n          prompt: {\r\n              entry: send((context) => ({\r\n                  type: \"SPEAK\",\r\n                  value: `${context.task}.`}))},\r\n          nomatch: {\r\n              entry: say(\"Unavailable right now.\"),\r\n              on: {ENDSPEECH: '#choose_game'}\r\n    cancel:{\r\n      initial: 'prompt',\r\n      on:{ ENDSPEECH: '#choose_game'\r\n      },\r\n      states:{\r\n          prompt:{\r\n              entry: say(\"Cancelling.\")\r\n          }\r\n      }\r\n      },\r\n    }*/\n\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Say_play\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/dmSwenglish.ts"],"names":["send","assign","game_vocab","say","text","_context","type","value","listen","shiftList","list","item","shift","Game","correct","input","score","resArray","split","forEach","word","article","sv","final_score","gamecount","max_index","animals_list","invoke_rasa","go_to_state","invoke","id","src","context","event","nluRequest","task","onDone","target","actions","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","count","reprompt0","reprompt1","reprompt2","item_from_list","path_to_item","index","obj","i","item_for_game","reduce","Say_play","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","grammar","start","boolean_grammar","agreement","Boolean","disagreement","uncertain","dmMachine","start_point","CLICK","welcome","RECOGNISED","recResult","choice","tool","wordplay","wordplay_invocation","wordplay_choice","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_animals_begin","ENDGAME","wordplay_summary","definitions"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport { mapContext } from \"xstate/lib/utils\";\r\nimport {game_vocab} from \"./definitions_and_words\"\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n \r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction shiftList(list: Array<string>) {\r\n    let item\r\n    item = list.shift()\r\n    return{\r\n        item\r\n    }\r\n}\r\n\r\nfunction Game(correct: any, input: string){\r\n    let score = 0;\r\n    let resArray = input.split(\" \");\r\n    resArray.forEach( word => \r\n        {if (word == correct.article) {(score += 0.25)}\r\n        else if (word == correct.sv) {score += 0.75}\r\n        })\r\n        return(score)\r\n}\r\n\r\nlet score = 0\r\nlet final_score = 0\r\nlet gamecount = 0\r\nconst max_index = 6\r\n\r\n/*function PlayGame(words_list: Array<string>, input: string){\r\n    for (index = 0; index < 7; index++) \r\n{\r\n        one_word = words_list[index]\r\n        Game(one_word, input)\r\n\r\n    } \r\n}\r\n*/\r\nconst animals_list = ['cat', 'dog', 'fox', 'sheep', 'giraffe', 'crocodile', 'peacock' ]\r\n\r\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: go_to_state,\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: '#welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }  )}\r\n\r\n\r\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say_this,\r\n\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 3500})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\r\n                                {cond: (context) => context.count ===4, target: 'idle'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: say('Why are you silent'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt1: {\r\n                entry: say('Pyderis'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say('Sorry Im a mess today. Hmmmm'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nlet item_from_list = animals_list[0]\r\nlet path_to_item = `animals.${item_from_list}`\r\n//let path_to_swedish = `animals.${item}.sv`\r\n\r\n\r\nfunction index(obj:any,i:any) {return obj[i]}\r\nlet item_for_game = path_to_item.split('.').reduce(index, game_vocab)\r\n//let item_in_swedish = path_to_item.split('.').reduce(index, game_vocab)\r\n\r\n\r\n\r\nfunction Say_play(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(item_from_list),\r\n                ...shiftList(animals_list),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            ask: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 7000})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, please repeat.'),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            timeout_final: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            timeout: {\r\n                initial: 'prompt',\r\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\r\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\r\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\r\n                                {cond: (context) => context.count ===4, target: 'idle'}]},\r\n                states:{\r\n                    prompt: {\r\n                        entry: send('TIMEOUT')\r\n                    }\r\n                }\r\n            },\r\n            reprompt0: {\r\n                entry: say('Why are you silent'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt1: {\r\n                entry: say('Pyderis'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n            reprompt2: {\r\n                entry: say('Sorry Im a mess today. Hmmmm'),\r\n                on: {ENDSPEECH: 'ask'}\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst grammar: { [index: string]: {start?: string } } = {\r\n\r\n    \"start\": {start: \"start\"},\r\n    \"begin\": {start: \"start\"},\r\n    \"let's begin\": {start: \"start\"},\r\n    \"go back\": {start: \"quit\"},\r\n    \"back\": {start: \"quit\"},\r\n    \"return\": {start: \"quit\"},\r\n    \"quit\": {start: \"quit\"},\r\n    \"I wish to quit\": {start: \"quit\"},\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\n/*const reset: Action<SDSContext, SDSEvent> = assign((context) => {return{ score: 0}})*/ \r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            id: 'welcome',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'}],\r\n            TIMEOUT: '.timeout'},\r\n        ...sayAskTimeout(say('Welcome to Sweenglish! Which game would you like to play?'))\r\n        },\r\n\r\n        choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#tool')}\r\n            }\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            id: 'tool',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Definitions',\r\n                    target: '#definitions'},\r\n                    {cond: (context) => context.intentResult === 'Words',\r\n                    target: '#wordplay'},\r\n                    /*{cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'cancel'},*/\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: ` `}))},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#welcome'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        wordplay: {\r\n            initial: 'prompt',\r\n            id: 'wordplay',\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: '#wordplay_invocation'}],\r\n                    TIMEOUT: '.timeout'\r\n            },\r\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start. Alternatively, say quit - if you want to quit or change the game, or\\\r\n                     help - if you would like to hear the instructions and available categories.\"))\r\n\r\n        },\r\n            wordplay_invocation:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_invocation',\r\n                states:{\r\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\r\n                }\r\n            },\r\n            wordplay_choice:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_choice',\r\n                on:{\r\n                    ENDSPEECH:[{\r\n                        cond: (context) => context.intentResult === 'Help',\r\n                        target: 'wordplay_help'},\r\n                        {cond: (context) => context.intentResult === 'Quit',\r\n                        target: 'wordplay_quit'},\r\n                        {cond: (context) => context.intentResult === 'Definitions',\r\n                        target: '#definitions'},\r\n                        /*{cond: (context) => context.intentResult === 'Wordplay',\r\n                        target: 'wordplay_again'},*/\r\n                        {cond: (context) => context.intentResult === 'Animals',\r\n                        target: 'wordplay_pregame'},\r\n                        /*\r\n                        {cond: (context) => context.intentResult === 'Weekdays',\r\n                        target: 'wordplay_weekdays'},\r\n                        {cond: (context) => context.intentResult === 'Occupation',\r\n                        target: 'wordplay_occupation'},\r\n                        {cond: (context) => context.intentResult === 'Colours',\r\n                        target: 'wordplay_colours'},\r\n                        {cond: (context) => context.intentResult === 'Verbs',\r\n                        target: 'wordplay_verbs'},\r\n                        {cond: (context) => context.intentResult === 'Family',\r\n                        target: 'wordplay_family'},\r\n                        {cond: (context) => context.intentResult === 'Geographical',\r\n                        target: 'wordplay_geographical'},*/\r\n  \r\n                    {target:'.nomatch'}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: ` `}))},\r\n                    nomatch: {\r\n                        entry: say(\"Unavailable right now.\"),\r\n                        on: {ENDSPEECH: '#welcome'}\r\n                            \r\n                        }\r\n                            \r\n                    }\r\n    \r\n            },\r\n\r\n            wordplay_help:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_help',\r\n                on: {\r\n                    RECOGNISED:[{\r\n                        actions: assign((context) => { return { task: context.recResult } }),\r\n                        target: 'wordplay_invocation'},\r\n                    \r\n                    {target: \".nomatch\"}]\r\n                },\r\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\r\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Geographical terms. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\r\n                        Where Be mindful of articles: you will receive more points if you also specify the article if you're asked about a noun. You have seven seconds for every question.\\\r\n                        You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\r\n            },\r\n            wordplay_quit:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_quit',\r\n                on: {ENDSPEECH: '#welcome'},\r\n               ...sayAskTimeout(say(\"Quitting Wordplay. Choose another game. \"))\r\n            },\r\n            wordplay_pregame:{\r\n                initial: 'prompt',\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"start\" in (grammar[context.recResult] || {}),\r\n                        target: \"wordplay_animals_begin\"},\r\n                        {cond: (context) => \"quit\" in (grammar[context.recResult] || {}),\r\n                        target: \"#wordplay_quit\"},\r\n    \r\n                    { target: \".nomatch\" }]\r\n                },\r\n                ...sayAskTimeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`})))\r\n            },\r\n            wordplay_animals_begin:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_animals_begin',\r\n                on: {   RECOGNISED:[{ \r\n                    \r\n                    cond: (context: SDSContext) => context.gamecount != 7,\r\n                    actions: assign((context: SDSContext) => {Game(item_for_game, context.recResult) \r\n                    return {gamecount: context.gamecount+1}}),\r\n                    target: '.prompt'                            \r\n                }],\r\n\r\n                /*\r\n                cond: (context) => context.gamecount != 7,\r\n                    actions: [assign((context: SDSContext) => Game(item_for_game, context.recResult),\r\n                    return {gamecount: context.gamecount+1)}                         \r\n                */\r\n                        TIMEOUT: '.timeout',\r\n                        ENDGAME: '#wordplay_summary'},\r\n                ...Say_play('alll')\r\n            },\r\n    \r\n            wordplay_summary:{\r\n                initial: 'prompt',\r\n                id: 'wordplay_summary',\r\n                on: {ENDSPEECH: 'wordplay_quit'},\r\n                states:{\r\n                    prompt: {entry: say('I want to kill myself')}\r\n                }\r\n\r\n            },\r\n        definitions: {\r\n            initial: 'prompt',\r\n            id: 'definitions',\r\n            on: {ENDSPEECH: '#welcome'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the definitions game! Going back.\")\r\n                }\r\n            }\r\n        },/*\r\n        definitions_choice:{\r\n            initial: 'prompt',\r\n            states:{\r\n                prompt: { ...invoke_rasa('#wordplay_invocation')}\r\n            }\r\n        },\r\n        definitions_invocation:{\r\n            initial: 'prompt',\r\n            id: 'wordplay_choice',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'Help',\r\n                    target: 'definitions_help'},\r\n                    {cond: (context) => context.intentResult === 'Quit',\r\n                    target: 'definitionsy_quit'},\r\n                    {cond: (context) => context.intentResult === 'Definitions',\r\n                    target: 'definitions_again'},\r\n                    {cond: (context) => context.intentResult === 'Wordplay',\r\n                    target: '#wordplay'},\r\n                    {cond: (context) => context.intentResult === 'Animals',\r\n                    target: 'definitions_animals'},\r\n                    {cond: (context) => context.intentResult === 'Weekdays',\r\n                    target: 'definitions_weekdays'},\r\n                    {cond: (context) => context.intentResult === 'Occupation',\r\n                    target: 'definitions_occupation'},\r\n                    {cond: (context) => context.intentResult === 'Colours',\r\n                    target: 'definitions_colours'},\r\n                    {cond: (context) => context.intentResult === 'Verbs',\r\n                    target: 'definitions_verbs'},\r\n                    {cond: (context) => context.intentResult === 'Family',\r\n                    target: 'definitions_family'},\r\n                    {cond: (context) => context.intentResult === 'Geographical',\r\n                    target: 'definitions_geographical'},\r\n\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `${context.task}.`}))},\r\n                nomatch: {\r\n                    entry: say(\"Unavailable right now.\"),\r\n                    on: {ENDSPEECH: '#choose_game'}\r\n        cancel:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: '#choose_game'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Cancelling.\")\r\n                }\r\n            }\r\n            },\r\n        }*/\r\n}})"]},"metadata":{},"sourceType":"module"}