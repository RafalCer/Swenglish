{"ast":null,"code":"import _slicedToArray from\"C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import\"./styles.scss\";import*as React from\"react\";import*as ReactDOM from\"react-dom\";import{Machine,assign,send}from\"xstate\";import{useMachine,asEffect}from\"@xstate/react\";import{dmMachine}from\"./dmSwenglish\";import Background from\"./Pictures_game/Background.jpg\";/*inspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n*/import{useSpeechSynthesis,useSpeechRecognition}from'react-speech-kit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";let counterScore=0;let counterTimeout=0;const machine=Machine({id:'root',type:'parallel',states:{dm:_objectSpread({},dmMachine),asrtts:{initial:'idle',states:{idle:{on:{LISTEN:'recognising',SPEAK:{target:'speaking',actions:assign((_context,event)=>{return{ttsAgenda:event.value};})}}},recognising:{initial:'progress',entry:'recStart',exit:'recStop',on:{ASRRESULT:{actions:['recLogResult',assign((_context,event)=>{return{recResult:event.value};})],target:'.match'},RECOGNISED:'idle',NEXT_STATE:{actions:assign(context=>{if(context.score){return{score:context.score+1};}else{return{score:counterScore+1};}}),target:'idle'},TIMEOUT:{actions:assign(context=>{if(context.count){return{count:context.count+1};}else{return{count:counterTimeout+1};}}),target:'idle'}},states:{progress:{},match:{entry:send('RECOGNISED')}}},speaking:{entry:'ttsStart',on:{ENDSPEECH:'idle'}}}}}},{actions:{recLogResult:context=>{/* context.recResult = event.recResult; */console.log('<< ASR: '+context.recResult);},test:()=>{console.log('test');},logIntent:context=>{/* context.nluData = event.data */console.log('<< NLU intent: '+context.nluData.intent.name);}}});const ReactiveButton=props=>{switch(true){case props.state.matches({asrtts:'recognising'}):return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:props.state.context.recResult}),/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\",style:{animation:\"glowing 20s linear\"}},props),{},{children:\"Listening...\"}))]});case props.state.matches({asrtts:'speaking'}):return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:props.state.context.recResult}),/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\",style:{animation:\"bordering 1s infinite\"}},props),{},{children:\"Speaking...\"}))]});default:return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:props.state.context.recResult}),/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\"},props),{},{children:\"Click to start\"}))]});}};function App(){const _useSpeechSynthesis=useSpeechSynthesis({onEnd:()=>{send('ENDSPEECH');}}),speak=_useSpeechSynthesis.speak,cancel=_useSpeechSynthesis.cancel,speaking=_useSpeechSynthesis.speaking;const _useSpeechRecognition=useSpeechRecognition({onResult:result=>{send({type:\"ASRRESULT\",value:result});}}),listen=_useSpeechRecognition.listen,listening=_useSpeechRecognition.listening,stop=_useSpeechRecognition.stop;const _useMachine=useMachine(machine,{devTools:true,actions:{recStart:asEffect(()=>{console.log('Ready to receive a color command.');listen({interimResults:false,continuous:true,language:'sv-Se'});}),recStop:asEffect(()=>{console.log('Recognition stopped.');stop();}),ttsStart:asEffect((context,effect)=>{console.log('Speaking...');speak({text:context.ttsAgenda});}),ttsCancel:asEffect((context,effect)=>{console.log('TTS STOP...');cancel();})/* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */}}),_useMachine2=_slicedToArray(_useMachine,3),current=_useMachine2[0],send=_useMachine2[1],service=_useMachine2[2];let shown_picture=Background;if(current.context.picture){shown_picture=current.context.picture;}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:/*#__PURE__*/_jsx(ReactiveButton,{state:current,onClick:()=>send('CLICK')})}),/*#__PURE__*/_jsx(\"h2\",{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:shown_picture})})})]});};const rootElement=document.getElementById(\"root\");ReactDOM.render(/*#__PURE__*/_jsx(App,{}),rootElement);","map":{"version":3,"sources":["C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","dmMachine","Background","useSpeechSynthesis","useSpeechRecognition","counterScore","counterTimeout","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","actions","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","RECOGNISED","NEXT_STATE","context","score","TIMEOUT","count","progress","match","speaking","ENDSPEECH","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listen","listening","stop","devTools","recStart","interimResults","continuous","language","recStop","ttsStart","effect","text","ttsCancel","current","service","shown_picture","picture","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmSwenglish\";\nimport Background from \"./Pictures_game/Background.jpg\";\n\n\n/*inspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n*/\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nlet counterScore = 0\nlet counterTimeout = 0\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        NEXT_STATE: {\n                            actions: assign((context) => {\n                                if (context.score) {return {score: context.score +1,}}\n                                else {return {score: counterScore +1}}\n                            }),\n                            target: 'idle'\n                        },\n                        TIMEOUT: {\n                            actions: assign((context) => {\n                                if (context.count) {return {count: context.count +1,}}\n                                else {return {count: counterTimeout +1,}}\n                            }),\n                            target: 'idle'\n                        }\n                    },\n                    states: {\n                        progress: {},\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (<div>                \n                <p>{props.state.context.recResult}</p>\n    \n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} \n\n                    {...props}>\n                    Listening...\n                </button>\n                </div>\n            );\n        case props.state.matches({ asrtts: 'speaking' }\n        ):\n            return (<div>\n                <p>{props.state.context.recResult}</p>\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button></div>\n            );\n        default:\n            return (\n                <div>\n                <p>{props.state.context.recResult}</p>\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n                </div>\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true,\n                    language: 'sv-Se'\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n    let shown_picture = Background;\n    if (current.context.picture) {shown_picture = current.context.picture}\n    \n    return (\n        <div className=\"App\">\n        <h1>\n        <   ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </h1>\n        <h2>\n            <div><img src={shown_picture}/></div>\n        </h2>\n        </div>\n    )\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"]},"metadata":{},"sourceType":"module"}