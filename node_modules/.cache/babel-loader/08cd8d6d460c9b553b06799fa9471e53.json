{"ast":null,"code":"import _objectSpread from \"C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport { game_vocab } from \"./definitions_and_words\";\nimport { gameGrammar, animalsGrammar } from \"./grammars/vocabGrammar\";\nconst promptReset = assign(context => {\n  return {\n    count: 0\n  };\n});\nconst scoreReset = assign(context => {\n  return {\n    score: 0\n  };\n});\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst cancel = actions.cancel;\n\nfunction invoke_rasa(go_to_state) {\n  return {\n    invoke: {\n      id: 'rasaApi',\n      src: (context, event) => nluRequest(context.task),\n      onDone: {\n        target: go_to_state,\n        actions: [assign((context, event) => {\n          return {\n            intentResult: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      },\n      onError: {\n        target: '#welcome',\n        actions: (context, event) => console.log(event.data)\n      }\n    }\n  };\n}\n\nfunction sayAskTimeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_this],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 30000,\n          id: 'timer'\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, please repeat.'),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      timeout_final: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        id: 'idle',\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            cond: context => context.count === 1,\n            target: 'reprompt0'\n          }, {\n            cond: context => context.count === 2,\n            target: 'reprompt1'\n          }, {\n            cond: context => context.count === 3,\n            target: 'reprompt2'\n          }, {\n            cond: context => context.count === 4,\n            target: 'timeout_final'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      reprompt0: {\n        entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt1: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt2: {\n        entry: say(':et us give it one last try'),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nfunction Say_play(say_word) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: [promptReset, say_word],\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('TIMEOUT', {\n          delay: 20000,\n          id: 'timer2'\n        })]\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      timeout: {\n        initial: 'prompt',\n        on: {\n          TIMEOUT: [{\n            target: 'reprompt'\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send('TIMEOUT')\n          }\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      reprompt: {\n        entry: say('Time is running out!')\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      },\n      skip_to_next: {\n        entry: send('SKIP_STATE')\n      }\n    }\n  };\n}\n\n_c = Say_play;\n\nfunction Show_play() {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: send('SHOW')\n      },\n      show: {\n        entry: say(' '),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: listen()\n      },\n      nomatch: {\n        entry: say(\"I'm afraid not! Try again!\"),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      reprompt: {\n        entry: [say(\"Time is up three!\")],\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      almost: {\n        entry: say(\"Right! But what is the correct article?\"),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      match: {\n        entry: say('Correct!'),\n        on: {\n          ENDSPEECH: 'go_to_next'\n        }\n      },\n      go_to_next: {\n        entry: send('NEXT_STATE')\n      },\n      skip_to_next: {\n        entry: send('SKIP_STATE')\n      }\n    }\n  };\n}\n\n_c2 = Show_play;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      id: 'welcome',\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'which_game'\n      },\n      states: {\n        prompt: {\n          entry: [scoreReset, say('Welcome to Sweenglish!')]\n        }\n      }\n    },\n    which_game: {\n      initial: 'prompt',\n      id: 'which_game',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say('Which game would you like to play?'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    choice: {\n      initial: 'prompt',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#tool'))\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      id: 'tool',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Words',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#exit_app'\n        }, {\n          cond: context => context.intentResult === 'Help',\n          target: '#general_help'\n        }, {\n          cond: context => context.intentResult === 'Animals' || context.intentResult === 'Weekdays' || context.intentResult === 'Family' || context.intentResult === 'Occupation' || context.intentResult === 'Colours' || context.intentResult === 'Verbs' || context.intentResult === 'Family' || context.intentResult === 'Geographical',\n          target: '.pick_game'\n        }, {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Sadly such game is not yet implemented. Let us try again.\"),\n          on: {\n            ENDSPEECH: '#which_game'\n          }\n        },\n        pick_game: {\n          entry: say(\"Great choice, but you have to choose a game mode first. Please try again\"),\n          on: {\n            ENDSPEECH: '#which_game'\n          }\n        }\n      }\n    },\n    general_help: {\n      initial: 'prompt',\n      id: 'general_help',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say(' Swenglish has three games: wordplay, definitions, and picturs. In Wordplay, you will be given a word in English and will have to come up,\\\n                 with its correspondence in Swedish. In definitions, you will be given definitions and will have to say the corresponding word in Swedish. In pictures, you will\\\n                be shown a picture and will have to name what you see in Swedish.')\n        }\n      }\n    },\n    wordplay: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay',\n      on: {\n        RECOGNISED: [{\n          actions: [assign(context => {\n            return {\n              game_mode: context.intentResult\n            };\n          }), cancel('timer')],\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))),\n    wordplay_invocation: {\n      initial: 'prompt',\n      id: 'wordplay_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#wordplay_choice'))\n      }\n    },\n    wordplay_choice: {\n      initial: 'prompt',\n      id: 'wordplay_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'wordplay_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay_again'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: 'wordplay_pregame'\n        }, {\n          cond: context => context.intentResult === 'Weekdays',\n          target: 'wordplay_weekdays'\n        },\n        /*\n        {cond: (context) => context.intentResult === 'Occupation',\n        target: 'wordplay_occupation'},\n        {cond: (context) => context.intentResult === 'Colours',\n        target: 'wordplay_colours'},\n        {cond: (context) => context.intentResult === 'Verbs',\n        target: 'wordplay_verbs'},\n        {cond: (context) => context.intentResult === 'Family',\n        target: 'wordplay_family'},\n        {cond: (context) => context.intentResult === 'Geographical',\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    wordplay_again: _objectSpread({\n      id: 'wordplay_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#wordplay_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))),\n    wordplay_help: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'wordplay_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                        Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    wordplay_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_quit',\n      on: {\n        ENDSPEECH: '#which_game'\n      }\n    }, sayAskTimeout(say(\"Quitting Wordplay.\"))),\n    wordplay_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.game_mode === \"Animals\",\n          target: \"#wordplay_animals_begin\"\n        }, {\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}) && context.game_mode === \"Weekdays\",\n          target: \"#wordplay_weekdays_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    wordplay_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_dog'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.english))),\n    wordplay_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.english))),\n    wordplay_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.english))),\n    wordplay_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.english))),\n    wordplay_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.english))),\n    wordplay_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.english))),\n    wordplay_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer'), assign(context => {\n            return {\n              score: (context.score || 0) + 1\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        SKIP_STATE: {\n          actions: cancel('timer2'),\n          target: '#wordplay_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.english))),\n    wordplay_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'wordplay_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#wordplay_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(send(context => ({\n      type: \"SPEAK\",\n      value: \"Well done! Your current score is \".concat(context.score, \". Would you like to repeat, or play another game?\")\n    })))),\n    definitions: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))),\n    definitions_invocation: {\n      initial: 'prompt',\n      id: 'definitions_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#definitions_choice'))\n      }\n    },\n    definitions_choice: {\n      initial: 'prompt',\n      id: 'definitions_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'definitions_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions_again'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: 'wordplay'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: 'definitions_pregame'\n        },\n        /*\n        {cond: (context) => context.intentResult === 'Weekdays',\n        target: 'wordplay_weekdays'},\n        {cond: (context) => context.intentResult === 'Occupation',\n        target: 'wordplay_occupation'},\n        {cond: (context) => context.intentResult === 'Colours',\n        target: 'wordplay_colours'},\n        {cond: (context) => context.intentResult === 'Verbs',\n        target: 'wordplay_verbs'},\n        {cond: (context) => context.intentResult === 'Family',\n        target: 'wordplay_family'},\n        {cond: (context) => context.intentResult === 'Geographical',\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    definitions_again: _objectSpread({\n      id: 'definitions_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#definitions_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))),\n    definitions_help: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'definitions_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a corresponding word in Swedish. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You have limited time to asnwer your question.\\\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the wordplay game.\"))),\n    definitions_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))),\n    definitions_pregame: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          target: \"#definitions_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    definitions_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '#definitions_dog'\n        },\n        TIMEOUT: {\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.cat.definition))),\n    definitions_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_fox'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.dog.definition))),\n    definitions_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer2'), cancel('timer')],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_sheep'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.fox.definition))),\n    definitions_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_giraffe'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.sheep.definition))),\n    definitions_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_crocodile'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.giraffe.definition))),\n    definitions_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_peacock'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.crocodile.definition))),\n    definitions_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '.skip_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#quit_game'\n        }, {\n          actions: cancel('timer2'),\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          actions: cancel('timer2'),\n          target: '#definitions_summary'\n        },\n        TIMEOUT: {\n          actions: cancel('timer2'),\n          target: '.timeout'\n        }\n      }\n    }, Say_play(say(game_vocab.animals.peacock.definition))),\n    definitions_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'definitions_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#definitions_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: cancel('timer2'),\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))),\n    pictures: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))),\n    pictures_invocation: {\n      initial: 'prompt',\n      id: 'pictures_invocation',\n      states: {\n        prompt: _objectSpread({}, invoke_rasa('#pictures_choice'))\n      }\n    },\n    pictures_choice: {\n      initial: 'prompt',\n      id: 'pictures_choice',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult === 'Help',\n          target: 'pictures_help'\n        }, {\n          cond: context => context.intentResult === 'Quit',\n          target: '#quit_game'\n        }, {\n          cond: context => context.intentResult === 'Definitions',\n          target: '#definitions'\n        }, {\n          cond: context => context.intentResult === 'Wordplay',\n          target: '#wordplay'\n        }, {\n          cond: context => context.intentResult === 'Pictures',\n          target: '#pictures_again'\n        }, {\n          cond: context => context.intentResult === 'Animals',\n          target: '#pictures_pregame'\n        },\n        /*\n        {cond: (context) => context.intentResult === 'Weekdays',\n        target: 'wordplay_weekdays'},\n        {cond: (context) => context.intentResult === 'Occupation',\n        target: 'wordplay_occupation'},\n        {cond: (context) => context.intentResult === 'Colours',\n        target: 'wordplay_colours'},\n        {cond: (context) => context.intentResult === 'Verbs',\n        target: 'wordplay_verbs'},\n        {cond: (context) => context.intentResult === 'Family',\n        target: 'wordplay_family'},\n        {cond: (context) => context.intentResult === 'Geographical',\n        target: 'wordplay_geographical'},*/\n        {\n          target: '.nomatch'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send('ENDSPEECH')\n        },\n        nomatch: {\n          entry: say(\"Unavailable right now.\"),\n          on: {\n            ENDSPEECH: '#welcome'\n          }\n        }\n      }\n    },\n    pictures_again: _objectSpread({\n      id: 'pictures_again',\n      on: {\n        ENDSPEECH: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: '#pictures_invocation'\n        }],\n        TIMEOUT: '.timeout'\n      }\n    }, sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))),\n    pictures_help: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_help',\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'pictures_invocation'\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You have limited time for every question.\\\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))),\n    pictures_quit: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_quit',\n      on: {\n        ENDSPEECH: '#welcome'\n      }\n    }, sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))),\n    pictures_pregame: {\n      initial: 'prompt',\n      id: 'pictures_pregame',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"start\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: cat\n            };\n          })],\n          target: \"#pictures_animals_begin\"\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: \"#quit_game\"\n        }, {\n          target: \".nomatch\"\n        }],\n        ENDSPEECH: '.ask'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have chosen \".concat(context.task, \". Say start - if you wish to begin; or quit - if you wish to change the game or the mode.\")\n          }))\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite catch that. Please repeat'),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    pictures_animals_begin: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_animals_begin',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2'), assign(context => {\n            return {\n              picture: dog\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"cat\" in (animalsGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer2')],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [cancel('timer'), cancel('timer'), assign(context => {\n            return {\n              picture: dog\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          }), cancel('timer')],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_dog'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_dog: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_dog',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"dog\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: fox\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_fox'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_fox: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_fox',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_fox\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"fox\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: sheep\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_sheep'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_sheep: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_sheep',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"sheep\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: giraffe\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_giraffe'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_giraffe: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_giraffe',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"giraffe\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: crocodile\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_crocodile'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_crocodile: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_crocodile',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"crocodile\" in (animalsGrammar[context.recResult] || {}),\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: peacock\n            };\n          })],\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_peacock'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_peacock: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_peacock',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.match'\n        }, {\n          cond: context => \"peacock\" in (animalsGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '.almost'\n        }, {\n          cond: context => \"skip\" in (gameGrammar[context.recResult] || {}),\n          target: '.go_to_next'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: Background\n            };\n          })],\n          target: '#quit_game'\n        }, {\n          target: '.nomatch'\n        }],\n        NEXT_STATE: {\n          target: '#pictures_summary'\n        },\n        SHOW: {\n          target: '.show'\n        }\n      }\n    }, Show_play()),\n    pictures_summary: _objectSpread({\n      initial: 'prompt',\n      id: 'pictures_summary',\n      on: {\n        RECOGNISED: [{\n          cond: context => \"repeat\" in (gameGrammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              picture: cat\n            };\n          })],\n          target: '#pictures_animals_begin'\n        }, {\n          cond: context => \"change_game\" in (gameGrammar[context.recResult] || {}),\n          target: '#which_game'\n        }, {\n          cond: context => \"quit\" in (gameGrammar[context.recResult] || {}),\n          target: '#exit_app'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    }, sayAskTimeout(say('Well done! Would you like to repeat, or play another game?'))),\n    quit_game: {\n      initial: 'prompt',\n      id: 'quit_game',\n      on: {\n        ENDSPEECH: '#which_game'\n      },\n      states: {\n        prompt: {\n          entry: say('Exiting current game.')\n        }\n      }\n    },\n    exit_app: {\n      id: 'exit_app',\n      on: {\n        ENDSPEECH: '#idle'\n      },\n      entry: say('Thank you for playing and have a nice day!')\n    }\n  }\n};\nimport Background from \"./Pictures_game/Background.jpg\";\nimport cat from \"./Pictures_game/cat.jpg\";\nimport dog from \"./Pictures_game/dog.jpeg\";\nimport fox from \"./Pictures_game/fox.jpg\";\nimport sheep from \"./Pictures_game/sheep.jpg\";\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\nimport peacock from \"./Pictures_game/peacock.jpg\";\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Say_play\");\n$RefreshReg$(_c2, \"Show_play\");","map":{"version":3,"sources":["C:/Users/Rafa/Desktop/Swenglish/SwenglishApp-master/src/dmSwenglish.ts"],"names":["send","assign","actions","game_vocab","gameGrammar","animalsGrammar","promptReset","context","count","scoreReset","score","say","text","_context","type","value","listen","cancel","invoke_rasa","go_to_state","invoke","id","src","event","nluRequest","task","onDone","target","intentResult","data","intent","name","console","log","onError","sayAskTimeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask","delay","nomatch","timeout_final","idle","timeout","TIMEOUT","cond","reprompt0","reprompt1","reprompt2","Say_play","say_word","almost","match","reprompt","go_to_next","skip_to_next","Show_play","show","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json","dmMachine","start_point","CLICK","welcome","which_game","RECOGNISED","recResult","choice","tool","pick_game","general_help","wordplay","game_mode","wordplay_invocation","wordplay_choice","wordplay_again","wordplay_help","wordplay_quit","wordplay_pregame","wordplay_animals_begin","NEXT_STATE","SKIP_STATE","animals","cat","english","wordplay_dog","dog","wordplay_fox","fox","wordplay_sheep","sheep","wordplay_giraffe","giraffe","wordplay_crocodile","crocodile","wordplay_peacock","peacock","wordplay_summary","definitions","definitions_invocation","definitions_choice","definitions_again","definitions_help","definitions_quit","definitions_pregame","definitions_animals_begin","definition","definitions_dog","definitions_fox","definitions_sheep","definitions_giraffe","definitions_crocodile","definitions_peacock","definitions_summary","pictures","pictures_invocation","pictures_choice","pictures_again","pictures_help","pictures_quit","pictures_pregame","picture","pictures_animals_begin","Background","SHOW","pictures_dog","pictures_fox","pictures_sheep","pictures_giraffe","pictures_crocodile","pictures_peacock","pictures_summary","quit_game","exit_app"],"mappings":";AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,EAA8CC,OAA9C,QAA6D,QAA7D;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAAiJ,yBAAjJ;AAEA,MAAMC,WAAyC,GAAGL,MAAM,CAAEM,OAAD,IAAa;AAAE,SAAO;AAAEC,IAAAA,KAAK,EAAC;AAAR,GAAP;AAAmB,CAAnC,CAAxD;AACA,MAAMC,UAAwC,GAAGR,MAAM,CAAEM,OAAD,IAAa;AAAE,SAAO;AAAEG,IAAAA,KAAK,EAAC;AAAR,GAAP;AAAmB,CAAnC,CAAvD;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAyD;AAC5D,SAAOZ,IAAI,CAAEa,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;AAED,OAAO,SAASI,MAAT,GAAgD;AACnD,SAAOhB,IAAI,CAAC,QAAD,CAAX;AACH;MAEMiB,M,GAAUf,O,CAAVe,M;;AAEP,SAASC,WAAT,CAAqBC,WAArB,EAAqF;AACjF,SAAQ;AACAC,IAAAA,MAAM,EAAE;AACJC,MAAAA,EAAE,EAAE,SADA;AAEJC,MAAAA,GAAG,EAAE,CAACf,OAAD,EAAUgB,KAAV,KAAqBC,UAAU,CAACjB,OAAO,CAACkB,IAAT,CAFhC;AAGJC,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAER,WADL;AAEHjB,QAAAA,OAAO,EAAC,CACJD,MAAM,CAAC,CAACM,OAAD,EAAUgB,KAAV,KAAoB;AAAE,iBAAO;AAAEK,YAAAA,YAAY,EAAEL,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAkBC;AAAlC,WAAP;AAAgD,SAAvE,CADF,EAEJ,CAACxB,OAAD,EAAqBgB,KAArB,KAAmCS,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACM,IAAlB,CAF/B;AAFL,OAHH;AASJK,MAAAA,OAAO,EAAC;AACJP,QAAAA,MAAM,EAAE,UADJ;AAEJzB,QAAAA,OAAO,EAAE,CAACK,OAAD,EAAUgB,KAAV,KAAoBS,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACM,IAAlB;AAFzB;AATJ;AADR,GAAR;AAaC;;AAEL,SAASM,aAAT,CAAuBC,QAAvB,EAAyG;AACrG,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAClC,WAAD,EAAc8B,QAAd,CADH;AAEJK,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAIJC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAE,CAACxC,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,SAAF,EAAa;AAAC4C,UAAAA,KAAK,EAAE,KAAR;AAAevB,UAAAA,EAAE,EAAE;AAAnB,SAAb,CAArB;AADN,OAJD;AAOJwB,MAAAA,OAAO,EAAE;AACLL,QAAAA,KAAK,EAAE7B,GAAG,CAAC,uBAAD,CADL;AAEL8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFC,OAPL;AAWJI,MAAAA,aAAa,EAAE;AACXN,QAAAA,KAAK,EAAE7B,GAAG,CAAC,oBAAD,CADC;AAEX8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFO,OAXX;AAeJK,MAAAA,IAAI,EAAC;AACD1B,QAAAA,EAAE,EAAE,MADH;AAEDP,QAAAA,IAAI,EAAE;AAFL,OAfD;AAmBJkC,MAAAA,OAAO,EAAE;AACLX,QAAAA,OAAO,EAAE,QADJ;AAELI,QAAAA,EAAE,EAAE;AAACQ,UAAAA,OAAO,EAAE,CAAC;AAACC,YAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACC,KAAR,KAAiB,CAArC;AAAwCmB,YAAAA,MAAM,EAAE;AAAhD,WAAD,EACE;AAACuB,YAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACC,KAAR,KAAiB,CAArC;AAAwCmB,YAAAA,MAAM,EAAE;AAAhD,WADF,EAEE;AAACuB,YAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACC,KAAR,KAAiB,CAArC;AAAwCmB,YAAAA,MAAM,EAAE;AAAhD,WAFF,EAGE;AAACuB,YAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACC,KAAR,KAAiB,CAArC;AAAwCmB,YAAAA,MAAM,EAAE;AAAhD,WAHF;AAAV,SAFC;AAMLW,QAAAA,MAAM,EAAC;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAExC,IAAI,CAAC,SAAD;AADP;AADL;AANF,OAnBL;AA+BJmD,MAAAA,SAAS,EAAE;AACPX,QAAAA,KAAK,EAAE7B,GAAG,CAAC,0DAAD,CADH;AAEP8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFG,OA/BP;AAmCJU,MAAAA,SAAS,EAAE;AACPZ,QAAAA,KAAK,EAAE7B,GAAG,CAAC,uBAAD,CADH;AAEP8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFG,OAnCP;AAuCJW,MAAAA,SAAS,EAAE;AACPb,QAAAA,KAAK,EAAE7B,GAAG,CAAC,6BAAD,CADH;AAEP8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFG;AAvCP;AAFJ,GAAR;AA4CC;;AAGL,SAASY,QAAT,CAAkBC,QAAlB,EAAoG;AAChG,SAAQ;AACJlB,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAClC,WAAD,EAAciD,QAAd,CADH;AAEJd,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFA,OADJ;AAIJC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAE,CAACxC,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,SAAF,EAAa;AAAC4C,UAAAA,KAAK,EAAE,KAAR;AAAevB,UAAAA,EAAE,EAAC;AAAlB,SAAb,CAArB;AADN,OAJD;AAOJwB,MAAAA,OAAO,EAAE;AACLL,QAAAA,KAAK,EAAE7B,GAAG,CAAC,4BAAD,CADL;AAEL8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFC,OAPL;AAWJK,MAAAA,IAAI,EAAC;AACDjC,QAAAA,IAAI,EAAE;AADL,OAXD;AAcJkC,MAAAA,OAAO,EAAE;AACLX,QAAAA,OAAO,EAAE,QADJ;AAELI,QAAAA,EAAE,EAAE;AAACQ,UAAAA,OAAO,EAAE,CAAC;AAACtB,YAAAA,MAAM,EAAE;AAAT,WAAD;AAAV,SAFC;AAGLW,QAAAA,MAAM,EAAC;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAExC,IAAI,CAAC,SAAD;AADP;AADL;AAHF,OAdL;AAuBJwD,MAAAA,MAAM,EAAC;AACHhB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,yCAAD,CADP;AAEH8B,QAAAA,EAAE,EAAC;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFA,OAvBH;AA2BJe,MAAAA,KAAK,EAAE;AACHjB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,UAAD,CADP;AAEH8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAC;AAAX;AAFD,OA3BH;AA+BJgB,MAAAA,QAAQ,EAAC;AACLlB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,sBAAD;AADL,OA/BL;AAmCJgD,MAAAA,UAAU,EAAC;AACPnB,QAAAA,KAAK,EAAExC,IAAI,CAAC,YAAD;AADJ,OAnCP;AAsCJ4D,MAAAA,YAAY,EAAC;AACTpB,QAAAA,KAAK,EAAExC,IAAI,CAAC,YAAD;AADF;AAtCT;AAFJ,GAAR;AA2CA;;KA5CKsD,Q;;AA8CT,SAASO,SAAT,GAA+D;AAC3D,SAAQ;AACJxB,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAExC,IAAI,CAAC,MAAD;AADP,OADJ;AAGJ8D,MAAAA,IAAI,EAAC;AACDtB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,GAAD,CADT;AAED8B,QAAAA,EAAE,EAAC;AACCC,UAAAA,SAAS,EAAE;AADZ;AAFF,OAHD;AASJC,MAAAA,GAAG,EAAE;AAAEH,QAAAA,KAAK,EAAExB,MAAM;AAAf,OATD;AAWJ6B,MAAAA,OAAO,EAAE;AACLL,QAAAA,KAAK,EAAE7B,GAAG,CAAC,4BAAD,CADL;AAEL8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFC,OAXL;AAeJK,MAAAA,IAAI,EAAC;AACDjC,QAAAA,IAAI,EAAE;AADL,OAfD;AAkBJ4C,MAAAA,QAAQ,EAAE;AACNlB,QAAAA,KAAK,EAAE,CAAC7B,GAAG,CAAC,mBAAD,CAAJ,CADD;AAEN8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFE,OAlBN;AAsBJc,MAAAA,MAAM,EAAC;AACHhB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,yCAAD,CADP;AAEH8B,QAAAA,EAAE,EAAC;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFA,OAtBH;AA0BJe,MAAAA,KAAK,EAAE;AACHjB,QAAAA,KAAK,EAAE7B,GAAG,CAAC,UAAD,CADP;AAEH8B,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAC;AAAX;AAFD,OA1BH;AA8BJiB,MAAAA,UAAU,EAAC;AACPnB,QAAAA,KAAK,EAAExC,IAAI,CAAC,YAAD;AADJ,OA9BP;AAiCJ4D,MAAAA,YAAY,EAAC;AACTpB,QAAAA,KAAK,EAAExC,IAAI,CAAC,YAAD;AADF;AAjCT;AAFJ,GAAR;AAsCA;;MAvCK6D,S;AAyCT,MAAME,QAAQ,GAAG,sCAAjB;AACA,MAAMC,OAAO,GAAG,6CAAhB;;AACA,MAAMxC,UAAU,GAAIZ,IAAD,IACfqD,KAAK,CAAC,IAAIC,OAAJ,CAAYH,QAAQ,GAAGC,OAAvB,EAAgC;AAClCG,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,OAAO,EAAE;AAAE,cAAU;AAAZ,GAFyB;AAES;AAC3CC,EAAAA,IAAI,yBAAezD,IAAf;AAH8B,CAAhC,CAAD,CAAL,CAKK0D,IALL,CAKUzC,IAAI,IAAIA,IAAI,CAAC0C,IAAL,EALlB,CADJ;;AAQA,OAAO,MAAMC,SAAmD,GAAI;AAChEnC,EAAAA,OAAO,EAAE,aADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJmC,IAAAA,WAAW,EAAC;AACRpD,MAAAA,EAAE,EAAE,gBADI;AAERoB,MAAAA,EAAE,EAAE;AACAiC,QAAAA,KAAK,EAAE;AADP;AAFI,KADR;AAOJC,IAAAA,OAAO,EAAE;AACLtD,MAAAA,EAAE,EAAE,SADC;AAELgB,MAAAA,OAAO,EAAE,QAFJ;AAGLI,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAC;AAAX,OAHC;AAILJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAE,CAAC/B,UAAD,EAAaE,GAAG,CAAC,wBAAD,CAAhB;AADJ;AADJ;AAJF,KAPL;AAgBJiE,IAAAA,UAAU,EAAC;AACPvC,MAAAA,OAAO,EAAE,QADF;AAEPhB,MAAAA,EAAE,EAAE,YAFG;AAGPoB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD;AADX,OAHG;AAQPW,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE7B,GAAG,CAAC,oCAAD,CADN;AAEJ8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SADL;AAKHC,QAAAA,GAAG,EAAC;AAAEH,UAAAA,KAAK,EAAExB,MAAM;AAAf;AALD;AARA,KAhBP;AAiCJ+D,IAAAA,MAAM,EAAC;AACH1C,MAAAA,OAAO,EAAE,QADN;AAEHC,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,oBAAOrB,WAAW,CAAC,OAAD,CAAlB;AADH;AAFJ,KAjCH;AAuCJ8D,IAAAA,IAAI,EAAC;AACD3C,MAAAA,OAAO,EAAE,QADR;AAEDhB,MAAAA,EAAE,EAAE,MAFH;AAGDoB,MAAAA,EAAE,EAAC;AACCC,QAAAA,SAAS,EAAC,CAAC;AACPQ,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,aADrC;AAEPD,UAAAA,MAAM,EAAE;AAFD,SAAD,EAGN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,OAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAHM,EAKN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SALM,EAON;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAPM,EASN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SATM,EAWN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,SAAzB,IAAsCrB,OAAO,CAACqB,YAAR,KAAyB,UAA/D,IAA6ErB,OAAO,CAACqB,YAAR,KAAyB,QAAtG,IAAkHrB,OAAO,CAACqB,YAAR,KAAyB,YAA3I,IACjBrB,OAAO,CAACqB,YAAR,KAAyB,SADR,IACqBrB,OAAO,CAACqB,YAAR,KAAyB,OAD9C,IACyDrB,OAAO,CAACqB,YAAR,KAAyB,QADlF,IAC8FrB,OAAO,CAACqB,YAAR,KAAyB,cAD3I;AAEAD,UAAAA,MAAM,EAAE;AAFR,SAXM,EAcV;AAACA,UAAAA,MAAM,EAAC;AAAR,SAdU;AADX,OAHF;AAoBDW,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAExC,IAAI,CAAC,WAAD;AADP,SADJ;AAGJ6C,QAAAA,OAAO,EAAE;AACLL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,2DAAD,CADL;AAEL8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC,SAHL;AAOJuC,QAAAA,SAAS,EAAC;AACNzC,UAAAA,KAAK,EAAE7B,GAAG,CAAC,0EAAD,CADJ;AAEN8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFE;AAPN;AApBP,KAvCD;AAsEJwC,IAAAA,YAAY,EAAC;AACT7C,MAAAA,OAAO,EAAE,QADA;AAEThB,MAAAA,EAAE,EAAE,cAFK;AAGToB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAHK;AAITJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AAACC,UAAAA,KAAK,EAAE7B,GAAG,CAAC;AACpC;AACA,kFAFmC;AAAX;AADJ;AAJC,KAtET;AA+EJwE,IAAAA,QAAQ;AACJ9C,MAAAA,OAAO,EAAE,QADL;AAEJhB,MAAAA,EAAE,EAAE,UAFA;AAGJoB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAE6E,cAAAA,SAAS,EAAE7E,OAAO,CAACqB;AAArB,aAAP;AAA4C,WAA5D,CAAP,EAAsEX,MAAM,CAAC,OAAD,CAA5E,CADD;AAERU,UAAAA,MAAM,EAAE;AAFA,SAAD,CADX;AAIIsB,QAAAA,OAAO,EAAE;AAJb;AAHA,OASOd,aAAa,CAACxB,GAAG,CAAC,4CAAD,CAAJ,CATpB,CA/EJ;AA2FA0E,IAAAA,mBAAmB,EAAC;AAChBhD,MAAAA,OAAO,EAAE,QADO;AAEhBhB,MAAAA,EAAE,EAAE,qBAFY;AAGhBiB,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,oBAAOrB,WAAW,CAAC,kBAAD,CAAlB;AADH;AAHS,KA3FpB;AAkGAoE,IAAAA,eAAe,EAAC;AACZjD,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,iBAFQ;AAGZoB,MAAAA,EAAE,EAAC;AACCC,QAAAA,SAAS,EAAC,CAAC;AACPQ,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MADrC;AAEPD,UAAAA,MAAM,EAAE;AAFD,SAAD,EAGN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAHM,EAKN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,aAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SALM,EAON;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAPM,EASN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SATM,EAWN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,SAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAXM,EAaN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAbM;AAeN;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEoB;AAACA,UAAAA,MAAM,EAAC;AAAR,SA3BU;AADX,OAHS;AAiCZW,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAExC,IAAI,CAAC,WAAD;AADP,SADJ;AAGJ6C,QAAAA,OAAO,EAAE;AACLL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,wBAAD,CADL;AAEL8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAHL;AAjCI,KAlGhB;AA+IA6C,IAAAA,cAAc;AACVlE,MAAAA,EAAE,EAAE,gBADM;AAEVoB,MAAAA,EAAE,EAAC;AAACC,QAAAA,SAAS,EAAC,CAAC;AACXxC,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADJ;AAEXnD,UAAAA,MAAM,EAAE;AAFG,SAAD,CAAX;AAGCsB,QAAAA,OAAO,EAAE;AAHV;AAFO,OAMPd,aAAa,CAACxB,GAAG,CAAC,yEAAD,CAAJ,CANN,CA/Id;AAwJA6E,IAAAA,aAAa;AACTnD,MAAAA,OAAO,EAAE,QADA;AAEThB,MAAAA,EAAE,EAAE,eAFK;AAGToB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD,EAIX;AAACA,UAAAA,MAAM,EAAE;AAAT,SAJW;AADX;AAHK,OAUEQ,aAAa,CAACxB,GAAG,CAAC;AAC7C;AACA,gMAF4C,CAAJ,CAVf,CAxJb;AAsKA8E,IAAAA,aAAa;AACTpD,MAAAA,OAAO,EAAE,QADA;AAEThB,MAAAA,EAAE,EAAE,eAFK;AAGToB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ;AAHK,OAIPP,aAAa,CAACxB,GAAG,CAAC,oBAAD,CAAJ,CAJN,CAtKb;AA4KA+E,IAAAA,gBAAgB,EAAC;AACbrD,MAAAA,OAAO,EAAE,QADI;AAEbI,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAE,CAAC;AACT3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA9C,KAAqDvE,OAAO,CAAC6E,SAAR,KAAsB,SADrF;AAETzD,UAAAA,MAAM,EAAE;AAFC,SAAD,EAGR;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA9C,KAAqDvE,OAAO,CAAC6E,SAAR,KAAsB,UAA/F;AACAzD,UAAAA,MAAM,EAAE;AADR,SAHQ,EAKR;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SALQ,EAOZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SAPY,CADZ;AASAe,QAAAA,SAAS,EAAE;AATX,OAFS;AAabJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EACN;AAACC,UAAAA,KAAK,EAAExC,IAAI,CAAEO,OAAD,KAAc;AAC3BO,YAAAA,IAAI,EAAE,OADqB;AAE3BC,YAAAA,KAAK,4BAAqBR,OAAO,CAACkB,IAA7B;AAFsB,WAAd,CAAD;AAAZ,SAFI;AAKJoB,QAAAA,OAAO,EAAC;AACJL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,kDAAD,CADN;AAEJ8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SALJ;AASJC,QAAAA,GAAG,EAAE;AACDH,UAAAA,KAAK,EAAExB,MAAM;AADZ;AATD;AAbK,KA5KjB;AAqMA2E,IAAAA,sBAAsB;AAClBtD,MAAAA,OAAO,EAAE,QADS;AAElBhB,MAAAA,EAAE,EAAE,wBAFc;AAGlBoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AAC+GiB,UAAAA,MAAM,EAAE;AADvH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAYIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAbhB;AAcIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC;AAdb;AAHc,OAmBnB2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBC,GAAnB,CAAuBC,OAAxB,CAAJ,CAnBW,CArMtB;AA0NJC,IAAAA,YAAY;AACR5D,MAAAA,OAAO,EAAE,QADD;AAERhB,MAAAA,EAAE,EAAE,cAFI;AAGRoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AAC+GiB,UAAAA,MAAM,EAAE;AADvH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CAAV;AAA+CU,UAAAA,MAAM,EAAC;AAAtD,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAbb;AAHI,OAkBT2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBI,GAAnB,CAAuBF,OAAxB,CAAJ,CAlBC,CA1NR;AA8OJG,IAAAA,YAAY;AACR9D,MAAAA,OAAO,EAAE,QADD;AAERhB,MAAAA,EAAE,EAAE,cAFI;AAGRoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AAC+GiB,UAAAA,MAAM,EAAE;AADvH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAbb;AAHI,OAkBT2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBM,GAAnB,CAAuBJ,OAAxB,CAAJ,CAlBC,CA9OR;AAkQJK,IAAAA,cAAc;AACVhE,MAAAA,OAAO,EAAE,QADC;AAEVhB,MAAAA,EAAE,EAAE,gBAFM;AAGVoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AAC+GiB,UAAAA,MAAM,EAAE;AADvH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAjD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAG;AAArC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHM,OAiBX2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBQ,KAAnB,CAAyBN,OAA1B,CAAJ,CAjBG,CAlQV;AAqRJO,IAAAA,gBAAgB;AACZlE,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AAC+GiB,UAAAA,MAAM,EAAE;AADvH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC4BU,UAAAA,MAAM,EAAE;AADpC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAbb;AAHQ,OAkBb2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBU,OAAnB,CAA2BR,OAA5B,CAAJ,CAlBK,CArRZ;AAySJS,IAAAA,kBAAkB;AACdpE,MAAAA,OAAO,EAAE,QADK;AAEdhB,MAAAA,EAAE,EAAE,oBAFU;AAGdoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,mBAAmBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAxD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AACgHiB,UAAAA,MAAM,EAAE;AADxH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAbb;AAHU,OAkBf2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBY,SAAnB,CAA6BV,OAA9B,CAAJ,CAlBO,CAzSd;AA6TJW,IAAAA,gBAAgB;AACZtE,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,EAAoChB,MAAM,CAAEM,OAAD,IAAW;AAAE,mBAAO;AAAEG,cAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,CAAlB,IAAqB;AAA9B,aAAP;AAA0C,WAAxD,CAA1C,CADT;AACgHiB,UAAAA,MAAM,EAAE;AADxH,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIkE,QAAAA,UAAU,EAAE;AAAC3F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAZhB;AAaIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAbb;AAHQ,OAkBb2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBc,OAAnB,CAA2BZ,OAA5B,CAAJ,CAlBK,CA7TZ;AAkVgBa,IAAAA,gBAAgB;AACZxE,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAACoC,QAAAA,UAAU,EAAC,CACZ;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAC;AADrD,SADY,EAGZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,kBAAkBH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAApD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAC;AADrD,SAHY,EAKZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC+CU,UAAAA,MAAM,EAAC;AADtD,SALY,EAOZ;AAACA,UAAAA,MAAM,EAAC;AAAR,SAPY;AAAZ;AAHQ,OAWVQ,aAAa,CAACnC,IAAI,CAAEO,OAAD,KAAc;AACnCO,MAAAA,IAAI,EAAE,OAD6B;AAEnCC,MAAAA,KAAK,6CAAsCR,OAAO,CAACG,KAA9C;AAF8B,KAAd,CAAD,CAAL,CAXH,CAlVhC;AAmWAoG,IAAAA,WAAW;AACPzE,MAAAA,OAAO,EAAE,QADF;AAEPhB,MAAAA,EAAE,EAAE,aAFG;AAGPoB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD,CADX;AAIIsB,QAAAA,OAAO,EAAE;AAJb;AAHG,OASId,aAAa,CAACxB,GAAG,CAAC,+CAAD,CAAJ,CATjB,CAnWX;AA+WIoG,IAAAA,sBAAsB,EAAC;AACnB1E,MAAAA,OAAO,EAAE,QADU;AAEnBhB,MAAAA,EAAE,EAAE,wBAFe;AAGnBiB,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,oBAAOrB,WAAW,CAAC,qBAAD,CAAlB;AADH;AAHY,KA/W3B;AAsXI8F,IAAAA,kBAAkB,EAAC;AACf3E,MAAAA,OAAO,EAAE,QADM;AAEfhB,MAAAA,EAAE,EAAE,oBAFW;AAGfoB,MAAAA,EAAE,EAAC;AACCC,QAAAA,SAAS,EAAC,CAAC;AACPQ,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MADrC;AAEPD,UAAAA,MAAM,EAAE;AAFD,SAAD,EAGN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAHM,EAKN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,aAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SALM,EAON;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAPM,EASN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,SAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SATM;AAWN;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEwB;AAACA,UAAAA,MAAM,EAAC;AAAR,SAzBU;AADX,OAHY;AA+BfW,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAExC,IAAI,CAAC,WAAD;AADP,SADJ;AAGJ6C,QAAAA,OAAO,EAAE;AACLL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,wBAAD,CADL;AAEL8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAHL;AA/BO,KAtXvB;AAiaIuE,IAAAA,iBAAiB;AACb5F,MAAAA,EAAE,EAAE,mBADS;AAEboB,MAAAA,EAAE,EAAC;AAACC,QAAAA,SAAS,EAAC,CAAC;AACXxC,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADJ;AAEXnD,UAAAA,MAAM,EAAE;AAFG,SAAD,CAAX;AAGCsB,QAAAA,OAAO,EAAE;AAHV;AAFU,OAMVd,aAAa,CAACxB,GAAG,CAAC,4EAAD,CAAJ,CANH,CAjarB;AA0aIuG,IAAAA,gBAAgB;AACZ7E,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD,EAIX;AAACA,UAAAA,MAAM,EAAE;AAAT,SAJW;AADX;AAHQ,OAUDQ,aAAa,CAACxB,GAAG,CAAC;AACjD;AACA;AACA,uJAHgD,CAAJ,CAVZ,CA1apB;AAybIwG,IAAAA,gBAAgB;AACZ9E,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ;AAHQ,OAIVP,aAAa,CAACxB,GAAG,CAAC,6CAAD,CAAJ,CAJH,CAzbpB;AA+bIyG,IAAAA,mBAAmB,EAAC;AAChB/E,MAAAA,OAAO,EAAE,QADO;AAEhBI,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAE,CAAC;AACT3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA9C,CADV;AAETnD,UAAAA,MAAM,EAAE;AAFC,SAAD,EAGR;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHQ,EAKZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALY,CADZ;AAOAe,QAAAA,SAAS,EAAE;AAPX,OAFY;AAWhBJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EACN;AAACC,UAAAA,KAAK,EAAExC,IAAI,CAAEO,OAAD,KAAc;AAC3BO,YAAAA,IAAI,EAAE,OADqB;AAE3BC,YAAAA,KAAK,4BAAqBR,OAAO,CAACkB,IAA7B;AAFsB,WAAd,CAAD;AAAZ,SAFI;AAKJoB,QAAAA,OAAO,EAAC;AACJL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,kDAAD,CADN;AAEJ8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SALJ;AASJC,QAAAA,GAAG,EAAE;AACDH,UAAAA,KAAK,EAAExB,MAAM;AADZ;AATD;AAXQ,KA/bxB;AAsdIqG,IAAAA,yBAAyB;AACrBhF,MAAAA,OAAO,EAAE,QADY;AAErBhB,MAAAA,EAAE,EAAE,2BAFiB;AAGrBoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC+CU,UAAAA,MAAM,EAAE;AADvD,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CAAV;AAA+CU,UAAAA,MAAM,EAAC;AAAtD,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CAAV;AAA+CU,UAAAA,MAAM,EAAE;AAAvD,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CAAV;AAA+CU,UAAAA,MAAM,EAAC;AAAtD;AAZb;AAHiB,OAiB1B2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBC,GAAnB,CAAuBuB,UAAxB,CAAJ,CAjBkB,CAtd7B;AAyeAC,IAAAA,eAAe;AACXlF,MAAAA,OAAO,EAAE,QADE;AAEXhB,MAAAA,EAAE,EAAE,iBAFO;AAGXoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC0BU,UAAAA,MAAM,EAAE;AADlC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHO,OAiBZ2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBI,GAAnB,CAAuBoB,UAAxB,CAAJ,CAjBI,CAzef;AA4fAE,IAAAA,eAAe;AACXnF,MAAAA,OAAO,EAAE,QADE;AAEXhB,MAAAA,EAAE,EAAE,iBAFO;AAGXoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,QAAD,CAAP,EAAmBA,MAAM,CAAC,OAAD,CAAzB,CADT;AAC8CU,UAAAA,MAAM,EAAE;AADtD,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHO,OAiBZ2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBM,GAAnB,CAAuBkB,UAAxB,CAAJ,CAjBI,CA5ff;AA+gBAG,IAAAA,iBAAiB;AACbpF,MAAAA,OAAO,EAAE,QADI;AAEbhB,MAAAA,EAAE,EAAE,mBAFS;AAGboB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAjD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAG;AAArC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHS,OAiBd2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBQ,KAAnB,CAAyBgB,UAA1B,CAAJ,CAjBM,CA/gBjB;AAkiBAI,IAAAA,mBAAmB;AACfrF,MAAAA,OAAO,EAAE,QADM;AAEfhB,MAAAA,EAAE,EAAE,qBAFW;AAGfoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC4BU,UAAAA,MAAM,EAAE;AADpC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHW,OAiBhB2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBU,OAAnB,CAA2Bc,UAA5B,CAAJ,CAjBQ,CAliBnB;AAqjBAK,IAAAA,qBAAqB;AACjBtF,MAAAA,OAAO,EAAE,QADQ;AAEjBhB,MAAAA,EAAE,EAAE,uBAFa;AAGjBoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,mBAAmBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAxD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC4BU,UAAAA,MAAM,EAAE;AADpC,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHa,OAiBlB2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBY,SAAnB,CAA6BY,UAA9B,CAAJ,CAjBU,CArjBrB;AAwkBAM,IAAAA,mBAAmB;AACfvF,MAAAA,OAAO,EAAE,QADM;AAEfhB,MAAAA,EAAE,EAAE,qBAFW;AAGfoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC4BU,UAAAA,MAAM,EAAE;AADpC,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAE;AADnC,SAPe,EAUf;AAACzB,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAC;AAAnC,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAAC1F,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC,SAXhB;AAYIsB,QAAAA,OAAO,EAAE;AAAC/C,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CAAhB;AAA4BU,UAAAA,MAAM,EAAE;AAApC;AAZb;AAHW,OAiBhB2B,QAAQ,CAAC3C,GAAG,CAACR,UAAU,CAAC2F,OAAX,CAAmBc,OAAnB,CAA2BU,UAA5B,CAAJ,CAjBQ,CAxkBnB;AA4lBoBO,IAAAA,mBAAmB;AACfxF,MAAAA,OAAO,EAAE,QADM;AAEfhB,MAAAA,EAAE,EAAE,qBAFW;AAGfoB,MAAAA,EAAE,EAAE;AAACoC,QAAAA,UAAU,EAAC,CACZ;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAC;AADlC,SADY,EAGZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,kBAAkBH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAApD,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC2BU,UAAAA,MAAM,EAAC;AADlC,SAHY,EAKZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAEe,MAAM,CAAC,QAAD,CADf;AAC4BU,UAAAA,MAAM,EAAC;AADnC,SALY,EAMqC;AAACA,UAAAA,MAAM,EAAE;AAAT,SANrC;AAAZ;AAHW,OAUbQ,aAAa,CAACxB,GAAG,CAAC,wGAAD,CAAJ,CAVA,CA5lBvC;AA0mBAmH,IAAAA,QAAQ;AACJzF,MAAAA,OAAO,EAAE,QADL;AAEJhB,MAAAA,EAAE,EAAE,UAFA;AAGJoB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD,CADX;AAIIsB,QAAAA,OAAO,EAAE;AAJb;AAHA,OASOd,aAAa,CAACxB,GAAG,CAAC,4CAAD,CAAJ,CATpB,CA1mBR;AAsnBIoH,IAAAA,mBAAmB,EAAC;AAChB1F,MAAAA,OAAO,EAAE,QADO;AAEhBhB,MAAAA,EAAE,EAAE,qBAFY;AAGhBiB,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,oBAAOrB,WAAW,CAAC,kBAAD,CAAlB;AADH;AAHS,KAtnBxB;AA6nBI8G,IAAAA,eAAe,EAAC;AACZ3F,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,iBAFQ;AAGZoB,MAAAA,EAAE,EAAC;AACCC,QAAAA,SAAS,EAAC,CAAC;AACPQ,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MADrC;AAEPD,UAAAA,MAAM,EAAE;AAFD,SAAD,EAGN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,MAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAHM,EAKN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,aAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SALM,EAON;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAPM,EASN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,UAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SATM,EAWN;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAaA,OAAO,CAACqB,YAAR,KAAyB,SAA7C;AACAD,UAAAA,MAAM,EAAE;AADR,SAXM;AAaN;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEwB;AAACA,UAAAA,MAAM,EAAC;AAAR,SA3BU;AADX,OAHS;AAiCZW,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAExC,IAAI,CAAC,WAAD;AADP,SADJ;AAGJ6C,QAAAA,OAAO,EAAE;AACLL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,wBAAD,CADL;AAEL8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAHL;AAjCI,KA7nBpB;AA0qBIuF,IAAAA,cAAc;AACV5G,MAAAA,EAAE,EAAE,gBADM;AAEVoB,MAAAA,EAAE,EAAC;AAACC,QAAAA,SAAS,EAAC,CAAC;AACXxC,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADJ;AAEXnD,UAAAA,MAAM,EAAE;AAFG,SAAD,CAAX;AAGCsB,QAAAA,OAAO,EAAE;AAHV;AAFO,OAMPd,aAAa,CAACxB,GAAG,CAAC,yEAAD,CAAJ,CANN,CA1qBlB;AAmrBIuH,IAAAA,aAAa;AACT7F,MAAAA,OAAO,EAAE,QADA;AAEThB,MAAAA,EAAE,EAAE,eAFK;AAGToB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAC,CAAC;AACR3E,UAAAA,OAAO,EAAED,MAAM,CAAEM,OAAD,IAAa;AAAE,mBAAO;AAAEkB,cAAAA,IAAI,EAAElB,OAAO,CAACuE;AAAhB,aAAP;AAAoC,WAApD,CADP;AAERnD,UAAAA,MAAM,EAAE;AAFA,SAAD,EAIX;AAACA,UAAAA,MAAM,EAAE;AAAT,SAJW;AADX;AAHK,OAUEQ,aAAa,CAACxB,GAAG,CAAC;AACjD;AACA;AACA,0JAHgD,CAAJ,CAVf,CAnrBjB;AAksBIwH,IAAAA,aAAa;AACT9F,MAAAA,OAAO,EAAE,QADA;AAEThB,MAAAA,EAAE,EAAE,eAFK;AAGToB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ;AAHK,OAINP,aAAa,CAACxB,GAAG,CAAC,0CAAD,CAAJ,CAJP,CAlsBjB;AAwsBIyH,IAAAA,gBAAgB,EAAC;AACb/F,MAAAA,OAAO,EAAE,QADI;AAEbhB,MAAAA,EAAE,EAAE,kBAFS;AAGboB,MAAAA,EAAE,EAAE;AACAoC,QAAAA,UAAU,EAAE,CAAC;AACT3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA9C,CADV;AAET5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,OAAD,CAAP,EAAkBA,MAAM,CAAC,QAAD,CAAxB,EAAoChB,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEtC;AAAX,aAAP;AAAuB,WAAtC,CAA1C,CAFA;AAGTpE,UAAAA,MAAM,EAAE;AAHC,SAAD,EAIR;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAJQ,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY,CADZ;AAQAe,QAAAA,SAAS,EAAE;AARX,OAHS;AAabJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EACN;AAACC,UAAAA,KAAK,EAAExC,IAAI,CAAEO,OAAD,KAAc;AAC3BO,YAAAA,IAAI,EAAE,OADqB;AAE3BC,YAAAA,KAAK,4BAAqBR,OAAO,CAACkB,IAA7B;AAFsB,WAAd,CAAD;AAAZ,SAFI;AAKJoB,QAAAA,OAAO,EAAC;AACJL,UAAAA,KAAK,EAAE7B,GAAG,CAAC,kDAAD,CADN;AAEJ8B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SALJ;AASJC,QAAAA,GAAG,EAAE;AACDH,UAAAA,KAAK,EAAExB,MAAM;AADZ;AATD;AAbK,KAxsBrB;AAmuBIsH,IAAAA,sBAAsB;AAClBjG,MAAAA,OAAO,EAAE,QADS;AAElBhB,MAAAA,EAAE,EAAE,wBAFc;AAGlBoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,OAAD,CAAP,EAAkBA,MAAM,CAAC,QAAD,CAAxB,EAAoChB,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEnC;AAAX,aAAP;AAAuB,WAAtC,CAA1C,CADT;AAC6FvE,UAAAA,MAAM,EAAE;AADrG,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,OAAD,CAAP,EAAkBA,MAAM,CAAC,QAAD,CAAxB,CADT;AAC+CU,UAAAA,MAAM,EAAE;AADvD,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACe,MAAM,CAAC,OAAD,CAAP,EAAiBA,MAAM,CAAC,OAAD,CAAvB,EAAmChB,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEnC;AAAX,aAAP;AAAuB,WAAtC,CAAzC,CADT;AAC6FvE,UAAAA,MAAM,EAAE;AADrG,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,EAAsDtH,MAAM,CAAC,OAAD,CAA5D,CADT;AACiFU,UAAAA,MAAM,EAAE;AADzF,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHc,OAiBnBkC,SAAS,EAjBU,CAnuB1B;AAsvBA4E,IAAAA,YAAY;AACRpG,MAAAA,OAAO,EAAE,QADD;AAERhB,MAAAA,EAAE,EAAE,cAFI;AAGRoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEjC;AAAX,aAAP;AAAuB,WAAtC,CAAP,CADT;AAC0DzE,UAAAA,MAAM,EAAE;AADlE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEjC;AAAX,aAAP;AAAuB,WAAtC,CAAP,CADT;AACyDzE,UAAAA,MAAM,EAAE;AADjE,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHI,OAiBTkC,SAAS,EAjBA,CAtvBZ;AAywBA6E,IAAAA,YAAY;AACRrG,MAAAA,OAAO,EAAE,QADD;AAERhB,MAAAA,EAAE,EAAE,cAFI;AAGRoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAlD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE/B;AAAX,aAAP;AAAyB,WAAxC,CAAP,CADT;AAC4D3E,UAAAA,MAAM,EAAE;AADpE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,UAAUF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAA/C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE/B;AAAX,aAAP;AAAyB,WAAxC,CAAP,CADT;AAC4D3E,UAAAA,MAAM,EAAE;AADpE,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHI,OAiBTkC,SAAS,EAjBA,CAzwBZ;AA4xBA8E,IAAAA,cAAc;AACVtG,MAAAA,OAAO,EAAE,QADC;AAEVhB,MAAAA,EAAE,EAAE,gBAFM;AAGVoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE7B;AAAX,aAAP;AAA2B,WAA1C,CAAP,CADT;AAC8D7E,UAAAA,MAAM,EAAE;AADtE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,YAAYF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAjD,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE7B;AAAX,aAAP;AAA2B,WAA1C,CAAP,CADT;AAC8D7E,UAAAA,MAAM,EAAE;AADtE,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAG;AAAV,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHM,OAiBXkC,SAAS,EAjBE,CA5xBd;AA+yBA+E,IAAAA,gBAAgB;AACZvG,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE3B;AAAX,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE/E,UAAAA,MAAM,EAAE;AADxE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAE3B;AAAX,aAAP;AAA6B,WAA5C,CAAP,CADT;AACiE/E,UAAAA,MAAM,EAAE;AADzE,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHQ,OAiBbkC,SAAS,EAjBI,CA/yBhB;AAk0BAgF,IAAAA,kBAAkB;AACdxG,MAAAA,OAAO,EAAE,QADK;AAEdhB,MAAAA,EAAE,EAAE,oBAFU;AAGdoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,mBAAmBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAxD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEzB;AAAX,aAAP;AAA2B,WAA1C,CAAP,CADT;AAC+DjF,UAAAA,MAAM,EAAE;AADvE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,gBAAgBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAArD,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAE8H,cAAAA,OAAO,EAAEzB;AAAX,aAAP;AAA2B,WAA1C,CAAP,CADT;AAC8DjF,UAAAA,MAAM,EAAE;AADtE,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAPe,EAUf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVe,CAAf;AAWIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAXhB;AAYI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAZV;AAHU,OAiBfkC,SAAS,EAjBM,CAl0BlB;AAs1BAiF,IAAAA,gBAAgB;AACZzG,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAAIoC,QAAAA,UAAU,EAAC,CACf;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,iBAAiBF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAtD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACiE5G,UAAAA,MAAM,EAAE;AADzE,SADe,EAGf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,cAAcF,cAAc,CAACE,OAAO,CAACuE,SAAT,CAAd,IAAqC,EAAnD,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AACgE5G,UAAAA,MAAM,EAAE;AADxE,SAHe,EAKf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACAnD,UAAAA,MAAM,EAAE;AADR,SALe,EAOf;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEE;AAAV,aAAP;AAA6B,WAA5C,CAAP,CADT;AAEA5G,UAAAA,MAAM,EAAE;AAFR,SAPe,EAWf;AAACA,UAAAA,MAAM,EAAC;AAAR,SAXe,CAAf;AAYIiE,QAAAA,UAAU,EAAE;AAACjE,UAAAA,MAAM,EAAE;AAAT,SAZhB;AAaI6G,QAAAA,IAAI,EAAE;AAAC7G,UAAAA,MAAM,EAAE;AAAT;AAbV;AAHQ,OAkBbkC,SAAS,EAlBI,CAt1BhB;AA22BoBkF,IAAAA,gBAAgB;AACZ1G,MAAAA,OAAO,EAAE,QADG;AAEZhB,MAAAA,EAAE,EAAE,kBAFQ;AAGZoB,MAAAA,EAAE,EAAE;AAACoC,QAAAA,UAAU,EAAC,CACZ;AAAC3B,UAAAA,IAAI,EAAG3C,OAAD,IAAa,aAAaH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA/C,CAApB;AACA5E,UAAAA,OAAO,EAAE,CAACD,MAAM,CAAEM,OAAD,IAAa;AAAC,mBAAO;AAAC8H,cAAAA,OAAO,EAAEtC;AAAV,aAAP;AAAsB,WAArC,CAAP,CADT;AACyDpE,UAAAA,MAAM,EAAC;AADhE,SADY,EAGZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,kBAAkBH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAApD,CAApB;AACAnD,UAAAA,MAAM,EAAC;AADP,SAHY,EAKZ;AAACuB,UAAAA,IAAI,EAAG3C,OAAD,IAAa,WAAWH,WAAW,CAACG,OAAO,CAACuE,SAAT,CAAX,IAAkC,EAA7C,CAApB;AACAnD,UAAAA,MAAM,EAAC;AADP,SALY,EAMU;AAACA,UAAAA,MAAM,EAAC;AAAR,SANV;AAAZ;AAHQ,OAWTQ,aAAa,CAACxB,GAAG,CAAC,4DAAD,CAAJ,CAXJ,CA32BpC;AA43BJqI,IAAAA,SAAS,EAAC;AACN3G,MAAAA,OAAO,EAAE,QADH;AAENhB,MAAAA,EAAE,EAAC,WAFG;AAGNoB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAHE;AAINJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAC;AAACC,UAAAA,KAAK,EAAE7B,GAAG,CAAC,uBAAD;AAAX;AADH;AAJF,KA53BN;AAs4BJsI,IAAAA,QAAQ,EAAC;AACL5H,MAAAA,EAAE,EAAE,UADC;AAELoB,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAFC;AAGLF,MAAAA,KAAK,EAAE7B,GAAG,CAAC,4CAAD;AAHL;AAt4BL;AAFwD,CAA7D;AA+4BP,OAAO4H,UAAP,MAAuB,gCAAvB;AACA,OAAOxC,GAAP,MAAgB,yBAAhB;AACA,OAAOG,GAAP,MAAgB,0BAAhB;AACA,OAAOE,GAAP,MAAgB,yBAAhB;AACA,OAAOE,KAAP,MAAkB,2BAAlB;AACA,OAAOE,OAAP,MAAoB,8BAApB;AACA,OAAOE,SAAP,MAAsB,+BAAtB;AACA,OAAOE,OAAP,MAAoB,6BAApB","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport {game_vocab} from \"./definitions_and_words\"\nimport {gameGrammar, animalsGrammar, weekdaysGrammar, occupationsGrammar, familyGrammar, verbsGrammar, coloursGrammar, geographicalGrammar} from \"./grammars/vocabGrammar\"\n\nconst promptReset: Action<SDSContext, SDSEvent> = assign((context) => { return { count:0} })\nconst scoreReset: Action<SDSContext, SDSEvent> = assign((context) => { return { score:0} })\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n \nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst {cancel} = actions\n\nfunction invoke_rasa(go_to_state: string,): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n            invoke: {\n                id: 'rasaApi',\n                src: (context, event) =>  nluRequest(context.task),\n                onDone:{\n                    target: go_to_state,\n                    actions:[\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\n                        (context:SDSContext, event:any) => console.log(event.data)]\n                },\n                onError:{\n                    target: '#welcome',\n                    actions: (context, event) => console.log(event.data)\n}}})}\n\nfunction sayAskTimeout(say_this: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: [promptReset, say_this],\n                on: { ENDSPEECH: 'ask'}},\n            ask: {\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 30000, id: 'timer'})]\n            },\n            nomatch: {\n                entry: say('Sorry, please repeat.'),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            timeout_final: {\n                entry: say('Returning to idle.'),\n                on: {ENDSPEECH: \"idle\"}\n            },\n            idle:{\n                id: 'idle',\n                type: 'final'\n            },\n            timeout: {\n                initial: 'prompt',\n                on: {TIMEOUT: [{cond: (context) => context.count ===1, target: 'reprompt0'},\n                                {cond: (context) => context.count ===2, target: 'reprompt1'},\n                                {cond: (context) => context.count ===3, target: 'reprompt2'},\n                                {cond: (context) => context.count ===4, target: 'timeout_final'}]},\n                states:{\n                    prompt: {\n                        entry: send('TIMEOUT')\n                    }\n                }\n            },\n            reprompt0: {\n                entry: say(\" Doesn't look like I can hear you well. Please try again\"),\n                on: {ENDSPEECH: 'ask'}\n            },\n            reprompt1: {\n                entry: say('Sorry, still nothing.'),\n                on: {ENDSPEECH: 'ask'}\n            },\n            reprompt2: {\n                entry: say(':et us give it one last try'),\n                on: {ENDSPEECH: 'ask'}\n}}})}\n\n\nfunction Say_play(say_word: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: [promptReset, say_word],\n                on: {ENDSPEECH: 'ask'}},\n            ask: {\n                entry: [send('LISTEN'), send ('TIMEOUT', {delay: 20000, id:'timer2'})]\n            },\n            nomatch: {\n                entry: say(\"I'm afraid not! Try again!\"),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            idle:{\n                type: 'final'\n            },\n            timeout: {\n                initial: 'prompt',\n                on: {TIMEOUT: [{target: 'reprompt'}]},\n                states:{\n                    prompt: {\n                        entry: send('TIMEOUT')\n                    }\n                }\n            },\n            almost:{\n                entry: say(\"Right! But what is the correct article?\"),\n                on:{ENDSPEECH: 'ask'}\n            },\n            match: {\n                entry: say('Correct!'),\n                on: {ENDSPEECH:'go_to_next'}\n            },\n            reprompt:{\n                entry: say('Time is running out!')\n\n            },\n            go_to_next:{\n                entry: send('NEXT_STATE')\n            },\n            skip_to_next:{\n                entry: send('SKIP_STATE')\n            },\n}})}\n\nfunction Show_play(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({ \n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: send('SHOW')},\n            show:{\n                entry: say(' '),\n                on:{\n                    ENDSPEECH: 'ask'\n                }\n            },\n            ask: { entry: listen()\n            },\n            nomatch: {\n                entry: say(\"I'm afraid not! Try again!\"),\n                on: {ENDSPEECH: \"ask\"}\n            },\n            idle:{\n                type: 'final'\n            },\n            reprompt: {\n                entry: [say(\"Time is up three!\")],\n                on: {ENDSPEECH: 'go_to_next'}\n            },\n            almost:{\n                entry: say(\"Right! But what is the correct article?\"),\n                on:{ENDSPEECH: 'ask'}\n            },\n            match: {\n                entry: say('Correct!'),\n                on: {ENDSPEECH:'go_to_next'}\n            },\n            go_to_next:{\n                entry: send('NEXT_STATE')\n            },\n            skip_to_next:{\n                entry: send('SKIP_STATE')\n            },\n}})}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://swenglish.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json()); \n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'start_point',\n    states: {\n        start_point:{\n            id: 'starting_poing',\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            id: 'welcome',\n            initial: 'prompt',\n            on: {ENDSPEECH:'which_game'},\n            states:{\n                prompt:{\n                    entry: [scoreReset, say('Welcome to Sweenglish!')]}\n            }\n        },\n        which_game:{\n            initial: 'prompt',\n            id: 'which_game',\n            on: {\n                RECOGNISED:[{\n                    actions: assign((context) => { return { task: context.recResult } }),\n                    target: 'choice'}]},\n            \n            states:{\n                prompt: {\n                    entry: say('Which game would you like to play?'),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                ask:{ entry: listen()\n                }\n            }},\n\n        choice:{\n            initial: 'prompt',\n            states:{\n                prompt: { ...invoke_rasa('#tool')}\n            }\n        },\n        tool:{\n            initial: 'prompt',\n            id: 'tool',\n            on:{\n                ENDSPEECH:[{\n                    cond: (context) => context.intentResult === 'Definitions',\n                    target: '#definitions'},\n                    {cond: (context) => context.intentResult === 'Words',\n                    target: '#wordplay'},\n                    {cond: (context) => context.intentResult === 'Pictures',\n                    target: '#pictures'},\n                    {cond: (context) => context.intentResult === 'Quit',\n                    target: '#exit_app'},\n                    {cond: (context) => context.intentResult === 'Help',\n                    target: '#general_help'},\n                    {cond: (context) => context.intentResult === 'Animals' || context.intentResult === 'Weekdays' || context.intentResult === 'Family' || context.intentResult === 'Occupation' \n                    || context.intentResult === 'Colours' || context.intentResult === 'Verbs' || context.intentResult === 'Family' || context.intentResult === 'Geographical',\n                    target: '.pick_game'},\n                {target:'.nomatch'}]\n            },\n            states: {\n                prompt: {\n                    entry: send('ENDSPEECH')},\n                nomatch: {\n                    entry: say(\"Sadly such game is not yet implemented. Let us try again.\"),\n                    on: {ENDSPEECH: '#which_game'}\n                    },\n                pick_game:{\n                    entry: say(\"Great choice, but you have to choose a game mode first. Please try again\"),\n                    on: {ENDSPEECH: '#which_game'}}}\n        },\n        general_help:{\n            initial: 'prompt',\n            id: 'general_help',\n            on: {ENDSPEECH: '#which_game'},\n            states: {\n                prompt: {entry: say(' Swenglish has three games: wordplay, definitions, and picturs. In Wordplay, you will be given a word in English and will have to come up,\\\n                 with its correspondence in Swedish. In definitions, you will be given definitions and will have to say the corresponding word in Swedish. In pictures, you will\\\n                be shown a picture and will have to name what you see in Swedish.')}\n        }},\n        wordplay: {\n            initial: 'prompt',\n            id: 'wordplay',\n            on: {\n                RECOGNISED:[{\n                    actions: [assign((context) => { return { game_mode: context.intentResult } }), cancel('timer')],\n                    target: '#wordplay_invocation'}],\n                    TIMEOUT: '.timeout'\n            },\n                    ...sayAskTimeout(say(\"Wordplay! Pick a category and let's start.\"))\n\n        },\n            wordplay_invocation:{\n                initial: 'prompt',\n                id: 'wordplay_invocation',\n                states:{\n                    prompt: { ...invoke_rasa('#wordplay_choice')}\n                }\n            },\n            wordplay_choice:{\n                initial: 'prompt',\n                id: 'wordplay_choice',\n                on:{\n                    ENDSPEECH:[{\n                        cond: (context) => context.intentResult === 'Help',\n                        target: 'wordplay_help'},\n                        {cond: (context) => context.intentResult === 'Quit',\n                        target: '#quit_game'},\n                        {cond: (context) => context.intentResult === 'Definitions',\n                        target: '#definitions'},\n                        {cond: (context) => context.intentResult === 'Wordplay',\n                        target: 'wordplay_again'},\n                        {cond: (context) => context.intentResult === 'Pictures',\n                        target: '#pictures'},\n                        {cond: (context) => context.intentResult === 'Animals',\n                        target: 'wordplay_pregame'},\n                        {cond: (context) => context.intentResult === 'Weekdays',\n                        target: 'wordplay_weekdays'},\n                        /*\n                        {cond: (context) => context.intentResult === 'Occupation',\n                        target: 'wordplay_occupation'},\n                        {cond: (context) => context.intentResult === 'Colours',\n                        target: 'wordplay_colours'},\n                        {cond: (context) => context.intentResult === 'Verbs',\n                        target: 'wordplay_verbs'},\n                        {cond: (context) => context.intentResult === 'Family',\n                        target: 'wordplay_family'},\n                        {cond: (context) => context.intentResult === 'Geographical',\n                        target: 'wordplay_geographical'},*/\n  \n                    {target:'.nomatch'}]\n                },\n                states: {\n                    prompt: {\n                        entry: send('ENDSPEECH')},\n                    nomatch: {\n                        entry: say(\"Unavailable right now.\"),\n                        on: {ENDSPEECH: '#welcome'}\n                            \n                        }\n                            \n                    }\n    \n            },\n            wordplay_again:{\n                id: 'wordplay_again',\n                on:{ENDSPEECH:[{\n                    actions: assign((context) => { return { task: context.recResult } }),\n                    target: '#wordplay_invocation'}],\n                    TIMEOUT: '.timeout' },\n                ...sayAskTimeout(say('You are already in the Wordplay mode! Pick a category to start playing.'))\n\n            },\n            wordplay_help:{\n                initial: 'prompt',\n                id: 'wordplay_help',\n                on: {\n                    RECOGNISED:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: 'wordplay_invocation'},\n                    \n                    {target: \".nomatch\"}]\n                },\n                        ...sayAskTimeout(say(\"Wordplay is a game where you will be given a word in English and will have to say its correspondence in Swedish. You can choose from seven categories:\\\n                        Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                        Where applicable, be mindful of articles! You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\n            },\n            wordplay_quit:{\n                initial: 'prompt',\n                id: 'wordplay_quit',\n                on: {ENDSPEECH: '#which_game'},\n               ...sayAskTimeout(say(\"Quitting Wordplay.\"))\n            },\n            wordplay_pregame:{\n                initial: 'prompt',\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.game_mode === \"Animals\",\n                        target: \"#wordplay_animals_begin\"},\n                        {cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}) && context.game_mode === \"Weekdays\",\n                        target: \"#wordplay_weekdays_begin\"},\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                        target: \"#quit_game\"},\n                    { target: \".nomatch\" }],\n                    ENDSPEECH: '.ask'\n                },\n                states: {\n                    prompt:\n                    {entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.`}))},\n                    nomatch:{\n                        entry: say('Sorry, I did not quite catch that. Please repeat'),\n                        on: {ENDSPEECH: 'ask'},\n                    },\n                    ask: {\n                        entry: listen()\n                    }}},\n            wordplay_animals_begin:{\n                initial: 'prompt',\n                id: 'wordplay_animals_begin',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                    {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                    {actions: cancel('timer2'), target:'.nomatch'}],\n\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\n                        SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_dog'},\n                        TIMEOUT: {actions: cancel('timer2'), target:'.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.cat.english))\n        },\n        wordplay_dog:{\n            initial: 'prompt',\n            id: 'wordplay_dog',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_fox'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.dog.english))\n        },\n        wordplay_fox:{\n            initial: 'prompt',\n            id: 'wordplay_fox',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer')], target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_sheep'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.fox.english))\n            },    \n        wordplay_sheep:{\n            initial: 'prompt',\n            id: 'wordplay_sheep',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target:  '#wordplay_giraffe'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.sheep.english))\n        },          \n        wordplay_giraffe:{\n            initial: 'prompt',\n            id: 'wordplay_giraffe',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })], target: '.match',},\n                {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                actions: cancel('timer2'),  target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_crocodile'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.giraffe.english))\n        },   \n        wordplay_crocodile:{\n            initial: 'prompt',\n            id: 'wordplay_crocodile',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_peacock'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.crocodile.english))\n        },      \n        wordplay_peacock:{\n            initial: 'prompt',\n            id: 'wordplay_peacock',\n            on: {   RECOGNISED:[\n                {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                actions: [cancel('timer2'), cancel('timer'), assign((context)=>{ return { score: (context.score || 0)+1 } })],  target: '.match',},\n                {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.almost',},\n                {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '.skip_to_next'},\n                {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                actions: cancel('timer2'), target: '#quit_game'},\n\n                {actions: cancel('timer2'), target:'.nomatch'}],\n                    NEXT_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    SKIP_STATE: {actions: cancel('timer2'), target: '#wordplay_summary'},\n                    TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n        },\n        ...Say_play(say(game_vocab.animals.peacock.english))\n        },                                            \n    \n                            wordplay_summary:{\n                                initial: 'prompt',\n                                id: 'wordplay_summary',\n                                on: {RECOGNISED:[\n                                    {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                    actions: [cancel('timer2'), cancel('timer')], target:'#wordplay_animals_begin' },\n                                    {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                    actions: [cancel('timer2'), cancel('timer')], target:'#which_game' },\n                                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                    actions: [cancel('timer2'), cancel('timer')],  target:'#exit_app' }, \n                                    {target:'.nomatch'}]},\n                               ...sayAskTimeout(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Well done! Your current score is ${context.score}. Would you like to repeat, or play another game?`})))\n\n\n            },\n            definitions: {\n                initial: 'prompt',\n                id: 'definitions',\n                on: {\n                    RECOGNISED:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#definitions_invocation'}],\n                        TIMEOUT: '.timeout'\n                },\n                        ...sayAskTimeout(say(\"Definitions! Pick a category and let's start.\"))\n    \n            },\n                definitions_invocation:{\n                    initial: 'prompt',\n                    id: 'definitions_invocation',\n                    states:{\n                        prompt: { ...invoke_rasa('#definitions_choice')}\n                    }\n                },\n                definitions_choice:{\n                    initial: 'prompt',\n                    id: 'definitions_choice',\n                    on:{\n                        ENDSPEECH:[{\n                            cond: (context) => context.intentResult === 'Help',\n                            target: 'definitions_help'},\n                            {cond: (context) => context.intentResult === 'Quit',\n                            target: '#quit_game'},\n                            {cond: (context) => context.intentResult === 'Definitions',\n                            target: '#definitions_again'},\n                            {cond: (context) => context.intentResult === 'Wordplay',\n                            target: 'wordplay'},\n                            {cond: (context) => context.intentResult === 'Animals',\n                            target: 'definitions_pregame'},\n                            /*\n                            {cond: (context) => context.intentResult === 'Weekdays',\n                            target: 'wordplay_weekdays'},\n                            {cond: (context) => context.intentResult === 'Occupation',\n                            target: 'wordplay_occupation'},\n                            {cond: (context) => context.intentResult === 'Colours',\n                            target: 'wordplay_colours'},\n                            {cond: (context) => context.intentResult === 'Verbs',\n                            target: 'wordplay_verbs'},\n                            {cond: (context) => context.intentResult === 'Family',\n                            target: 'wordplay_family'},\n                            {cond: (context) => context.intentResult === 'Geographical',\n                            target: 'wordplay_geographical'},*/\n      \n                        {target:'.nomatch'}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send('ENDSPEECH')},\n                        nomatch: {\n                            entry: say(\"Unavailable right now.\"),\n                            on: {ENDSPEECH: '#welcome'}\n                                \n                            }\n                                \n                        }\n        \n                },\n                definitions_again:{\n                    id: 'definitions_again',\n                    on:{ENDSPEECH:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#definitions_invocation'}],\n                        TIMEOUT: '.timeout' },\n                    ...sayAskTimeout(say('You are already in the Definitions mode! Pick a category to start playing.'))\n    \n                },\n                definitions_help:{\n                    initial: 'prompt',\n                    id: 'definitions_help',\n                    on: {\n                        RECOGNISED:[{\n                            actions: assign((context) => { return { task: context.recResult } }),\n                            target: 'definitions_invocation'},\n                        \n                        {target: \".nomatch\"}]\n                    },\n                            ...sayAskTimeout(say(\"Definitions is a game where you will be given a definition in English and will have to say a corresponding word in Swedish. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You have limited time to asnwer your question.\\\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the wordplay game.\"))\n                },\n                definitions_quit:{\n                    initial: 'prompt',\n                    id: 'definitions_quit',\n                    on: {ENDSPEECH: '#welcome'},\n                   ...sayAskTimeout(say(\"Quitting definitions. Choose another game. \"))\n                },\n                definitions_pregame:{\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\n                            target: \"#definitions_animals_begin\"},\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                            target: \"#quit_game\"},\n                        { target: \".nomatch\" }],\n                        ENDSPEECH: '.ask'\n                    },\n                    states: {\n                        prompt:\n                        {entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode. Remember to speak in Swedish.`}))},\n                        nomatch:{\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\n                            on: {ENDSPEECH: 'ask'},\n                        },\n                        ask: {\n                            entry: listen()\n                }}},\n                definitions_animals_begin:{\n                    initial: 'prompt',\n                    id: 'definitions_animals_begin',\n                    on: {   RECOGNISED:[\n                        {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer2'), cancel('timer')], target: '.match',},\n                        {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer2'), cancel('timer')], target: '.almost',},\n                        {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                        actions: [cancel('timer2'), cancel('timer')],  target: '.skip_to_next'},\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                        actions: [cancel('timer2'), cancel('timer')], target: '#quit_game'},\n    \n                        {actions: [cancel('timer2'), cancel('timer')], target:'.nomatch'}],\n                            NEXT_STATE: {actions: [cancel('timer2'), cancel('timer')], target: '#definitions_dog'},\n                            TIMEOUT: {actions: [cancel('timer2'), cancel('timer')], target:'.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.cat.definition))\n            },\n            definitions_dog:{\n                initial: 'prompt',\n                id: 'definitions_dog',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'), target: '.match',},\n                    {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'),target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_fox'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.dog.definition))\n            },\n            definitions_fox:{\n                initial: 'prompt',\n                id: 'definitions_fox',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [cancel('timer2'), cancel('timer')], target: '.match',},\n                    {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'), target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_sheep'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.fox.definition))\n                },    \n            definitions_sheep:{\n                initial: 'prompt',\n                id: 'definitions_sheep',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.match',},\n                    {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target:  '#definitions_giraffe'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.sheep.definition))\n            },          \n            definitions_giraffe:{\n                initial: 'prompt',\n                id: 'definitions_giraffe',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.match',},\n                    {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'),  target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_crocodile'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.giraffe.definition))\n            },   \n            definitions_crocodile:{\n                initial: 'prompt',\n                id: 'definitions_crocodile',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'),  target: '.match',},\n                    {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_peacock'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.crocodile.definition))\n            },      \n            definitions_peacock:{\n                initial: 'prompt',\n                id: 'definitions_peacock',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                    actions: cancel('timer2'),  target: '.match',},\n                    {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '.skip_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: cancel('timer2'), target: '#quit_game'},\n    \n                    {actions: cancel('timer2'), target:'.nomatch'}],\n                        NEXT_STATE: {actions: cancel('timer2'), target: '#definitions_summary'},\n                        TIMEOUT: {actions: cancel('timer2'), target: '.timeout'}\n            },\n            ...Say_play(say(game_vocab.animals.peacock.definition))\n            },                                            \n        \n                                definitions_summary:{\n                                    initial: 'prompt',\n                                    id: 'definitions_summary',\n                                    on: {RECOGNISED:[\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                        actions: cancel('timer2'), target:'#definitions_animals_begin' },\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                        actions: cancel('timer2'), target:'#which_game' },\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                        actions: cancel('timer2'),  target:'#exit_app' },{target: '.nomatch'}]},\n                                   ...sayAskTimeout(say('Well done! You now know a few animal names in Swedish! Would you like to repeat, or play another game?'))\n    \n                },\n\n            pictures: {\n                initial: 'prompt',\n                id: 'pictures',\n                on: {\n                    RECOGNISED:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#pictures_invocation'}],\n                        TIMEOUT: '.timeout'\n                },\n                        ...sayAskTimeout(say(\"Pictures! Pick a category and let's start.\"))\n    \n            },\n                pictures_invocation:{\n                    initial: 'prompt',\n                    id: 'pictures_invocation',\n                    states:{\n                        prompt: { ...invoke_rasa('#pictures_choice')}\n                    }\n                },\n                pictures_choice:{\n                    initial: 'prompt',\n                    id: 'pictures_choice',\n                    on:{\n                        ENDSPEECH:[{\n                            cond: (context) => context.intentResult === 'Help',\n                            target: 'pictures_help'},\n                            {cond: (context) => context.intentResult === 'Quit',\n                            target: '#quit_game'},\n                            {cond: (context) => context.intentResult === 'Definitions',\n                            target: '#definitions'},\n                            {cond: (context) => context.intentResult === 'Wordplay',\n                            target: '#wordplay'},\n                            {cond: (context) => context.intentResult === 'Pictures',\n                            target: '#pictures_again'},\n                            {cond: (context) => context.intentResult === 'Animals',\n                            target: '#pictures_pregame'},\n                            /*\n                            {cond: (context) => context.intentResult === 'Weekdays',\n                            target: 'wordplay_weekdays'},\n                            {cond: (context) => context.intentResult === 'Occupation',\n                            target: 'wordplay_occupation'},\n                            {cond: (context) => context.intentResult === 'Colours',\n                            target: 'wordplay_colours'},\n                            {cond: (context) => context.intentResult === 'Verbs',\n                            target: 'wordplay_verbs'},\n                            {cond: (context) => context.intentResult === 'Family',\n                            target: 'wordplay_family'},\n                            {cond: (context) => context.intentResult === 'Geographical',\n                            target: 'wordplay_geographical'},*/\n        \n                        {target:'.nomatch'}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send('ENDSPEECH')},\n                        nomatch: {\n                            entry: say(\"Unavailable right now.\"),\n                            on: {ENDSPEECH: '#welcome'}\n                                \n                            }\n                                \n                        }\n        \n                },\n                pictures_again:{\n                    id: 'pictures_again',\n                    on:{ENDSPEECH:[{\n                        actions: assign((context) => { return { task: context.recResult } }),\n                        target: '#pictures_invocation'}],\n                        TIMEOUT: '.timeout' },\n                    ...sayAskTimeout(say('You are already in the Pictures mode! Pick a category to start playing.'))\n    \n                },\n                pictures_help:{\n                    initial: 'prompt',\n                    id: 'pictures_help',\n                    on: {\n                        RECOGNISED:[{\n                            actions: assign((context) => { return { task: context.recResult } }),\n                            target: 'pictures_invocation'},\n                        \n                        {target: \".nomatch\"}]\n                    },\n                            ...sayAskTimeout(say(\"Pictures is a game where you will be shown a picture and will have to say the Swedish word for it. You can choose from seven categories:\\\n                            Animals, Weekdays, Occupations, Colours, Verbs, Family, and Nature Objects. Each category consists of seven words. Note that only answers in Swedish will be accepted.\\\n                            Where applicable, be mindful of articles! You have limited time for every question.\\\n                            You can quit the game by saying quit at any point in the game. You may now pick a category or change to the definitions game.\"))\n                },\n                pictures_quit:{\n                    initial: 'prompt',\n                    id: 'pictures_quit',\n                    on: {ENDSPEECH: '#welcome'},\n                    ...sayAskTimeout(say(\"Quitting Pictures. Choose another game. \"))\n                },\n                pictures_pregame:{\n                    initial: 'prompt',\n                    id: 'pictures_pregame',\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"start\" in (gameGrammar[context.recResult] || {}),\n                            actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: cat}})],\n                            target: \"#pictures_animals_begin\"},\n                            {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                            target: \"#quit_game\"},\n                        { target: \".nomatch\" }],\n                        ENDSPEECH: '.ask'\n                    },\n                    states: {\n                        prompt:\n                        {entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `You have chosen ${context.task}. Say start - if you wish to begin; or quit - if you wish to change the game or the mode.`}))},\n                        nomatch:{\n                            entry: say('Sorry, I did not quite catch that. Please repeat'),\n                            on: {ENDSPEECH: 'ask'},\n                        },\n                        ask: {\n                            entry: listen()\n                        }\n                    }\n                },\n                pictures_animals_begin:{\n                    initial: 'prompt',\n                    id: 'pictures_animals_begin',\n                    on: {   RECOGNISED:[\n                        {cond: (context) => \"en_cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer'), cancel('timer2'), assign((context) => {return { picture: dog}})], target: '.match'},\n                        {cond: (context) => \"cat\" in (animalsGrammar[context.recResult] || {}), \n                        actions: [cancel('timer'), cancel('timer2')],  target: '.almost'},\n                        {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                        actions: [cancel('timer'),cancel('timer'),  assign((context) => {return { picture: dog}})],  target: '.go_to_next'},\n                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                        actions: [assign((context) => {return {picture: Background}}), cancel('timer')], target: '#quit_game'},\n    \n                        {target:'.nomatch'}],\n                            NEXT_STATE: {target: '#pictures_dog'},\n                            SHOW: {target: '.show'},\n                },\n                ...Show_play()\n            },\n            pictures_dog:{\n                initial: 'prompt',\n                id: 'pictures_dog',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_dog\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: fox}})], target: '.match',},\n                    {cond: (context) => \"dog\" in (animalsGrammar[context.recResult] || {}),\n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: fox}})],target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_fox'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },\n            pictures_fox:{\n                initial: 'prompt',\n                id: 'pictures_fox',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_fox\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: sheep}})], target: '.match',},\n                    {cond: (context) => \"fox\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: sheep}})], target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_sheep'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },    \n            pictures_sheep:{\n                initial: 'prompt',\n                id: 'pictures_sheep',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"ett_sheep\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: giraffe}})], target: '.match',},\n                    {cond: (context) => \"sheep\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: giraffe}})], target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target:  '#pictures_giraffe'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },          \n            pictures_giraffe:{\n                initial: 'prompt',\n                id: 'pictures_giraffe',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: crocodile}})], target: '.match',},\n                    {cond: (context) => \"giraffe\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: crocodile}})],  target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_crocodile'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },   \n            pictures_crocodile:{\n                initial: 'prompt',\n                id: 'pictures_crocodile',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_crocodile\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return { picture: peacock}})],  target: '.match',},\n                    {cond: (context) => \"crocodile\" in (animalsGrammar[context.recResult] || {}), \n                    target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return { picture: peacock}})], target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_peacock'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },  \n\n            pictures_peacock:{\n                initial: 'prompt',\n                id: 'pictures_peacock',\n                on: {   RECOGNISED:[\n                    {cond: (context) => \"en_peacock\" in (animalsGrammar[context.recResult] || {}),\n                    actions: [assign((context) => {return {picture: Background}})],  target: '.match',},\n                    {cond: (context) => \"peacock\" in (animalsGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})], target: '.almost',},\n                    {cond: (context) => \"skip\" in (gameGrammar[context.recResult] || {}), \n                    target: '.go_to_next'},\n                    {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}), \n                    actions: [assign((context) => {return {picture: Background}})],\n                    target: '#quit_game'},\n    \n                    {target:'.nomatch'}],\n                        NEXT_STATE: {target: '#pictures_summary'},\n                        SHOW: {target: '.show'}\n            },\n            ...Show_play()\n        },                                            \n        \n                                pictures_summary:{\n                                    initial: 'prompt',\n                                    id: 'pictures_summary',\n                                    on: {RECOGNISED:[\n                                        {cond: (context) => \"repeat\" in (gameGrammar[context.recResult] || {}), \n                                        actions: [assign((context) => {return {picture: cat}})], target:'#pictures_animals_begin' },\n                                        {cond: (context) => \"change_game\" in (gameGrammar[context.recResult] || {}), \n                                        target:'#which_game' },\n                                        {cond: (context) => \"quit\" in (gameGrammar[context.recResult] || {}),\n                                        target:'#exit_app' }, {target:'.nomatch'}],\n                                        },\n                                    ...sayAskTimeout(say('Well done! Would you like to repeat, or play another game?'))\n        \n        \n                    },\n\n\n        quit_game:{\n            initial: 'prompt',\n            id:'quit_game',\n            on: {ENDSPEECH: '#which_game'},\n            states: {\n                prompt:{entry: say('Exiting current game.')\n\n                }\n            }\n        },\n        exit_app:{\n            id: 'exit_app',\n            on: {ENDSPEECH: '#idle'},\n            entry: say('Thank you for playing and have a nice day!')\n        }\n}})\n\nimport Background from \"./Pictures_game/Background.jpg\";\nimport cat from \"./Pictures_game/cat.jpg\";\nimport dog from \"./Pictures_game/dog.jpeg\";\nimport fox from \"./Pictures_game/fox.jpg\";\nimport sheep from \"./Pictures_game/sheep.jpg\";\nimport giraffe from \"./Pictures_game/giraffe.jpeg\";\nimport crocodile from \"./Pictures_game/crocodile.jpg\";\nimport peacock from \"./Pictures_game/peacock.jpg\";\n\nimport Monday from \"./Pictures_game/Monday.jpg\";\nimport Tuesday from \"./Pictures_game/Tuesday.jpg\";\nimport Wednesday from \"./Pictures_game/Wednesday.jpeg\";\nimport Thursday from \"./Pictures_game/Thursday.jpg\";\nimport Friday from \"./Pictures_game/Friday.jpg\";\nimport Saturday from \"./Pictures_game/Saturday.jpg\";\nimport Sunday from \"./Pictures_game/Sunday.jpg\";\n\nimport teacher from \"./Pictures_game/Teacher.jpeg\";\nimport doctor from \"./Pictures_game/Doctor.png\";\nimport builder from \"./Pictures_game/Builder.jpg\";\nimport lifeguard from \"./Pictures_game/Lifeguard.jpg\";\nimport actor from \"./Pictures_game/Actor.jpg\";\nimport engineer from \"./Pictures_game/Engineer.png\";\nimport garbage_man from \"./Pictures_game/Garbage_man.jpeg\";\n\nimport yellow from \"./Pictures_game/yellow.jpg\";\nimport red from \"./Pictures_game/red.jpg\";\nimport purple from \"./Pictures_game/purple.png\";\nimport brown from \"./Pictures_game/brown.jpg\";\nimport black from \"./Pictures_game/black.jpg\";\nimport white from \"./Pictures_game/white.jpg\";\nimport green from \"./Pictures_game/green.jpg\";\n\nimport go from \"./Pictures_game/go.png\";\nimport run from \"./Pictures_game/run.jpg\";\nimport eat from \"./Pictures_game/eat.jpg\";\nimport sleep from \"./Pictures_game/sleep.jpg\";\nimport write from \"./Pictures_game/write.jpg\";\nimport sing from \"./Pictures_game/sing.jpg\";\nimport drink from \"./Pictures_game/drink.jpg\";\n\nimport cousin from \"./Pictures_game/cousin.jpg\";\nimport brother from \"./Pictures_game/brother.jpeg\";\nimport sister from \"./Pictures_game/sister.jpg\";\nimport mum from \"./Pictures_game/mother.jpg\";\nimport dad from \"./Pictures_game/dad.jpg\";\nimport grandma_1 from \"./Pictures_game/grandma_1.jpg\";\nimport grandma_2 from \"./Pictures_game/grandma_2.jpg\";\n\nimport river from \"./Pictures_game/river.png\";\nimport mountain from \"./Pictures_game/mountain.jpg\";\nimport sea from \"./Pictures_game/sea.jpg\";\nimport forest from \"./Pictures_game/forest.jpg\";\nimport lake from \"./Pictures_game/lake.jpg\";\nimport cliff from \"./Pictures_game/cliff.jpg\";\nimport cave from \"./Pictures_game/cave.jpg\";\nimport { mapContext } from \"xstate/lib/utils\";\n"]},"metadata":{},"sourceType":"module"}