{"ast":null,"code":"import _slicedToArray from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/SwedishApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\R\\\\Desktop\\\\DialogueSystems\\\\SwedishApp\\\\src\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmSwenglish\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counterScore = 0;\nlet counterTimeout = 0;\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: _objectSpread({}, dmMachine),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle',\n            NEXT_WORD: {\n              actions: assign(context => {\n                if (context.score) {\n                  return {\n                    score: context.score + 1\n                  };\n                } else {\n                  return {\n                    score: counterScore + 1\n                  };\n                }\n              }),\n              target: 'idle'\n            },\n            TIMEOUT: {\n              actions: assign(context => {\n                if (context.count) {\n                  return {\n                    count: context.count + 1\n                  };\n                } else {\n                  return {\n                    count: counterTimeout + 1\n                  };\n                }\n              }),\n              target: 'idle'\n            }\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a color command.');\n        listen({\n          interimResults: false,\n          continuous: true,\n          language: 'sv-Se'\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n      /* speak: asEffect((context) => {\r\n      * console.log('Speaking...');\r\n       *     speak({text: context.ttsAgenda })\r\n       * } */\n\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\r\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 193,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/SwedishApp/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","inspect","dmMachine","url","iframe","useSpeechSynthesis","useSpeechRecognition","counterScore","counterTimeout","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","actions","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","RECOGNISED","NEXT_WORD","context","score","TIMEOUT","count","progress","match","speaking","ENDSPEECH","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listen","listening","stop","devTools","recStart","interimResults","continuous","language","recStop","ttsStart","effect","text","ttsCancel","current","service","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmSwenglish\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\nlet counterScore = 0\r\nlet counterTimeout = 0\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        NEXT_WORD: {\r\n                            actions: assign((context) => {\r\n                                if (context.score) {return {score: context.score +1,}}\r\n                                else {return {score: counterScore +1}}\r\n                            }),\r\n                            target: 'idle'\r\n                        },\r\n                        TIMEOUT: {\r\n                            actions: assign((context) => {\r\n                                if (context.count) {return {count: context.count +1,}}\r\n                                else {return {count: counterTimeout +1,}}\r\n                            }),\r\n                            target: 'idle'\r\n                        }\r\n                    },\r\n                    states: {\r\n                        progress: {},\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true,\r\n                    language: 'sv-Se'\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"]},"metadata":{},"sourceType":"module"}